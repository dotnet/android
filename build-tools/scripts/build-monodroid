#!/bin/bash -e
MY_NAME="$(basename $0)"
MY_DIR="$(dirname $0)"
HOST="$(uname | tr A-Z a-z)"

function die()
{
    echo $*
    exit 1
}

function usage()
{
	local retcode="$1"

	if [ -z "$retcode" ]; then
		retcode=0
	fi

	cat <<EOF
Usage: ${MY_NAME} [OPTIONS] <TARGET> [<TARGET> ...]

where OPTIONS is one or more of:

  -o|--output=DIR     set output directory instead of the default monodroid 'obj' one
  -r|--rebuild        rebuild from scratch (this involves removing the output directory,
                      after prompting for confirmation)
  -f|--force          skip directory deletion prompt on rebuilds
  -h|--help           show this help screen

Each <TARGET> is a name of the monodroid runtime configuration to build. Format:

   {ARCH}-[net6-][CHECKER-]{CONFIGURATION}

where strings in lower case (e.g. 'net6') are to be used verbatim and the ones in
upper case (e.g. 'ARCH') are placeholders as defined below (alternative forms for
each value are specified in parentheses). All values are case-insensitive:

   ARCH is one of: armeabi-v7a (arm32, armv7), arm64-v8a (arm64, armv8), x86, x86_64 (x64), host, win32, win64
   CHECKER is one of: asan, ubsan
   CONFIGURATION is one of: release, debug

Examples:

  ${MY_NAME} arm64-release
  ${MY_NAME} x86-net6-release host-debug
  ${MY_NAME} x64-ubsan-release x86-net6-asan-debug

EOF

	exit $retcode
}

function unalias_target()
{
	local source="$(echo $1 | tr A-Z a-z)"

	echo $source | sed -e 's/arm32\|armv7/armeabi-v7a/g' \
					   -e 's/arm64\|armv8/arm64-v8a/g' \
					   -e 's/x64/x86_64/g' \
					   -e "s/host/host-${HOST}/g" \
					   -e 's/win32/host-mxe-win32/g' \
					   -e 's/win64/host-mxe-win64/g'
}

function assert_function_exists()
{
	local func_name="$1"
	local target="$2"

	if [ "$(builtin type -type ${func_name})" != "function" ]; then
		die "Target ${target} is unknown"
	fi
}

# Called by the generated script
function cleanup_build_dir()
{
	if [ "${__REBUILD}" != "yes" -o -z "${__BUILD_DIR}" ]; then
		return
	fi

	if [ ! -d "${__BUILD_DIR}" ]; then
		return
	fi

	local remove="no"
	if [ "${__FORCE}" != "yes" ]; then
		echo Build directory exists: ${__BUILD_DIR}
		read -p "Are you sure you want to delete it? [y/N] " YESNO
		if [ "${YESNO}" == "y" -o "${YESNO}" == "Y" ]; then
			remove="yes"
		fi
    else
		remove="yes"
	fi

	if [ "${remove}" = "yes" ]; then
		rm -rf "${__BUILD_DIR}"
	fi
}

source ${MY_DIR}/../../bin/configuration.mk
source ${MY_DIR}/../../bin/Build${CONFIGURATION}/cmake-config.sh

TEMP=$(getopt -o hb:rfvj: --longoptions help,build-dir,rebuild,force,verbose,jobs -n "${MY_NAME}" -- "$@")

if [ $? != 0 ] ; then
    die "Terminating..." >&2
fi
eval set -- "$TEMP"

BUILD_DIR=""
REBUILD="no"
FORCE="no"
VERBOSE=""
JOBS=""

while true; do
    case "$1" in
        -h|--help) usage ;;
        -b|--build_dir) BUILD_DIR="$2" ; shift 2 ;;
        -r|--rebuild) REBUILD="yes" ; shift ;;
		-f|--force) FORCE="yes" ; shift ;;
		-v|--verbose) VERBOSE="-v" ; shift ;;
		-j|--jobs) JOBS="-j $2" ; shift 2 ;;
        --) shift ; break ;;
    esac
done

if [ $# -eq 0 ]; then
	usage 1
fi

for t in "$@"; do
	TARGET=$(unalias_target "${t}")
	FUNC_BASE_NAME="$(echo ${TARGET} | tr '-' '_')"
	CONFIGURE_FUNC_NAME="_configure_${FUNC_BASE_NAME}"
	BUILD_FUNC_NAME="_build_${FUNC_BASE_NAME}"

	assert_function_exists "${CONFIGURE_FUNC_NAME}" "${t}"
	assert_function_exists "${BUILD_FUNC_NAME}" "${t}"

	${CONFIGURE_FUNC_NAME} "${BUILD_DIR}" "${REBUILD}" "${FORCE}"
	${BUILD_FUNC_NAME} "${BUILD_DIR}" ${VERBOSE} ${JOBS}
done
