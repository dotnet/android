<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.Adb" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.BundleTool" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.CreateAndroidEmulator" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RenameTestCases" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RunInstrumentationTests" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RunUITests" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.StartAndroidEmulator" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.KillProcess" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.Sleep" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.ProcessLogcatTiming" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.ProcessPlotInput" />

  <PropertyGroup>
    <_TestImageName>XamarinAndroidTestRunner</_TestImageName>
    <_AdbEmulatorPort>5570</_AdbEmulatorPort>
  </PropertyGroup>

  <ItemGroup>
    <_AllArchives Include="@(TestApk)" />
    <_AllArchives Include="@(TestAab)" />
  </ItemGroup>

  <ItemDefinitionGroup>
    <TestApkInstrumentation>
      <TimeoutInMS>1800000</TimeoutInMS>
    </TestApkInstrumentation>
  </ItemDefinitionGroup>

  <Target Name="AcquireAndroidTarget">
    <Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget
        Condition=" '$(RequireNewEmulator)' != 'True' "
        AdbTarget="$(AdbTarget)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000">
      <Output TaskParameter="DetectedAdbTarget"     PropertyName="_AdbTarget" />
      <Output TaskParameter="IsValidTarget" PropertyName="_ValidAdbTarget"  />
    </Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget>
    <CreateAndroidEmulator
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        AndroidAbi="x86"
        AndroidSdkHome="$(AndroidSdkDirectory)"
        JavaSdkHome="$(JavaSdkDirectory)"
        SdkVersion="29"
        ImageName="$(_TestImageName)"
        ToolExe="$(AvdManagerToolExe)"
        ToolPath="$(AndroidToolsBinPath)"
        RamSizeMB="3072"
        DataPartitionSizeMB="4096"
    />
    <StartAndroidEmulator
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        AndroidSdkHome="$(AndroidSdkDirectory)"
        ImageName="$(_TestImageName)"
        Port="$(_AdbEmulatorPort)"
        ToolExe="$(EmulatorToolExe)"
        ToolPath="$(EmulatorToolPath)">
      <Output TaskParameter="AdbTarget" PropertyName="_AdbTarget" />
      <Output TaskParameter="AdbTarget" PropertyName="_EmuTarget" />
      <Output TaskParameter="EmulatorProcessId" PropertyName="_EmuPid" />
    </StartAndroidEmulator>
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        EnvironmentVariables="ADB_TRACE=all"
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        Arguments="$(_AdbTarget) wait-for-device"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
        WriteOutputAsMessage="True"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        EnvironmentVariables="ADB_TRACE=all"
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        ContinueOnError="ErrorAndContinue"
        Arguments="$(_EmuTarget) shell 'counter=0; while [ $counter -lt 60 ] &amp;&amp; [ &quot;`getprop sys.boot_completed`&quot; != &quot;1&quot; ]; do echo Waiting for device to fully boot; sleep 1; let &quot;counter++&quot;; done'"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
        WriteOutputAsMessage="True"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) shell setprop debug.mono.log timing"
        IgnoreExitCode="True"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) logcat -G 4M"
        IgnoreExitCode="True"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Message
        Condition=" '$(_EmuTarget)' != '' "
        Text="Launched Android emulator; `adb` target: '$(_AdbTarget)'"
    />
  </Target>

  <Target Name="ReleaseAndroidTarget">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition="'@(_FailedComponent)' != ''"
        ContinueOnError="ErrorAndContinue"
        Arguments="$(_EmuTarget) logcat -d"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition=" '$(_EmuTarget)' != '' "
        ContinueOnError="ErrorAndContinue"
        Arguments="$(_EmuTarget) emu kill"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <KillProcess
        Condition=" '$(_EmuTarget)' != '' "
        ContinueOnError="ErrorAndContinue"
        ProcessId="$(_EmuPid)"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="kill-server"
        ContinueOnError="ErrorAndContinue"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Exec
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        ContinueOnError="WarnAndContinue"
        Command="kill -HUP $(_EmuPid)"
    />
    <Sleep
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        Milliseconds="5000"
    />
    <Exec
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        ContinueOnError="WarnAndContinue"
        IgnoreStandardErrorWarningFormat="true"
        Command="kill -KILL $(_EmuPid)"
    />
  </Target>
  <Target Name="ReportComponentFailures">
    <Error
        Condition="'@(_FailedComponent)' != ''"
        Text="Execution of the following components did not complete successfully: @(_FailedComponent->'%(Identity)', ', ')"
    />
  </Target>

  <!--
    <ItemGroup>
      <TestApk Include="ApkFile">
        <Package></Package>
        <InstrumentationType></InstrumentationType>
        <ResultsPath></ResultsPath>
      </TestApk>
    </ItemGroup>
    -->

  <Target Name="DeployTestApks"
      Condition=" '@(TestApk)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) $(AdbOptions) install &quot;%(TestApk.Identity)&quot;"
        ContinueOnError="ErrorAndContinue"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
  </Target>

  <Target Name="DeployTestAabs"
      Condition=" '@(TestAab)' != '' ">
    <PropertyGroup>
      <_KeyStore>$(XamarinAndroidSourcePath)\src\Xamarin.Android.Build.Tasks\Tests\Xamarin.ProjectTools\Resources\Base\test.keystore</_KeyStore>
      <_KeyAlias>mykey</_KeyAlias>
      <_KeyPass>android</_KeyPass>
      <_StorePass>android</_StorePass>
      <!-- Support for running against a system installation of XA. -->
      <BundleToolJarPath Condition=" !Exists('$(BundleToolJarPath)') ">$(AndroidBundleToolJarPath)</BundleToolJarPath>
      <JavaPath Condition=" '$(JavaPath)' == '' ">$(JavaSdkDirectory)\bin\java</JavaPath>
    </PropertyGroup>
    <Xamarin.Android.Tools.BootstrapTasks.BundleTool
        Arguments="build-apks --connected-device --overwrite --mode default --bundle &quot;%(TestAab.Identity)&quot; --output &quot;%(TestAab.Identity).apks&quot;"
        ContinueOnError="ErrorAndContinue"
        JavaPath="$(JavaPath)"
        JarPath="$(BundleToolJarPath)"
        AdbToolExe="$(AdbToolExe)"
        AdbToolPath="$(AdbToolPath)"
        KeyStore="$([System.IO.Path]::GetFullPath ('$(_KeyStore)'))"
        KeyAlias="$(_KeyAlias)"
        KeyPass="$(_KeyPass)"
        StorePass="$(_StorePass)"
    />
    <!-- modules: List of modules to be installed, or "_ALL_" for all modules.-->
    <Xamarin.Android.Tools.BootstrapTasks.BundleTool
        Arguments="install-apks --modules _ALL_ --apks &quot;%(TestAab.Identity).apks&quot;"
        ContinueOnError="ErrorAndContinue"
        JavaPath="$(JavaPath)"
        JarPath="$(BundleToolJarPath)"
        AdbToolExe="$(AdbToolExe)"
        AdbToolPath="$(AdbToolPath)"
    />
  </Target>

  <Target Name="UndeployTestApks"
      Condition=" '@(_AllArchives)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) $(AdbOptions) uninstall &quot;%(_AllArchives.Package)&quot;"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
        IgnoreExitCode="true"
    />
  </Target>

  <Target Name="RunTestApks"
      Condition=" '@(_AllArchives)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition=" '@(TestApkPermission)' != '' "
        IgnoreExitCode="True"
        Arguments="$(_AdbTarget) $(AdbOptions) shell pm grant %(TestApkPermission.Package) android.permission.%(TestApkPermission.Identity)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <PropertyGroup>
      <_IncludeCategories Condition=" '$(IncludeCategories)' != '' ">include=$(IncludeCategories)</_IncludeCategories>
      <_ExcludeCategories Condition=" '$(ExcludeCategories)' != '' ">exclude=$(ExcludeCategories)</_ExcludeCategories>
      <_LogcatFilenameBase>$(MSBuildThisFileDirectory)..\..\bin\Test$(Configuration)\logcat-$(Configuration)$(TestsFlavor)</_LogcatFilenameBase>
    </PropertyGroup>
    <RunInstrumentationTests
        Condition=" '%(TestApkInstrumentation.Identity)' != ''"
        ContinueOnError="ErrorAndContinue"
        AdbTarget="$(_AdbTarget)"
        AdbOptions="$(AdbOptions)"
        LogLevel="Verbose"
        PackageName="%(TestApkInstrumentation.Package)"
        Component="%(TestApkInstrumentation.Package)/%(TestApkInstrumentation.Identity)"
        NUnit2TestResultsFile="%(TestApkInstrumentation.ResultsPath)"
        LogcatFilename="$(_LogcatFilenameBase)-%(TestApkInstrumentation.Package)%(TestApkInstrumentation.LogcatFilenameDistincion).txt"
        InstrumentationArguments="$(_IncludeCategories);$(_ExcludeCategories)"
        TestFixture="$(TestFixture)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="%(TestApkInstrumentation.TimeoutInMS)">
      <Output TaskParameter="FailedToRun" ItemName="_FailedComponent"/>
    </RunInstrumentationTests>
    <RunUITests
        Condition=" '%(_AllArchives.Activity)' != '' "
        ContinueOnError="ErrorAndContinue"
        AdbTarget="$(_AdbTarget)"
        AdbOptions="$(AdbOptions)"
        Activity="%(_AllArchives.Activity)"
        LogcatFilename="$(_LogcatFilenameBase)-%(_AllArchives.Package).txt"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="300000">
    </RunUITests>
    <ProcessLogcatTiming
        Condition=" '%(_AllArchives.TimingDefinitionsFilename)' != ''"
        ContinueOnError="ErrorAndContinue"
        InputFilename="$(_LogcatFilenameBase)-%(_AllArchives.Package).txt"
        ApplicationPackageName="%(_AllArchives.Package)"
        ResultsFilename="%(_AllArchives.TimingResultsFilename)"
        DefinitionsFilename="%(_AllArchives.TimingDefinitionsFilename)"
        AddResults="true"
        LabelSuffix="-$(Configuration)$(TestsFlavor)"
        Activity="%(_AllArchives.Activity)" />
  </Target>
  <Target Name="RenameTestCases">
    <Error
        Condition=" '$(RenameTestCasesGlob)' == '' "
        Text="Please set `%24(RenameTestCasesGlob)`."
    />
    <Error
        Condition=" '$(Configuration)' == '' "
        Text="Please set `%24(Configuration)`."
    />
    <PropertyGroup>
      <_DeleteSource Condition=" '$(KEEP_TEST_SOURCES)' != '' ">False</_DeleteSource>
      <_DeleteSource Condition=" '$(DeleteTestCaseSourceFiles)' != '' ">$(DeleteTestCaseSourceFiles)</_DeleteSource>
      <_DeleteSource Condition=" '$(_DeleteSource)' == '' ">True</_DeleteSource>
    </PropertyGroup>
    <ItemGroup>
      <_RenameSource1 Include="$(RenameTestCasesGlob)" />
    </ItemGroup>
    <ItemGroup>
      <_RenameSource  Include="%(_RenameSource1.Identity)">
        <DestinationFolder>@(_RenameSource1->'%(RootDir)%(Directory)')</DestinationFolder>
      </_RenameSource>
    </ItemGroup>
    <RenameTestCases
        Configuration="$(Configuration)"
        DeleteSourceFiles="$(_DeleteSource)"
        SourceFile="%(_RenameSource.Identity)"
        DestinationFolder="%(_RenameSource.DestinationFolder)">
      <Output TaskParameter="CreatedFiles" ItemName="_RenameFailed"/>
    </RenameTestCases>
    <Error
        Condition=" '%(_RenameFailed.Invalid)' != '' "
        Text="One or more of the unit tests failed to produce an NUnit XML file.  Did a unit test runner crash?"
    />
  </Target>
  <Target Name="RenameApkTestCases"
      Condition=" '@(TestApk)' != '' Or '@(TestAab)' != '' ">
    <RenameTestCases
        Condition=" '%(TestApkInstrumentation.ResultsPath)' != '' "
        Configuration="$(Configuration)"
        DeleteSourceFiles="True"
        DestinationFolder="$(MSBuildThisFileDirectory)..\.."
        SourceFile="%(TestApkInstrumentation.ResultsPath)"
        TestsFlavor="$(TestsFlavor)"
    />
  </Target>
  <Target Name="RecordApkSizes"
      Condition=" '$(HostOS)' != 'Windows' ">
    <Exec
        Condition=" '$(HostOS)' == 'Darwin' And '%(_AllArchives.ApkSizesDefinitionFilename)' != '' "
        Command="stat -f &quot;stat: %z %N&quot; &quot;%(_AllArchives.Identity)&quot; > &quot;$(OutputPath)%(_AllArchives.ApkSizesInputFilename)&quot;"
        ContinueOnError="ErrorAndContinue"
    />
    <Exec
        Condition=" '$(HostOS)' == 'Linux'  And '%(_AllArchives.ApkSizesDefinitionFilename)' != '' "
        Command="stat -c &quot;stat: %s %N&quot; &quot;%(_AllArchives.Identity)&quot; > &quot;$(OutputPath)%(_AllArchives.ApkSizesInputFilename)&quot;"
        ContinueOnError="ErrorAndContinue"
    />
    <Exec
        Condition=" '%(_AllArchives.ApkSizesDefinitionFilename)' != '' "
        Command="unzip -l &quot;%(_AllArchives.Identity)&quot; >> &quot;$(OutputPath)%(_AllArchives.ApkSizesInputFilename)&quot;"
        ContinueOnError="ErrorAndContinue" />
    <ProcessPlotInput
        Condition=" '%(_AllArchives.ApkSizesDefinitionFilename)' != '' "
        InputFilename="$(OutputPath)%(_AllArchives.ApkSizesInputFilename)"
        ApplicationPackageName="%(_AllArchives.Package)"
        ResultsFilename="%(_AllArchives.ApkSizesResultsFilename)"
        DefinitionsFilename="%(_AllArchives.ApkSizesDefinitionFilename)"
        AddResults="True"
        LabelSuffix="-$(Configuration)$(TestsFlavor)"
        ContinueOnError="ErrorAndContinue"
    />
  </Target>
</Project>
