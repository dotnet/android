<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.Adb" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.CreateAndroidEmulator" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RenameTestCases" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RunInstrumentationTests" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.RunUITests" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.StartAndroidEmulator" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\Xamarin.Android.Tools.BootstrapTasks.dll" TaskName="Xamarin.Android.Tools.BootstrapTasks.KillProcess" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.Sleep" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.ProcessLogcatTiming" />
  <UsingTask AssemblyFile="$(MSBuildThisFileDirectory)..\..\bin\Build$(Configuration)\xa-prep-tasks.dll" TaskName="Xamarin.Android.BuildTools.PrepTasks.ProcessPlotInput" />

  <PropertyGroup>
    <_TestImageName>XamarinAndroidTestRunner</_TestImageName>
    <_AdbEmulatorPort>5570</_AdbEmulatorPort>
  </PropertyGroup>

  <Target Name="AcquireAndroidTarget">
    <Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget
        Condition=" '$(RequireNewEmulator)' != 'True' "
        AdbTarget="$(AdbTarget)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000">
      <Output TaskParameter="AdbTarget"     PropertyName="_AdbTarget" />
      <Output TaskParameter="IsValidTarget" PropertyName="_ValidAdbTarget"  />
    </Xamarin.Android.Tools.BootstrapTasks.CheckAdbTarget>
    <CreateAndroidEmulator
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        AndroidAbi="x86"
        AndroidSdkHome="$(AndroidSdkDirectory)"
        JavaSdkHome="$(JavaSdkDirectory)"
        SdkVersion="28"
        ImageName="$(_TestImageName)"
        ToolExe="$(AvdManagerToolExe)"
        ToolPath="$(AndroidToolsBinPath)"
        RamSizeMB="2048"
        DataPartitionSizeMB="2048"
    />
    <StartAndroidEmulator
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        AndroidSdkHome="$(AndroidSdkDirectory)"
        ImageName="$(_TestImageName)"
        Port="$(_AdbEmulatorPort)"
        ToolExe="$(EmulatorToolExe)"
        ToolPath="$(EmulatorToolPath)">
      <Output TaskParameter="AdbTarget" PropertyName="_AdbTarget" />
      <Output TaskParameter="AdbTarget" PropertyName="_EmuTarget" />
      <Output TaskParameter="EmulatorProcessId" PropertyName="_EmuPid" />
    </StartAndroidEmulator>
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        EnvironmentVariables="ADB_TRACE=all"
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        Arguments="$(_AdbTarget) wait-for-device"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        EnvironmentVariables="ADB_TRACE=all"
        Condition=" '$(_ValidAdbTarget)' != 'True' "
        Arguments="$(_EmuTarget) shell 'counter=0; while [ $counter -lt 60 ] &amp;&amp; [ &quot;`getprop sys.boot_completed`&quot; != &quot;1&quot; ]; do echo Waiting for device to fully boot; sleep 1; let &quot;counter++&quot;; done'"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) shell setprop debug.mono.log timing"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) logcat -G 4M"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Message
        Condition=" '$(_EmuTarget)' != '' "
        Text="Launched Android emulator; `adb` target: '$(_AdbTarget)'"
    />
  </Target>

  <Target Name="ReleaseAndroidTarget">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition="'@(_FailedComponent)' != ''"
        ContinueOnError="True"
        Arguments="$(_EmuTarget) logcat -d"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition=" '$(_EmuTarget)' != '' "
        ContinueOnError="True"
        Arguments="$(_EmuTarget) emu kill"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <KillProcess
        Condition=" '$(_EmuTarget)' != '' "
        ContinueOnError="True"
        ProcessId="$(_EmuPid)"
    />
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="kill-server"
        ContinueOnError="True"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <Exec
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        ContinueOnError="True"
        Command="kill -HUP $(_EmuPid)"
    />
    <Sleep
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        Milliseconds="5000"
    />
    <Exec
        Condition=" '$(HostOS)' != 'Windows' And '$(_EmuTarget)' != '' "
        ContinueOnError="True"
        Command="kill -KILL $(_EmuPid)"
    />
  </Target>
  <Target Name="ReportComponentFailures">
    <Error
        Condition="'@(_FailedComponent)' != ''"
        Text="Execution of the following components did not complete successfully: @(_FailedComponent->'%(Identity)', ', ')"
    />
  </Target>

  <!--
    <ItemGroup>
      <TestApk Include="ApkFile">
        <Package></Package>
        <InstrumentationType></InstrumentationType>
        <ResultsPath></ResultsPath>
      </TestApk>
    </ItemGroup>
    -->

  <Target Name="DeployTestApks"
      Condition=" '@(TestApk)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) $(AdbOptions) install &quot;%(TestApk.Identity)&quot;"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
  </Target>

  <Target Name="UndeployTestApks"
      Condition=" '@(TestApk)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Arguments="$(_AdbTarget) $(AdbOptions) uninstall &quot;%(TestApk.Package)&quot;"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="120000"
    />
  </Target>

  <Target Name="RunTestApks"
      Condition=" '@(TestApk)' != '' ">
    <Xamarin.Android.Tools.BootstrapTasks.Adb
        Condition=" '@(TestApkPermission)' != '' "
        Arguments="$(_AdbTarget) $(AdbOptions) shell pm grant %(TestApkPermission.Package) android.permission.%(TestApkPermission.Identity)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="60000"
    />
    <PropertyGroup>
      <_IncludeCategories Condition=" '$(IncludeCategories)' != '' ">include=$(IncludeCategories)</_IncludeCategories>
      <_ExcludeCategories Condition=" '$(ExcludeCategories)' != '' ">exclude=$(ExcludeCategories)</_ExcludeCategories>
      <_LogcatFilenameBase>logcat-$(Configuration)$(TestsAotName)</_LogcatFilenameBase>
    </PropertyGroup>
    <RunInstrumentationTests
        Condition=" '%(TestApkInstrumentation.Identity)' != ''"
        AdbTarget="$(_AdbTarget)"
        AdbOptions="$(AdbOptions)"
        Component="%(TestApkInstrumentation.Package)/%(TestApkInstrumentation.Identity)"
        NUnit2TestResultsFile="%(TestApkInstrumentation.ResultsPath)"
        LogcatFilename="$(_LogcatFilenameBase)-%(TestApkInstrumentation.Package).txt"
        InstrumentationArguments="$(_IncludeCategories);$(_ExcludeCategories)"
        TestFixture="$(TestFixture)"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="1800000">
      <Output TaskParameter="FailedToRun" ItemName="_FailedComponent"/>
    </RunInstrumentationTests>
    <RunUITests
        Condition=" '%(TestApk.Activity)' != '' "
        AdbTarget="$(_AdbTarget)"
        AdbOptions="$(AdbOptions)"
        Activity="%(TestApk.Activity)"
        LogcatFilename="$(_LogcatFilenameBase)-%(TestApk.Package).txt"
        ToolExe="$(AdbToolExe)"
        ToolPath="$(AdbToolPath)"
        Timeout="300000">
    </RunUITests>
    <ProcessLogcatTiming
        Condition=" '%(TestApk.TimingDefinitionsFilename)' != '' And Exists ('$(_LogcatFilenameBase)-%(TestApk.Package).txt')"
        InputFilename="$(_LogcatFilenameBase)-%(TestApk.Package).txt"
        ApplicationPackageName="%(TestApk.Package)"
        ResultsFilename="%(TestApk.TimingResultsFilename)"
        DefinitionsFilename="%(TestApk.TimingDefinitionsFilename)"
        AddResults="true"
        LabelSuffix="-$(Configuration)$(TestsAotName)"
        Activity="%(TestApk.Activity)" />
  </Target>
  <Target Name="RenameTestCases">
    <Error
        Condition=" '$(RenameTestCasesGlob)' == '' "
        Text="Please set `%24(RenameTestCasesGlob)`."
    />
    <Error
        Condition=" '$(Configuration)' == '' "
        Text="Please set `%24(Configuration)`."
    />
    <PropertyGroup>
      <_DeleteSource Condition=" '$(KEEP_TEST_SOURCES)' != '' ">False</_DeleteSource>
      <_DeleteSource Condition=" '$(DeleteTestCaseSourceFiles)' != '' ">$(DeleteTestCaseSourceFiles)</_DeleteSource>
      <_DeleteSource Condition=" '$(_DeleteSource)' == '' ">True</_DeleteSource>
    </PropertyGroup>
    <ItemGroup>
      <_RenameSource1 Include="$(RenameTestCasesGlob)" />
    </ItemGroup>
    <ItemGroup>
      <_RenameSource  Include="%(_RenameSource1.Identity)">
        <DestinationFolder>@(_RenameSource1->'%(RootDir)%(Directory)')</DestinationFolder>
      </_RenameSource>
    </ItemGroup>
    <RenameTestCases
        Configuration="$(Configuration)"
        DeleteSourceFiles="$(_DeleteSource)"
        SourceFile="%(_RenameSource.Identity)"
        DestinationFolder="%(_RenameSource.DestinationFolder)"
    />
  </Target>
  <Target Name="RenameApkTestCases"
      Condition=" '@(TestApk)' != '' ">
    <RenameTestCases
        Condition=" '%(TestApkInstrumentation.ResultsPath)' != '' "
        Configuration="$(Configuration)$(TestsAotName)"
        DeleteSourceFiles="True"
        DestinationFolder="$(MSBuildThisFileDirectory)..\.."
        SourceFile="%(TestApkInstrumentation.ResultsPath)"
    />
  </Target>
  <Target Name="RecordApkSizes"
      Condition=" '$(HostOS)' != 'Windows' ">
    <Exec
        Condition=" '$(HostOS)' == 'Darwin' And '%(TestApk.ApkSizesDefinitionFilename)' != '' "
        Command="stat -f &quot;stat: %z %N&quot; &quot;%(TestApk.Identity)&quot; > &quot;$(OutputPath)%(TestApk.ApkSizesInputFilename)&quot;"
    />
    <Exec
        Condition=" '$(HostOS)' == 'Linux'  And '%(TestApk.ApkSizesDefinitionFilename)' != '' "
        Command="stat -c &quot;stat: %s %N&quot; &quot;%(TestApk.Identity)&quot; > &quot;$(OutputPath)%(TestApk.ApkSizesInputFilename)&quot;"
    />
    <Exec
        Condition=" '%(TestApk.ApkSizesDefinitionFilename)' != '' "
        Command="unzip -l &quot;%(TestApk.Identity)&quot; >> &quot;$(OutputPath)%(TestApk.ApkSizesInputFilename)&quot;" />
    <ProcessPlotInput
        Condition=" '%(TestApk.ApkSizesDefinitionFilename)' != '' "
        InputFilename="$(OutputPath)%(TestApk.ApkSizesInputFilename)"
        ApplicationPackageName="%(TestApk.Package)"
        ResultsFilename="%(TestApk.ApkSizesResultsFilename)"
        DefinitionsFilename="%(TestApk.ApkSizesDefinitionFilename)"
        AddResults="True"
        LabelSuffix="-$(Configuration)$(TestsAotName)"
    />
  </Target>
</Project>
