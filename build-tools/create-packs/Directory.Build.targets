<Project>
  <ItemGroup>
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Feed" Version="$(MicrosoftDotNetBuildTasksFeedPackageVersion)" PrivateAssets="all" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Packaging" Version="$(MicrosoftDotNetBuildTasksFeedPackageVersion)" PrivateAssets="all" />
    <PackageReference Include="Microsoft.DotNet.Arcade.Sdk" Version="$(MicrosoftDotNetBuildTasksFeedPackageVersion)" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <Import Project="License.targets" />
  <Import Project="..\..\build-tools\installers\create-installers.targets" />
  <Import Project="Sdk.props" Sdk="Microsoft.DotNet.SharedFramework.Sdk" Version="$(MicrosoftDotNetBuildTasksFeedPackageVersion)" />

  <UsingTask TaskName="CreateFrameworkListFile" AssemblyFile="$(DotNetSharedFrameworkTaskFile)"/>
  <UsingTask TaskName="Xamarin.Android.BuildTools.PrepTasks.ReplaceFileContents" AssemblyFile="$(PrepTasksAssembly)" />

  <!-- https://github.com/dotnet/runtime/blob/0647ec314948904319da5eb15e9931f7c85ed1e2/src/installer/pkg/projects/Directory.Build.targets#L281 -->
  <!-- TODO: Generate PlatformManifest.txt files? -->
  <Target Name="_GenerateFrameworkListFile" >
    <!-- Hardcode framework attributes -->
    <ItemGroup>
      <FrameworkListRootAttributes Include="Name" Value=".NET $(DotNetTargetFrameworkVersion) - Android" />
      <FrameworkListRootAttributes Include="TargetFrameworkIdentifier" Value=".NETCoreApp" />
      <FrameworkListRootAttributes Include="TargetFrameworkVersion" Value="$(DotNetTargetFrameworkVersion)" />
      <FrameworkListRootAttributes Include="FrameworkName" Value="Microsoft.Android" />
    </ItemGroup>

    <!-- https://github.com/dotnet/arcade/blob/5824baf1c9a900ee00c167f96201c750bba6a574/src/Microsoft.DotNet.SharedFramework.Sdk/src/CreateFrameworkListFile.cs -->
    <CreateFrameworkListFile
        Files="@(_PackageFiles)"
        FileClassifications="@(FrameworkListFileClass)"
        TargetFile="$(FrameworkListFile)"
        TargetFilePrefixes="ref;runtimes;analyzers"
        RootAttributes="@(FrameworkListRootAttributes)"
    />
    <ItemGroup>
      <_PackageFiles Include="$(FrameworkListFile)" PackagePath="data" />
    </ItemGroup>
  </Target>

  <Target Name="_GetDefaultPackageVersion"
      DependsOnTargets="GetXAVersionInfo" >
    <PropertyGroup>
      <PackageVersion>$(AndroidPackVersionLong)</PackageVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_SetGlobalProperties">
    <ItemGroup>
      <_GlobalProperties Include="-p:Configuration=$(Configuration)" />
      <_GlobalProperties Include="-p:IncludeSymbols=False" />
    </ItemGroup>
  </Target>

  <Target Name="_CleanNuGetDirectory">
    <RemoveDir Directories="$(XamarinAndroidSourcePath)bin\Build$(Configuration)\nuget-unsigned" />
  </Target>

  <Target Name="_CreateItemGroups">
    <ItemGroup>
      <_AndroidRuntimeNames Include="Mono;NativeAOT" />
      <_AndroidRIDs Include="android-arm;android-arm64;android-x86;android-x64" Runtime="%(_AndroidRuntimeNames.Identity)" />
    </ItemGroup>
  </Target>

  <Target Name="_CreateDefaultRefPack"
      Condition=" '$(AndroidLatestStableApiLevel)' != '$(AndroidDefaultTargetDotnetApiLevel)' and Exists('$(_MonoAndroidNETOutputRoot)$(AndroidDefaultTargetDotnetApiLevel)\Mono.Android.dll') ">
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:AndroidApiLevel=$(AndroidDefaultTargetDotnetApiLevel) &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Ref.proj&quot;" />
  </Target>

  <Target Name="_CreatePreviewPacks"
      DependsOnTargets="_CreateItemGroups"
      Condition=" '$(AndroidLatestStableApiLevel)' != '$(AndroidLatestUnstableApiLevel)' and Exists('$(_MonoAndroidNETOutputRoot)$(AndroidLatestUnstableApiLevel)\Mono.Android.dll') ">
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:AndroidApiLevel=$(AndroidLatestUnstableApiLevel) -p:AndroidRID=%(_AndroidRIDs.Identity) -p:AndroidRuntime=%(_AndroidRIDs.Runtime) &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Runtime.proj&quot;" />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:AndroidApiLevel=$(AndroidLatestUnstableApiLevel) &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Ref.proj&quot;" />
  </Target>

  <Target Name="CreateAllPacks"
      DependsOnTargets="DeleteExtractedWorkloadPacks;_SetGlobalProperties;GetXAVersionInfo;_CleanNuGetDirectory;_CreateItemGroups;_CreatePreviewPacks;_CreateDefaultRefPack">
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:AndroidRID=%(_AndroidRIDs.Identity) -p:AndroidRuntime=%(_AndroidRIDs.Runtime) &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Runtime.proj&quot;" />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Ref.proj&quot;" />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:HostOS=Linux   &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Sdk.proj&quot;" Condition=" '$(HostOS)' == 'Linux' " />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:HostOS=Darwin  &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Sdk.proj&quot;" Condition=" '$(HostOS)' == 'Darwin' " />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') -p:HostOS=Windows &quot;$(MSBuildThisFileDirectory)Microsoft.Android.Sdk.proj&quot;" Condition=" '$(HostOS)' != 'Linux' " /> <!-- Windows pack should be built both Windows and macOS -->
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') &quot;$(MSBuildThisFileDirectory)Microsoft.NET.Sdk.Android.proj&quot;" />
    <Exec Command="&quot;$(DotNetPreviewTool)&quot; pack @(_GlobalProperties, ' ') &quot;$(XamarinAndroidSourcePath)src\Microsoft.Android.Templates\Microsoft.Android.Templates.csproj&quot;" />
    <ReplaceFileContents
        SourceFile="vs-workload.in.props"
        DestinationFile="$(XamarinAndroidSourcePath)bin\Build$(Configuration)\nuget-unsigned\vs-workload.props"
        Replacements="@PACK_VERSION_LONG@=$(AndroidPackVersionLong);@PACK_VERSION_SHORT@=$(AndroidMSIVersion);@WORKLOAD_VERSION@=$(AndroidMSIVersion);@VSMAN_VERSION@=$(DotNetTargetFramework)"
    />
  </Target>

  <Target Name="ExtractWorkloadPacks"
      DependsOnTargets="DeleteExtractedWorkloadPacks;_GetDefaultPackageVersion">
    <ItemGroup>
      <_WLManifest Include="$(XamarinAndroidSourcePath)bin\Build$(Configuration)\nuget-unsigned\Microsoft.NET.Sdk.Android.Manifest-*.nupkg" />
    </ItemGroup>
    <PropertyGroup>
      <_SdkManifestsFolder>$(DotNetPreviewPath)sdk-manifests\$(DotNetSdkManifestsFolder)\</_SdkManifestsFolder>
    </PropertyGroup>
    <Unzip
        SourceFiles="@(_WLManifest)"
        DestinationFolder="$(_SdkManifestsFolder)temp"
    />
    <!-- The .nupkg contains the files under /data/, so we need to move them -->
    <ItemGroup>
      <_WLExtractedFiles Include="$(_SdkManifestsFolder)temp\LICENSE.TXT" />
      <_WLExtractedFiles Include="$(_SdkManifestsFolder)temp\data\*" />
    </ItemGroup>
    <Move SourceFiles="@(_WLExtractedFiles)" DestinationFolder="$(_SdkManifestsFolder)microsoft.net.sdk.android\$(AndroidPackVersionLong)\" />
    <RemoveDir Directories="$(_SdkManifestsFolder)temp\" />

    <!-- Parse NuGet.config -->
    <XmlPeek
        XmlInputPath="$(XamarinAndroidSourcePath)NuGet.config"
        Query="/configuration/packageSources/add/@value">
      <Output TaskParameter="Result" ItemName="_NuGetSources" />
    </XmlPeek>

    <!-- dotnet workload install android -->
    <PropertyGroup>
      <_TempDirectory>$(IntermediateOutputPath).xa-workload-temp-$([System.IO.Path]::GetRandomFileName())</_TempDirectory>
    </PropertyGroup>
    <ItemGroup>
      <_NuGetSources Include="$(OutputPath.TrimEnd('\'))" />
      <_PreviewPacks Condition=" '$(AndroidLatestStableApiLevel)' != '$(AndroidLatestUnstableApiLevel)' " Include="$(XamarinAndroidSourcePath)bin\Build$(Configuration)\nuget-unsigned\Microsoft.Android.Ref.$(AndroidLatestUnstableApiLevel).*.nupkg" />
      <_InstallArguments Include="android" />
      <_InstallArguments Include="android-$(AndroidLatestUnstableApiLevel)" Condition=" '@(_PreviewPacks->Count())' != '0' " />
      <_InstallArguments Include="--skip-manifest-update" />
      <_InstallArguments Include="--skip-sign-check" />
      <_InstallArguments Include="--verbosity diag" />
      <_InstallArguments Include="--source &quot;%(_NuGetSources.Identity)&quot;" />
      <_InstallArguments Include="--temp-dir &quot;$(_TempDirectory)&quot;" />
    </ItemGroup>
    <MakeDir Directories="$(_TempDirectory);$(BuildOutputDirectory)lib\sdk-manifests" />
    <Exec
        Command="&quot;$(DotNetPreviewTool)&quot; workload install @(_InstallArguments, ' ')"
        WorkingDirectory="$(_TempDirectory)"
    />
    <RemoveDir Directories="$(_TempDirectory)" />
  </Target>

  <Target Name="DeleteExtractedWorkloadPacks" >
    <ItemGroup>
      <_PackApiLevels Include="$(AndroidDefaultTargetDotnetApiLevel)" />
      <_PackApiLevels Include="$(AndroidLatestStableApiLevel)" />
      <_PackApiLevels Include="$(AndroidLatestUnstableApiLevel)" />
    </ItemGroup>
    <ItemGroup>
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)metadata" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)sdk-manifests\$(DotNetSdkManifestsFolder)\workloadsets" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)sdk-manifests\$(DotNetSdkManifestsFolder)\microsoft.net.sdk.android" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Ref.%(_PackApiLevels.Identity)" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Runtime.Mono.%(_PackApiLevels.Identity).android-arm" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Runtime.Mono.%(_PackApiLevels.Identity).android-arm64" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Runtime.Mono.%(_PackApiLevels.Identity).android-x86" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Runtime.Mono.%(_PackApiLevels.Identity).android-x64" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Sdk.Darwin" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Sdk.Linux" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)packs\Microsoft.Android.Sdk.Windows" />
      <_PackFoldersToDelete Include="$(DotNetPreviewPath)template-packs" />
    </ItemGroup>
    <RemoveDir Directories="@(_PackFoldersToDelete)" />
  </Target>

  <!-- https://github.com/dotnet/arcade/blob/00d6decc59f5030c2399a64fd3e4f6e8e11bacca/Documentation/DependencyFlowOnboardingWithoutArcade.md -->
  <Target Name="PushManifestToBuildAssetRegistry" 
      DependsOnTargets="GetXAVersionInfo" >
    <PropertyGroup>
      <ArtifactsLogDir>$(OutputPath)</ArtifactsLogDir>
      <AssetManifestFileName>Assets.xml</AssetManifestFileName>
      <AssetManifestPath>$(ArtifactsLogDir)AssetManifest\$(AssetManifestFileName)</AssetManifestPath>
    </PropertyGroup>

    <Error Condition="Exists($(AssetManifestPath))" Text="The manifest file '$(AssetManifestPath)' already exists." />

    <ItemGroup>
      <ItemsToPush Include="$(OutputPath)*.nupkg" />
    </ItemGroup>

    <Error Condition="'@(ItemsToPush)' == ''" Text="No packages to push." />

    <Message Text="Publishing %(ItemsToPush.Identity)" Importance="normal" />

    <ItemGroup>
      <ManifestBuildData Include="InitialAssetsLocation=" />
      <ManifestBuildData Include="AzureDevOpsBuildId=$(BUILD_BUILDID)" />
      <ManifestBuildData Include="AzureDevOpsBuildDefinitionId=$(SYSTEM_DEFINITIONID)" />
      <ManifestBuildData Include="AzureDevOpsProject=$(SYSTEM_TEAMPROJECT)" />
      <ManifestBuildData Include="AzureDevOpsBuildNumber=$(BUILD_BUILDNUMBER)" />
      <ManifestBuildData Include="AzureDevOpsRepository=$(BUILD_REPOSITORY_URI)" />
      <ManifestBuildData Include="AzureDevOpsBranch=$(BUILD_SOURCEBRANCH)" />
    </ItemGroup>

    <PushToBuildStorage
        ItemsToPush="@(ItemsToPush)"
        IsStableBuild="$(IsStableBuild)"
        ManifestBuildData="@(ManifestBuildData)"
        ManifestRepoUri="$(BUILD_REPOSITORY_NAME)"
        ManifestBranch="$(BUILD_SOURCEBRANCH)"
        ManifestBuildId="$(BUILD_BUILDNUMBER)"
        ManifestCommit="$(BUILD_SOURCEVERSION)"
        AssetManifestPath="$(AssetManifestPath)"
        PublishingVersion="3" />

    <MSBuild
        Targets="Restore"
        Projects="$(PkgMicrosoft_DotNet_Arcade_Sdk)\tools\SdkTasks\PublishBuildAssets.proj"
        Properties="Configuration=$(Configuration);RepoRoot=$(XamarinAndroidSourcePath);VersionPrefix=$(AndroidPackVersionLong)"
    />

    <MSBuild
        Projects="$(PkgMicrosoft_DotNet_Arcade_Sdk)\tools\SdkTasks\PublishBuildAssets.proj"
        Properties="Configuration=$(Configuration);RepoRoot=$(XamarinAndroidSourcePath);VersionPrefix=$(AndroidPackVersionLong);ManifestsPath=$(ArtifactsLogDir)AssetManifest;MaestroApiEndpoint=https://maestro.dot.net"
    />
  </Target>

  <!-- Targets for setting up a local workload test environment without needing to pack .nupkg files -->
  <Import Project="ConfigureLocalWorkload.targets" />

</Project>
