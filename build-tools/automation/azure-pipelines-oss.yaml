# Xamarin.Android-OSS Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
- main
- d16-*
- release/*

pr:
  autoCancel: false
  branches:
    include:
    - main
    - d16-*
    - release/*

# Global variables
# Predefined variables: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://dev.azure.com/xamarin/public/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=48&view=Tab_Variables
variables:
- template: yaml-templates/variables.yaml
- name: EXTRA_MSBUILD_ARGS
  value: /p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False
- name: PREPARE_FLAGS
  value: PREPARE_CI=1 PREPARE_CI_PR=1

stages:
- stage: mac_stage
  displayName: Mac
  condition: eq(variables['EnableMacStage'], 'true')  # The variable is defined on the pipeline definition
  jobs:
  - job: mac_build
    displayName: Mac Build
    pool:
      name: VSEng-Xamarin-RedmondMac-Android-OSS
      demands:
      - agent.osversionfamily -equals 10.15
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all

    steps:
    - checkout: self          # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout
      path: xamarin-android
      clean: true             # Executes: git clean -ffdx && git reset --hard HEAD
      submodules: recursive

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        remove_dotnet: true

    - bash: |
        keychains=`security list-keychains`
        if [[ "$keychains" =~ "\"/Users/${USER}/Library/Keychains/builder.keychain-db\"" ]]; then
            security unlock-keychain -p $(login-xambot-azure-devops-agent-password) builder.keychain
        else
            security create-keychain -p $(login-xambot-azure-devops-agent-password) builder.keychain
        fi
        security -v list-keychains -s builder.keychain
        security -v default-keychain -s builder.keychain
        security -v set-keychain-settings -lut 7200
      displayName: swap default keychain

    - task: provisionator@2
      displayName: Install Xcode
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(Build.SourcesDirectory)/build-tools/provisioning/xcode.csx
        provisioning_extra_args: '-v -v -v -v'

    - bash: |
        keychains=`security list-keychains`
        if [[ "$keychains" =~ "\"/Users/${USER}/Library/Keychains/builder.keychain-db\"" ]]; then
            security unlock-keychain -p $(login-xambot-azure-devops-agent-password) builder.keychain
            security -v delete-keychain builder.keychain
            security -v default-keychain -s login.keychain
            security -v list-keychains -s login.keychain
        fi
      displayName: restore default keychain

    # Prepare and build everything
    - script: >
        echo "make prepare-update-mono CONFIGURATION=$(XA.Build.Configuration) $(PREPARE_FLAGS) MSBUILD_ARGS='$(EXTRA_MSBUILD_ARGS)'" &&
        make prepare-update-mono CONFIGURATION=$(XA.Build.Configuration) $(PREPARE_FLAGS) MSBUILD_ARGS='$(EXTRA_MSBUILD_ARGS)'
      workingDirectory: $(Build.SourcesDirectory)
      displayName: make prepare-update-mono

    - script: >
        echo "make prepare CONFIGURATION=$(XA.Build.Configuration) $(PREPARE_FLAGS) MSBUILD_ARGS='$(EXTRA_MSBUILD_ARGS)'" &&
        make prepare CONFIGURATION=$(XA.Build.Configuration) $(PREPARE_FLAGS) MSBUILD_ARGS='$(EXTRA_MSBUILD_ARGS)'
      workingDirectory: $(Build.SourcesDirectory)
      displayName: make prepare

    - script: >
        echo "make jenkins CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1" &&
        make jenkins CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      workingDirectory: $(Build.SourcesDirectory)
      displayName: make jenkins

    - script: >
        echo "make create-installers CONFIGURATION=$(XA.Build.Configuration)" &&
        make create-installers CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: create installers

    - script: >
        mkdir -p bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: copy installers

    - task: PublishPipelineArtifact@1
      displayName: upload installers
      inputs:
        artifactName: $(InstallerArtifactName) - macOS and Windows
        targetPath: $(Build.SourcesDirectory)/bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)

    - task: PublishPipelineArtifact@1
      displayName: upload nupkgs
      inputs:
        artifactName: $(NuGetArtifactName) - macOS
        targetPath: $(Build.SourcesDirectory)/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)

    - script: >
        echo "all-tests CONFIGURATION=$(XA.Build.Configuration)" &&
        make all-tests CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: make all-tests

    - script: >
        echo "make package-build-status CONFIGURATION=$(XA.Build.Configuration)" &&
        make package-build-status CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: package build status

    - script: >
        echo "make run-performance-tests CONFIGURATION=$(XA.Build.Configuration)" &&
        make run-performance-tests CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(Build.SourcesDirectory)
      displayName: run performance tests
      condition: and(succeeded(), eq(variables['EnableTestExecution'], 'true'))   # The variable is defined on the pipeline definition

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Build Results - macOS

- stage: linux_stage
  displayName: Linux
  condition: eq(variables['EnableLinuxStage'], 'true')    # The variable is defined on the pipeline definition
  dependsOn: []                 # Run stage in parallel
  jobs:
  - job: linux_build_package
    displayName: Linux Build
    pool: android-public-ubuntu-vmss
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - template: yaml-templates/setup-ubuntu.yaml

    - script: make prepare PREPARE_CI_PR=1 PREPARE_AUTOPROVISION=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare

    - script: make jenkins PREPARE_CI_PR=1 PREPARE_AUTOPROVISION=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make jenkins

    - script: make create-nupkgs CONFIGURATION=$(XA.Build.Configuration)
      displayName: make create-nupkgs

    - script: make package-deb CONFIGURATION=$(XA.Build.Configuration)
      displayName: make package-deb

    - script: >
        mkdir -p $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts &&
        cp $(System.DefaultWorkingDirectory)/*xamarin.android*.tar.bz2 $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts &&
        cp $(System.DefaultWorkingDirectory)/*.changes $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts &&
        cp $(System.DefaultWorkingDirectory)/*.dsc $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts &&
        cp $(System.DefaultWorkingDirectory)/*.deb $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts
      displayName: copy linux artifacts

    - task: PublishPipelineArtifact@1
      displayName: publish linux artifacts
      inputs:
        artifactName: $(InstallerArtifactName) - Linux
        targetPath: $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/linux-artifacts

    - task: PublishPipelineArtifact@1
      displayName: upload nupkgs
      inputs:
        artifactName: $(NuGetArtifactName) - Linux
        targetPath: $(System.DefaultWorkingDirectory)/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: OSS Build Results - Linux
