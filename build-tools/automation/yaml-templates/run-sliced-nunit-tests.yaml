parameters:
  testAssembly: ''        # NUnit test assembly to run
  testFilter: ''          # Filter used to select tests (NUnit test selection language, not dotnet test filter language)
  testRunTitle: ''        # Title of the test run
  xaSourcePath: $(System.DefaultWorkingDirectory)
  retryFailedTests: true  # Retry failed tests once

steps:
- ${{if parameters.testFilter}}:
  - pwsh: >-
      $(Agent.ToolsDirectory)/dotnet-test-slicer slice
      --test-assembly="${{ parameters.testAssembly }}"
      --test-filter="${{ parameters.testFilter }}"
      --slice-number=$(System.JobPositionInPhase)
      --total-slices=$(System.TotalJobsInPhase)
      --outfile="${{ parameters.testAssembly }}.runsettings"
    displayName: Slice unit tests with filter
    failOnStderr: true
- ${{ else }}:
  - pwsh: >-
      $(Agent.ToolsDirectory)/dotnet-test-slicer slice
      --test-assembly="${{ parameters.testAssembly }}"
      --slice-number=$(System.JobPositionInPhase)
      --total-slices=$(System.TotalJobsInPhase)
      --outfile="${{ parameters.testAssembly }}.runsettings"
    displayName: Slice unit tests
    failOnStderr: true

- ${{ if eq(parameters.retryFailedTests, 'false') }}:
  # If we aren't using auto-retry logic, then this is just a simple template call
  - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml@self
    parameters:
      testRunTitle: ${{ parameters.testRunTitle }}-$(System.JobPositionInPhase)
      testAssembly: ${{ parameters.testAssembly }}
      dotNetTestExtraArgs: --settings "${{ parameters.testAssembly }}.runsettings"
      xaSourcePath: ${{ parameters.xaSourcePath }}

- ${{ if eq(parameters.retryFailedTests, 'true') }}:
  # We need a custom dotnet test invocation here that does not trigger a task failure on failed tests
  - pwsh: |
      dotnet `
        test `
        ${{ parameters.testAssembly }} `
        --settings "${{ parameters.testAssembly }}.runsettings" `
        --logger trx --results-directory $(Agent.TempDirectory) `
        -- NUnit.NumberOfTestWorkers=$(NUnit.NumberOfTestWorkers)
    displayName: Run tests
    ignoreLASTEXITCODE: true
    workingDirectory: ${{ parameters.xaSourcePath }}

  - pwsh: |
      $(Agent.ToolsDirectory)/dotnet-test-slicer `
        retry `
        --trx="$(Agent.TempDirectory)" `
        --outfile="${{ parameters.testAssembly }}.runsettings"
    displayName: Look for failed tests
    workingDirectory: ${{ parameters.xaSourcePath }}

    # dotnet-test-slicer removed the failed tests from our results file, so it's safe to publish it now
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: $(Agent.TempDirectory)/*.trx
      testRunTitle: ${{ parameters.testRunTitle }}-$(System.JobPositionInPhase)

  - task: DotNetCoreCLI@2
    displayName: Shut down existing dotnet daemons
    inputs:
      command: custom
      custom: build-server
      arguments: shutdown

  - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml@self
    parameters:
      testRunTitle: ${{ parameters.testRunTitle }}-$(System.JobPositionInPhase) (Auto-Retry)
      testAssembly: ${{ parameters.testAssembly }}
      dotNetTestExtraArgs: --settings "${{ parameters.testAssembly }}.runsettings"
      xaSourcePath: ${{ parameters.xaSourcePath }}
