parameters:
  testOS:                 # 'macOS' or 'Windows'
  jobName:                # Name of the job
  jobDisplayName:         # Display name of the job
  agentCount:             # Number of build agents to run in parallel
  testFilter:             # Filter used to select tests (NUnit test selection language, not dotnet test filter language)
  
jobs:
- job: ${{ parameters.jobName }}
  strategy:
    parallel: ${{ parameters.agentCount }}
  displayName: ${{ parameters.jobDisplayName }}
  ${{ if eq(parameters.testOS, 'Windows') }}:
    pool: $(1ESWindowsPool)
  ${{ if eq(parameters.testOS, 'macOS') }}:
    pool:
      vmImage: $(HostedMacImage)
  timeoutInMinutes: 180
  cancelTimeoutInMinutes: 5
  steps:
  - ${{ if eq(parameters.testOS, 'Windows') }}:
    - script: netsh int ipv4 set global sourceroutingbehavior=drop

    - template: kill-processes.yaml

    - template: clean.yaml

  - template: setup-test-environment.yaml
    parameters:
      provisionClassic: false
      installTestSlicer: true
      installLegacyDotNet: false
      restoreNUnitConsole: false
      updateMono: false
      
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: $(TestAssembliesArtifactName)
      downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

  - template: run-sliced-nunit-tests.yaml
    parameters:
      testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
      testFilter: ${{ parameters.testFilter }} $(ExcludedNUnitCategories)
      testRunTitle: Xamarin.Android.Build.Tests - ${{ parameters.testOS }}
      testResultsTitle: TestResult-MSBuildTests-${{ parameters.jobName }}

  - template: upload-results.yaml
    parameters:
      artifactName: Test Results - MSBuild - ${{ parameters.testOS }}-$(System.JobPositionInPhase)

  - template: fail-on-issue.yaml
