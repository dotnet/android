parameters:
  configuration: $(XA.Build.Configuration)
  xaSourcePath: $(System.DefaultWorkingDirectory)
  jdkTestFolder: $(JAVA_HOME_11_X64)
  remove_dotnet: false
  installTestSlicer: false
  installApkDiff: true
  installLegacyDotNet: true
  installLegacyXamarinAndroid: false
  restoreNUnitConsole: true
  updateMono: true
  androidSdkPlatforms: $(DefaultTestSdkPlatforms)
  repositoryAlias: 'self'
  commit: ''
  xaprepareScenario: AndroidTestDependencies        # Use 'EmulatorTestDependencies' for agents that need the emulator installed

steps:

- template: sdk-unified/steps/checkout/v1.yml@yaml-templates
  parameters:
    resource: ${{ parameters.repositoryAlias }}
    commit: ${{ parameters.commit }}
    clean: true
    submodules: recursive

- script: |
    echo "##vso[task.setvariable variable=JI_JAVA_HOME]${{ parameters.jdkTestFolder }}"
    echo "##vso[task.setvariable variable=DOTNET_TOOL_PATH]${{ parameters.xaSourcePath }}/bin/${{ parameters.configuration }}/dotnet/dotnet"
  displayName: set JI_JAVA_HOME
  condition: and(succeeded(), ne(variables['agent.os'], 'Windows_NT'))

- script: |
    echo ##vso[task.setvariable variable=JI_JAVA_HOME]${{ parameters.jdkTestFolder }}
    echo ##vso[task.setvariable variable=DOTNET_TOOL_PATH]${{ parameters.xaSourcePath }}\bin\${{ parameters.configuration }}\dotnet\dotnet.exe
  displayName: set JI_JAVA_HOME
  condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

# Install .NET 6 for legacy tests
- ${{ if eq(parameters.installLegacyDotNet, true) }}:
  - template: use-dot-net.yaml
    parameters:
      version: 6.0
      quality: GA
      remove_dotnet: ${{ parameters.remove_dotnet }}

# Install latest .NET
- template: use-dot-net.yaml

- task: DotNetCoreCLI@2
  displayName: shut down existing build daemons
  inputs:
    command: custom
    custom: build-server
    arguments: shutdown

- ${{ if eq(parameters.updateMono, true) }}:
  - template: run-xaprepare.yaml
    parameters:
      displayName: run xaprepare-UpdateMono
      arguments: --s=UpdateMono --auto-provision=yes --auto-provision-uses-sudo=yes
      condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))
      xaSourcePath: ${{ parameters.xaSourcePath }}

- ${{ if eq(parameters.installLegacyXamarinAndroid, true) }}:
  - template: install-global-tool.yaml
    parameters:
      toolName: boots
      version: $(BootsToolVersion)
      continueOnError: false
  - powershell: boots --stable Xamarin.Android
    displayName: install Xamarin.Android stable

- template: run-xaprepare.yaml
  parameters:
    arguments: --s=${{ parameters.xaprepareScenario }}  --android-sdk-platforms="${{ parameters.androidSdkPlatforms }}"
    xaSourcePath: ${{ parameters.xaSourcePath }}

- ${{ if eq(parameters.restoreNUnitConsole, true) }}:
  - task: DotNetCoreCLI@2
    displayName: restore NUnit.Console
    inputs:
      command: restore
      projects: ${{ parameters.xaSourcePath }}/src/Xamarin.Android.Build.Tasks/Tests/Xamarin.ProjectTools/Xamarin.ProjectTools.csproj
      restoreArguments: -bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/restore-Xamarin.ProjectTools.binlog
      nugetConfigPath: ${{ parameters.xaSourcePath }}/NuGet.config
      feedsToUse: config

- task: DotNetCoreCLI@2
  displayName: build Xamarin.Android.Tools.BootstrapTasks.csproj
  inputs:
    projects: ${{ parameters.xaSourcePath }}/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
    arguments: -c ${{ parameters.configuration }} -bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/BootstrapTasks.binlog

# Download and install .NET nupkgs
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(NuGetArtifactName)
    downloadPath: ${{ parameters.xaSourcePath }}/bin/Build${{ parameters.configuration }}/nuget-unsigned

- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(LinuxNuGetArtifactName)
    downloadPath: ${{ parameters.xaSourcePath }}/bin/Build${{ parameters.configuration }}/nuget-unsigned
  condition: and(succeeded(), eq(variables['agent.os'], 'Linux'))

- task: DotNetCoreCLI@2
  displayName: extract workload packs
  inputs:
    projects: ${{ parameters.xaSourcePath }}/build-tools/create-packs/Microsoft.Android.Sdk.proj
    arguments: -t:ExtractWorkloadPacks -c ${{ parameters.configuration }} -v:n -bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/extract-workloads.binlog

- ${{ if eq(parameters.installApkDiff, true) }}:
  - template: install-global-tool.yaml
    parameters:
      toolName: apkdiff
      version: $(ApkDiffToolVersion)

- ${{ if eq(parameters.installTestSlicer, true) }}:
  - template: install-global-tool.yaml
    parameters:
      toolName: dotnet-test-slicer
      version: $(TestSlicerToolVersion)
