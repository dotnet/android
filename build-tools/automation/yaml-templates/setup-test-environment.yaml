parameters:
  configuration: $(XA.Build.Configuration)
  provisionExtraArgs: -vv -f
  xaSourcePath: $(System.DefaultWorkingDirectory)
  updateVS: false
  jdkTestFolder: $(XA.Jdk11.Folder)

steps:
- checkout: self
  clean: true
  submodules: recursive

- ${{ if eq(parameters.updateVS, true) }}:
  - template: update-vs.yaml
    parameters: 
      xasourcePath: ${{ parameters.xaSourcePath }}

- template: run-installer.yaml
  parameters:
    provisionExtraArgs: ${{ parameters.provisionExtraArgs }}

- script: |
    echo "##vso[task.setvariable variable=JI_JAVA_HOME]$HOME/Library/Android/${{ parameters.jdkTestFolder }}"
    echo "##vso[task.setvariable variable=DOTNET_TOOL_PATH]$HOME/Library/Android/dotnet/dotnet"
  displayName: set JI_JAVA_HOME
  condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

- script: |
    echo ##vso[task.setvariable variable=JI_JAVA_HOME]%USERPROFILE%\android-toolchain\${{ parameters.jdkTestFolder }}
    echo ##vso[task.setvariable variable=DOTNET_TOOL_PATH]%USERPROFILE%\android-toolchain\dotnet\dotnet.exe
  displayName: set JI_JAVA_HOME
  condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

- template: use-dot-net.yaml

- task: DotNetCoreCLI@2
  displayName: shut down existing build daemons
  inputs:
    command: custom
    custom: build-server
    arguments: shutdown

- template: run-xaprepare.yaml
  parameters:
    displayName: run xaprepare-UpdateMono
    arguments: --s=UpdateMono --auto-provision=yes --auto-provision-uses-sudo=yes
    condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))
    xaSourcePath: ${{ parameters.xaSourcePath }}
  
- template: run-xaprepare.yaml
  parameters:
    arguments: --s=AndroidTestDependencies
    xaSourcePath: ${{ parameters.xaSourcePath }}

- task: MSBuild@1
  displayName: nuget restore Xamarin.Android.Build.Tasks.sln
  inputs:
    solution: ${{ parameters.xaSourcePath }}/Xamarin.Android.Build.Tasks.sln
    configuration: ${{ parameters.configuration }}
    msbuildArguments: /t:Restore /p:RestoreConfigFile=${{ parameters.xaSourcePath }}/NuGet.config /bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/restore-Xamarin.Android.Build.Tasks.binlog

- task: MSBuild@1
  displayName: nuget restore Xamarin.Android-Tests.sln
  inputs:
    solution: ${{ parameters.xaSourcePath }}/Xamarin.Android-Tests.sln
    configuration: ${{ parameters.configuration }}
    msbuildArguments: /t:Restore /p:RestoreConfigFile=${{ parameters.xaSourcePath }}/NuGet.config /bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/restore-Xamarin.Android-Tests.binlog

- task: MSBuild@1
  displayName: build Xamarin.Android.Tools.BootstrapTasks.csproj
  inputs:
    solution: ${{ parameters.xaSourcePath }}/build-tools/xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
    configuration: ${{ parameters.configuration }}
    msbuildArguments: /restore /bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/BootstrapTasks.binlog

# Download and install .NET nupkgs
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(NuGetArtifactName)
    downloadPath: ${{ parameters.xaSourcePath }}/bin/Build${{ parameters.configuration }}/$(NuGetArtifactName)

- task: DotNetCoreCLI@2
  displayName: extract workload packs
  inputs:
    projects: ${{ parameters.xaSourcePath }}/build-tools/create-packs/Microsoft.Android.Sdk.proj
    arguments: -t:ExtractWorkloadPacks -c ${{ parameters.configuration }} -v:n -bl:${{ parameters.xaSourcePath }}/bin/Test${{ parameters.configuration }}/extract-workloads.binlog

- template: install-apkdiff.yaml
