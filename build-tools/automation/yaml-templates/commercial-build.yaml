parameters:
  installerArtifactName: $(InstallerArtifactName)
  xaSourcePath: $(System.DefaultWorkingDirectory)/xamarin-android
  makeMSBuildArgs: ''
  nugetArtifactName: $(NuGetArtifactName)
  testAssembliesArtifactName: $(TestAssembliesArtifactName)

steps:
- script: echo "##vso[task.setvariable variable=JI_JAVA_HOME]$HOME/android-toolchain/jdk-17"
  displayName: set JI_JAVA_HOME

- template: use-dot-net.yaml
  parameters:
    remove_dotnet: true

- task: NuGetAuthenticate@0
  displayName: authenticate with azure artifacts
  inputs:
    forceReinstallCredentialProvider: true

- script: make prepare-update-mono CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
  workingDirectory: ${{ parameters.xaSourcePath }}
  displayName: make prepare-update-mono

# Always checkout a second resource to ensure we are using multi-repo checkout behavior
#  https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/multi-repo-checkout?view=azure-devops#checkout-path
- checkout: yaml-templates

- ${{ if ne(variables['System.PullRequest.IsFork'], 'True') }}:
  - script: >
      ls -l /Applications &&
      sudo xcode-select --switch /Applications/Xcode_14.2.app &&
      xcode-select --print-path
    displayName: Use Xcode 14.2

  # Clone 'monodroid' without submodules
  - checkout: monodroid
    clean: true
    path: s/xamarin-android/external/monodroid

  # Tell git to ignore the 'xamarin-android' submodule, which is large and unneeded
  - script: git config submodule."external/xamarin-android".update none
    workingDirectory: xamarin-android/external/monodroid
    displayName: Ignore XA submodule

  # Clone 'monodroid' with the rest of the submodules
  - checkout: monodroid
    submodules: recursive
    path: s/xamarin-android/external/monodroid
    persistCredentials: true

  - script: rm -rf external/monodroid/external/xamarin-android
    workingDirectory: ${{ parameters.xaSourcePath }}
    displayName: delete legacy xamarin-android submodule

  - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
    workingDirectory: ${{ parameters.xaSourcePath }}
    displayName: make prepare-external-git-dependencies

- task: CodeQL3000Init@0
  displayName: CodeQL 3000 Init
  condition: and(succeeded(), eq(variables['Codeql.Enabled'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

# Prepare and Build everything
- script: make jenkins CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1 MSBUILD_ARGS='${{ parameters.makeMSBuildArgs }}'
  workingDirectory: ${{ parameters.xaSourcePath }}
  displayName: make jenkins

- task: CodeQL3000Finalize@0
  displayName: CodeQL 3000 Finalize
  condition: and(succeededOrFailed(), eq(variables['Codeql.Enabled'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

- template: install-microbuild-tooling.yaml
  parameters:
    condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

# Restore needs to be executed first or MicroBuild targets won't be imported in time
- task: MSBuild@1
  displayName: msbuild /t:Restore sign-content.proj
  condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))
  inputs:
    solution: ${{ parameters.xaSourcePath }}/build-tools/installers/sign-content.proj
    configuration: $(XA.Build.Configuration)
    msbuildArguments: /t:Restore /bl:${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/restore-sign-content.binlog

- task: MSBuild@1
  displayName: PKG signing - add entitlements and sign
  condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))
  inputs:
    solution: ${{ parameters.xaSourcePath }}/build-tools/installers/sign-content.proj
    configuration: $(XA.Build.Configuration)
    msbuildArguments: >-
      /t:AddMachOEntitlements;AddMSBuildFilesUnixSign;AddMSBuildFilesUnixSignAndHarden;Build
      /p:SignType=$(MicroBuildSignType)
      /p:MicroBuildOverridePluginDirectory=$(Build.StagingDirectory)/MicroBuild/Plugins
      /bl:${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/sign-content.binlog

- task: MSBuild@1
  displayName: PKG signing - sign binutils libraries
  condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))
  inputs:
    solution: ${{ parameters.xaSourcePath }}/build-tools/installers/sign-content.proj
    configuration: $(XA.Build.Configuration)
    msbuildArguments: >-
      /t:AddBinUtilsFilesUnixSign;Build
      /p:SignType=$(MicroBuildSignType)
      /p:MicroBuildOverridePluginDirectory=$(Build.StagingDirectory)/MicroBuild/Plugins
      /bl:${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/sign-bu-lib.binlog

- task: MSBuild@1
  displayName: PKG signing - sign binutils executables
  condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))
  inputs:
    solution: ${{ parameters.xaSourcePath }}/build-tools/installers/sign-content.proj
    configuration: $(XA.Build.Configuration)
    msbuildArguments: >-
      /t:AddBinUtilsFilesUnixSignAndHarden;Build
      /p:SignType=$(MicroBuildSignType)
      /p:MicroBuildOverridePluginDirectory=$(Build.StagingDirectory)/MicroBuild/Plugins
      /bl:${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/sign-bu-ex.binlog

- template: remove-microbuild-tooling.yaml
  parameters:
    condition: and(succeededOrFailed(), eq(variables['MicroBuildSignType'], 'Real'))

- script: make create-installers CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS='${{ parameters.makeMSBuildArgs }}'
  workingDirectory: ${{ parameters.xaSourcePath }}
  displayName: make create-installers

- task: PublishPipelineArtifact@1
  displayName: upload nupkgs
  inputs:
    artifactName: ${{ parameters.nugetArtifactName }}
    targetPath: ${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/nuget-unsigned

- task: PublishPipelineArtifact@1
  displayName: upload test assemblies
  inputs:
    artifactName: ${{ parameters.testAssembliesArtifactName }}
    targetPath: ${{ parameters.xaSourcePath }}/bin/Test$(XA.Build.Configuration)

- task: PublishPipelineArtifact@1
  displayName: upload build tools inventory
  inputs:
    artifactName: AndroidBuildToolsInventory
    targetPath:  ${{ parameters.xaSourcePath }}/bin/Build$(XA.Build.Configuration)/buildtoolsinventory.csv
