# Runs MSBuild tests against a device running on Windows

parameters:
  node_id: 0
  job_name: ''
  job_suffix: ''
  nunit_categories: ''
  target_framework: 'net472'
  run_extra_tests: false

jobs:
  - job: ${{ parameters.job_name }}
    displayName: MSBuild ${{ parameters.job_suffix }} - Windows-${{ parameters.node_id }}
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    variables:
      VSINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      UseDotNet: ${{ eq(parameters.target_framework, 'netcoreapp3.1') }}
    steps:

    - template: kill-processes.yaml

    - template: clean.yaml

    - template: setup-test-environment.yaml
      parameters:
        updateVS: true

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)

    # Limit the amount of worker threads used to run these tests in parallel to half of what is currently available (8) on the Windows pool.
    # Using all available cores seems to occasionally bog down our machines and cause parallel test execution to slow down dramatically.
    - template: run-nunit-tests.yaml
      parameters:
        useDotNet: $(UseDotNet)
        testRunTitle: Xamarin.Android.Build.Tests - Windows-${{ parameters.node_id }} - ${{ parameters.job_suffix }}
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\${{ parameters.target_framework }}\Xamarin.Android.Build.Tests.dll
        nunitConsoleExtraArgs: --where "cat == Node-${{ parameters.node_id }} ${{ parameters.nunit_categories }}"
        dotNetTestExtraArgs: --filter "TestCategory = Node-${{ parameters.node_id }} ${{ parameters.nunit_categories }}"
        testResultsFile: TestResult-MSBuildTests-${{ parameters.job_name }}-$(XA.Build.Configuration).xml

    # Only run these tests on node 2
    - ${{ if eq(parameters.run_extra_tests, true) }}:
      - template: run-nunit-tests.yaml
        parameters:
          useDotNet: $(UseDotNet)
          testRunTitle: Xamarin.Android.Build.Tests.Commercial - Windows
          testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\Xamarin.Android.Build.Tests.Commercial.dll
          testResultsFile: TestResult-MSBuildTestsCommercial-Windows-$(XA.Build.Configuration).xml
          
      - template: run-nunit-tests.yaml
        parameters:
          useDotNet: $(UseDotNet)
          testRunTitle: Xamarin.Android.Build.Tests - Windows - No Node
          testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\${{ parameters.target_framework }}\Xamarin.Android.Build.Tests.dll
          nunitConsoleExtraArgs: --where "cat != Node-1 && cat != Node-2 && cat != Node-3"
          dotNetTestExtraArgs: --filter "TestCategory != Node-1 & TestCategory != Node-2 & TestCategory != Node-3"
          testResultsFile: TestResult-MSBuildTests-Windows-NoNode-$(XA.Build.Configuration).xml

    - template: upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild ${{ parameters.job_suffix }} - Windows-${{ parameters.node_id }}

    - template: fail-on-issue.yaml
