# Runs MSBuild tests against a device running on macOS

parameters:
  job_name: 'mac_dotnetdevice_tests'
  agent_count: 8
  stageCondition: succeeded()

stages:
- stage: msbuilddevice_tests
  displayName: MSBuild Emulator Tests
  dependsOn: mac_build
  condition: ${{ parameters.stageCondition }}
  jobs:
  - job: ${{ parameters.job_name }}
    strategy:
      parallel: ${{ parameters.agent_count }}
    displayName: "macOS > Tests > MSBuild+Emulator"
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      androidSdkPlatforms: 33
    steps:
    - template: setup-test-environment.yaml
      parameters:
        provisionClassic: false
        provisionatorChannel: ${{ parameters.provisionatorChannel }}
        installTestSlicer: true
        installApkDiff: false
        installLegacyDotNet: false
        restoreNUnitConsole: false
        updateMono: false
        androidSdkPlatforms: $(androidSdkPlatforms)

    - template: run-xaprepare.yaml
      parameters:
        displayName: install emulator
        arguments: --s=EmulatorTestDependencies --android-sdk-platforms="$(androidSdkPlatforms)"
        
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)
      
    - template: start-stop-emulator.yaml

    - template: run-sliced-nunit-tests.yaml
      parameters:
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/$(DotNetStableTargetFramework)/MSBuildDeviceIntegration.dll
        testFilter: cat != TimeZoneInfo & cat != Localization $(ExcludedNUnitCategories)
        testRunTitle: MSBuildDeviceIntegration On Device - macOS
        testResultsTitle: TestResult-MSBuildDeviceIntegration-${{ parameters.job_name }}

    - template: start-stop-emulator.yaml
      parameters:
        command: stop

    - template: upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild With Emulator - macOS-$(System.JobPositionInPhase)

    - template: fail-on-issue.yaml

  - job: wear_tests
    displayName: macOS > Tests > WearOS 
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Android30-x86:
          avdApiLevel: 30
          avdAbi: x86
          avdType: android-wear
          deviceName: wear_square
          androidSdkPlatforms: 33
    pool:
      vmImage: $(HostedMacImage)
    workspace:
      clean: all
    steps:
    - template: setup-test-environment.yaml
      parameters:
        provisionClassic: false
        provisionatorChannel: ${{ parameters.provisionatorChannel }}
        configuration: $(XA.Build.Configuration)
        installApkDiff: false
        installLegacyDotNet: false
        restoreNUnitConsole: false
        androidSdkPlatforms: $(androidSdkPlatforms)

    - template: run-xaprepare.yaml
      parameters:
        displayName: install required brew tools and prepare java.interop
        arguments: --s=Required --auto-provision=yes --auto-provision-uses-sudo=yes

    - template: run-xaprepare.yaml
      parameters:
        displayName: install emulator
        arguments: --s=EmulatorTestDependencies --android-sdk-platforms="$(androidSdkPlatforms)"

    - script: echo "##vso[task.setvariable variable=Java8SdkDirectory]$JAVA_HOME_8_X64"
      displayName: set Java8SdkDirectory

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: start-stop-emulator.yaml
      parameters:
        specificImage: true
        deviceName: $(deviceName)
        avdApiLevel: $(avdApiLevel)
        avdAbi: $(avdAbi)
        avdType: $(avdType)

    - template: run-nunit-tests.yaml
      parameters:
        testRunTitle: WearOS On Device - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/$(DotNetStableTargetFramework)/MSBuildDeviceIntegration.dll
        dotNetTestExtraArgs: --filter "TestCategory = WearOS"
        testResultsFile: TestResult-WearOS--$(XA.Build.Configuration).xml

    - template: start-stop-emulator.yaml
      parameters:
        command: stop
        specificImage: true
        deviceName: $(deviceName)
        avdApiLevel: $(avdApiLevel)
        avdAbi: $(avdAbi)
        avdType: $(avdType)

    - template: upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - Emulator $(avdApiLevel)-$(avdAbi)-$(avdType) - macOS

    - template: fail-on-issue.yaml

