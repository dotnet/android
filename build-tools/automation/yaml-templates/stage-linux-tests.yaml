# Runs smoke tests on Linux packages.
parameters:
  runtimeName: ''

stages:
- stage: linux_tests_${{ parameters.runtimeName }}
  displayName: Linux Tests (${{ parameters.runtimeName }})
  dependsOn:
  - mac_build
  - linux_build
  jobs:
  # Check - "Xamarin.Android (Linux Tests Linux > Tests > MSBuild)"
  - job: linux_tests_smoke_1
    displayName: Linux > Tests > MSBuild 1 (${{ parameters.runtimeName }})
    pool:
      name: MAUI-1ESPT
      image: $(LinuxPoolImage1ESPT)
      os: linux
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - template: /build-tools/automation/yaml-templates/select-test-runtime.yaml
      parameters:
        runtimeName: ${{ parameters.runtimeName }}

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)-${{ parameters.rutimeName }}
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Linux BuildTest (${{ parameters.runtimeName }})
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = BuildTest"

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - Linux 1 - ${{ parameters.runtimeName }}

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml

  - job: linux_tests_smoke_2
    displayName: Linux > Tests > MSBuild 2 (${{ parameters.runtimeName }})
    pool:
      name: MAUI-1ESPT
      image: $(LinuxPoolImage1ESPT)
      os: linux
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - template: /build-tools/automation/yaml-templates/select-test-runtime.yaml
      parameters:
        runtimeName: ${{ parameters.runtimeName }}

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)-${{ parameters.runtimeName }}
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Linux PackagingTest (${{ parameters.runtimeName }})
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = PackagingTest"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Linux XASdkTests (${{ parameters.runtimeName }})
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = XASdkTests & Name != XamarinLegacySdk"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Linux AndroidDependenciesTests (${{ parameters.runtimeName }})
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = AndroidDependenciesTests"

    - task: ShellScript@2
      displayName: Test dotnet-local.sh
      inputs:
        scriptPath: dotnet-local.sh
        args: build samples/HelloWorld/HelloWorld/HelloWorld.DotNet.csproj

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - Linux 2 - ${{ parameters.runtimeName }}

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml
