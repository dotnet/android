parameters:
  buildPool: $(1ESWindowsPool)
  buildResultArtifactName: Build Results - Windows
  checkoutCommit: ''
  checkoutPath: ''
  checkoutPersistCredentials: false
  dependsOn: ''
  dependsOnResult: ''
  jobName: win_build_test
  jobDisplayName: Windows > Build & Smoke Test
  repositoryAlias: self
  stageName: win_build_test
  stageDisplayName: Windows

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.stageDisplayName }}
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if and(ne(parameters.dependsOn, ''), ne(parameters.dependsOnResult, '')) }}:
    condition: eq(dependencies.${{ parameters.dependsOn }}.result, '${{ parameters.dependsOnResult }}')
  jobs:
  # Check - "Xamarin.Android (Windows > Build & Smoke Test)"
  - job: ${{ parameters.jobName }}
    displayName: ${{ parameters.jobDisplayName }}
    pool: ${{ parameters.buildPool }}
    timeoutInMinutes: 360
    steps:
    - template: sdk-unified/steps/checkout/v1.yml@yaml-templates
      parameters:
        resource: ${{ parameters.repositoryAlias }}
        commit: ${{ parameters.checkoutCommit }}
        path: ${{ parameters.checkoutPath }}
        persistCredentials: ${{ parameters.checkoutPersistCredentials }}

    - template: kill-processes.yaml

    - template: clean.yaml

    - script: |
        echo ##vso[task.setvariable variable=JI_JAVA_HOME]%JAVA_HOME_11_X64%
      displayName: set JI_JAVA_HOME

    - template: use-dot-net.yaml
      parameters:
        remove_dotnet: true

    # xabuild still depends on .NET Core 3 or earlier
    - template: use-dot-net.yaml
      parameters:
        version: 3.1
        quality: GA

    # Downgrade the XA .vsix installed into the instance of VS that we are building with so that we don't restore/build against a test version.
    # The VS installer will attempt to resume any failed or partial installation before trying to downgrade Xamarin.Android.
    # VSIXInstaller.exe will exit non-zero when the downgrade attempt is a no-op, so we will allow this step to fail silently.
    - powershell: |
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        & "$vsWhere" -all -prerelease -latest | Out-Default
        $isLatestVSLaunchable = & "$vsWhere" -all -prerelease -latest -property isLaunchable
        if ($isLatestVSLaunchable -eq 0) {
            $vsPath = & "$vsWhere" -all -prerelease -latest -property installationPath
            Write-Host "Attempting to repair VS instance:" $vsPath
            $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            & "$vsInstaller" resume --installPath $vsPath --quiet --norestart | Out-Default
            Write-Host "vs_installer.exe resume attempt complete"
        }
        $vsixInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\resources\app\ServiceHub\Services\Microsoft.VisualStudio.Setup.Service\VSIXInstaller.exe"
        $ts = Get-Date -Format FileDateTimeUniversal
        $log = "xavsixdowngrade-$ts.log"
        $process = Start-Process -NoNewWindow -FilePath $vsixInstaller -ArgumentList "/downgrade:Xamarin.Android.Sdk /admin /quiet /logFile:$log" -Wait -PassThru -RedirectStandardError "err.txt"
        Get-Content "err.txt" | Write-Host
        Get-Content "${env:TEMP}\$log" | Write-Host
        Write-Host "VSInstaller.exe exited with code:" $process.ExitCode
        Remove-Item "${env:TEMP}\$log"
      displayName: downgrade XA to stable
      ignoreLASTEXITCODE: true

    - task: DotNetCoreCLI@2
      displayName: Prepare Solution
      inputs:
        projects: Xamarin.Android.sln
        arguments: '-c $(XA.Build.Configuration) -t:Prepare --no-restore -p:AutoProvision=true -bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-build-prepare.binlog'

    # Build, pack .nupkgs, and extract workload packs to dotnet preview test directory
    - template: run-dotnet-preview.yaml
      parameters:
        project: Xamarin.Android.sln
        arguments: >-
          -t:BuildDotNet,PackDotNet -c $(XA.Build.Configuration) -v:n
          -bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-build.binlog
        displayName: Build Solution
        continueOnError: false

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-create-vsix.binlog

    - task: MSBuild@1
      displayName: msbuild xabuild
      inputs:
        solution: tools\xabuild\xabuild.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-xabuild.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /restore /p:Configuration=$(XA.Build.Configuration) /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\dotnet-build-tests.binlog

    - template: install-apkdiff.yaml

    - template: run-nunit-tests.yaml
      parameters:
        testRunTitle: Smoke MSBuild Tests - Windows Dotnet Build
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\$(DotNetStableTargetFramework)\Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-SmokeMSBuildTests-WinDotnetBuild-$(XA.Build.Configuration).xml
        dotNetTestExtraArgs: --filter "TestCategory = SmokeTests $(DotNetNUnitCategories)"

    - template: upload-results.yaml
      parameters:
        artifactName: ${{ parameters.buildResultArtifactName }}
        includeBuildResults: true

    - template: fail-on-issue.yaml
