parameters:
  xqaConfiguration: Debug

steps:
- task: xamops.azdevex.lingering-process-task.lingering-process-task@1

- script: |
    git clone -q https://github.com/xamarin/xamarin-android.git
    git clone -q https://github.com/xamarin/monodroid-samples.git
    git clone -q https://github.com/xamarin/xamarin-forms-samples.git
    git clone -q https://$(GitHub.Token)@github.com/xamarin/QualityAssurance.git
    cd QualityAssurance
    git checkout xa-smoke-test-prs
  displayName: clone test dependencies

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: Provision Android Dependencies
  inputs:
    github_token: $(GitHub.Token)
    provisioning_script: $(System.DefaultWorkingDirectory)/QualityAssurance/Scripts/Provisionator/xamarin-android.csx
    provisioning_extra_args: -vv DEVDIV_PACKAGES_TOKEN=$(VSTS.PackageAndCIBuilds.A)

- script: make prepare-update-mono V=1 PREPARE_CI=1 PREPARE_AUTOPROVISION=1
  displayName: install mono
  condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

- task: NuGetCommand@2
  displayName: nuget restore Xamarin.Android.sln
  inputs:
    restoreSolution: Xamarin.Android.sln

# Workaround Azure Pipeline NuGet credential provider issue
- task: NuGetAuthenticate@0
- task: NuGetToolInstaller@1
- script: nuget restore $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.sln -NonInteractive
  displayName: nuget restore XQA.sln

- task: MSBuild@1
  displayName: msbuild XQA.sln
  inputs:
    solution: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.sln
    configuration: ${{ parameters.xqaConfiguration }}

#- template: run-installer.yaml
- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: TEST - Provision XA Master Mac
  inputs:
    github_token: $(GitHub.Token)
    provisioning_script: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/3036028/master/c08c77197eea74355ee834a3d93b86dd140dd163/xamarin.android-10.0.99.108.pkg
    provisioning_extra_args: -vv
  condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

- task: xamops.azdevex.provisionator-task.provisionator@2
  displayName: TEST - Provision XA Master Win
  inputs:
    github_token: $(GitHub.Token)
    provisioning_script: https://dl.internalx.com/vsts-devdiv/Xamarin.Android/3036028/master/c08c77197eea74355ee834a3d93b86dd140dd163/signed/Xamarin.Android.Sdk-10.0.99.108.vsix
    provisioning_extra_args: -vv
  condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

- powershell: |   
    if ([Environment]::OSVersion.Platform -eq "Unix") {
       mono $(System.DefaultWorkingDirectory)/packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll --where "cat == XAUnitTestSetup || cat == XATestPrep || cat == EnvironmentInfo"
    } else {
       $(System.DefaultWorkingDirectory)\packages\NUnit.ConsoleRunner.$(NUnitConsoleVersion)\tools\nunit3-console.exe $(System.DefaultWorkingDirectory)\QualityAssurance\Automation\XQA\XQA.Android\bin\${{ parameters.xqaConfiguration }}\XQA.Android.dll --where "cat == XAUnitTestSetup || cat == XATestPrep || cat == EnvironmentInfo"
    }
  displayName: Test Environment Setup
  condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))
  env:
    GH_AUTH_SECRET: $(Github.Token)

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Mono.Android-Tests Debug on Device
    nunitConsoleExtraArgs: --where "cat == RuntimeTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Hello Tests on Device
    nunitConsoleExtraArgs: --where "cat == Hello"
    condition: and(succeededOrFailed(), eq(variables['XA.Commercial.Build'], 'true'))

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Smoke Tests on Device
    nunitConsoleExtraArgs: --where "cat == RegressionDeviceTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Smoke Tests
    nunitConsoleExtraArgs: --where "cat == RegressionTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Installer Tests
    nunitConsoleExtraArgs: --where "cat == InstallationTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Fast Deploy Tests
    nunitConsoleExtraArgs: --where "cat == FastDevTests"
    condition: and(succeededOrFailed(), eq(variables['XA.Commercial.Build'], 'true'))

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Debug Tests
    nunitConsoleExtraArgs: --where "cat == DebuggerTests"
    condition: and(succeededOrFailed(), eq(variables['XA.Commercial.Build'], 'true'))

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Incremental Build Tests
    nunitConsoleExtraArgs: --where "cat == BuildPerformance"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: AOT Tests
    nunitConsoleExtraArgs: --where "cat == AotSupport"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Linker Tests
    nunitConsoleExtraArgs: --where "cat == LinkerTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Wearable Tests
    nunitConsoleExtraArgs: --where "cat == Wearable"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Proguard Tests
    nunitConsoleExtraArgs: --where "cat == Proguard"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Multidex Tests
    nunitConsoleExtraArgs: --where "cat == Multidex"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: ExplicitCrunch Tests
    nunitConsoleExtraArgs: --where "cat == ExplicitCrunch"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: TargetFrameworkVersion Tests
    nunitConsoleExtraArgs: --where "cat == TargetFrameworkTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Resource Cache Tests
    nunitConsoleExtraArgs: --where "cat == ResourceCacheTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Property Cache Tests
    nunitConsoleExtraArgs: --where "cat == PropertyCacheTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Code Analysis Tests
    nunitConsoleExtraArgs: --where "cat == CodeAnalysisTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Networking Options Tests
    nunitConsoleExtraArgs: --where "cat == HttpClientAndTlsProviderPackageTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: AndroidApiInfo Tests
    nunitConsoleExtraArgs: --where "cat == AndroidApiInfoTests"

- template: run-nunit-tests.yaml
  parameters:
    testAssembly: $(System.DefaultWorkingDirectory)/QualityAssurance/Automation/XQA/XQA.Android/bin/${{ parameters.xqaConfiguration }}/XQA.Android.dll
    testRunTitle: Test Environment Cleanup
    nunitConsoleExtraArgs: --where "cat == XATestCleanUp"
