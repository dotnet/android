# Runs smoke tests on macOS packages.

stages:
- stage: macos_tests
  displayName: macOS Tests
  dependsOn:
  - mac_build
  jobs:
  # Check - "Xamarin.Android (macOS Tests macOS > Tests > MSBuild)"
  - job: macos_tests_smoke_1
    displayName: macOS > Tests > MSBuild 1
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS BuildTest
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = BuildTest"

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - macOS 1

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml

  - job: macos_tests_smoke_2
    displayName: macOS > Tests > MSBuild 2
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS PackagingTest
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = PackagingTest"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS XASdkTests
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = XASdkTests & Name != XamarinLegacySdk"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS AndroidDependenciesTests
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = AndroidDependenciesTests"

    - task: ShellScript@2
      displayName: Test dotnet-local.sh
      inputs:
        scriptPath: dotnet-local.sh
        args: build samples/HelloWorld/HelloWorld/HelloWorld.DotNet.csproj

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - macOS 2

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml

  - job: macos_tests_android_tools
    displayName: macOS > Tests > Android Tools
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Tools.AndroidSdk-Tests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Tools.AndroidSdk-Tests.dll

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Microsoft.Android.Build.BaseTasks-Tests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Microsoft.Android.Build.BaseTasks-Tests.dll

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - Android Tools - macOS

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml