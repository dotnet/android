# Runs smoke tests on macOS packages.

stages:
- stage: macos_tests
  displayName: macOS Tests
  dependsOn:
  - mac_build
  jobs:
  # Check - "Xamarin.Android (macOS Tests macOS > Tests > MSBuild)"
  - job: macos_tests_smoke_1
    displayName: macOS > Tests > MSBuild 1
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS BuildTest
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = BuildTest"

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - macOS 1

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml

  - job: macos_tests_smoke_2
    displayName: macOS > Tests > MSBuild 2
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: /build-tools/automation/yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS PackagingTest
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = PackagingTest"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS XASdkTests
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = XASdkTests & Name != XamarinLegacySdk"

    - template: /build-tools/automation/yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS AndroidDependenciesTests
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "Name = AndroidDependenciesTests"

    - task: ShellScript@2
      displayName: Test dotnet-local.sh
      inputs:
        scriptPath: dotnet-local.sh
        args: build samples/HelloWorld/HelloWorld/HelloWorld.DotNet.csproj

    - template: /build-tools/automation/yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild - macOS 2

    - template: /build-tools/automation/yaml-templates/fail-on-issue.yaml

  - job: macos_tests_android_tools
    displayName: macOS > Tests > Android Tools
    pool:
      ${{ if or(eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'), eq(variables['Build.DefinitionName'], 'Xamarin.Android Nightly')) }}:
        name: $(SharedMacPool)
        demands:
        - macOS.Name -equals $(SharedMacName)
        - Agent.OSArchitecture -equals $(SharedMacArch)
      ${{ else }}:
        name: Azure Pipelines
        vmImage: $(HostedMacImage)
      os: macOS
    timeoutInMinutes: 60
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: true
      submodules: true

    - task: UseDotNet@2
      displayName: Use .NET Core 9.0.x
      inputs:
        version: 9.0.x

    - task: DotNetCoreCLI@2
      displayName: Build solution Xamarin.Android.Tools.sln
      inputs:
        projects: external/xamarin-android-tools/Xamarin.Android.Tools.sln
        arguments: -bl:$(Build.ArtifactStagingDirectory)/build.binlog
      workingDirectory: $(System.DefaultWorkingDirectory)

    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
        projects: external/xamarin-android-tools/bin/TestDebug/**/*-Tests.dll
      workingDirectory: $(System.DefaultWorkingDirectory)

    - task: PublishPipelineArtifact@1
      displayName: Upload Build Output
      inputs:
        path: external/xamarin-android-tools/bin/Debug
        artifactName: Android Tools Output - $(System.JobName)
      condition: always()

    - task: PublishPipelineArtifact@1
      displayName: Upload Artifacts
      inputs:
        path: $(Build.ArtifactStagingDirectory)
        artifactName: Android Tools Artifacts - $(System.JobName)
      condition: always()