# Xamarin.Android Nightly Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
- none

pr:
- none

schedules:
- cron: "0 3 * * Sun"
  displayName: Run daily at 3:00 UTC
  branches:
    include:
    - master
    - d16-9

# External sources, scripts, tests, and yaml template files.
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin
  - repository: monodroid
    type: github
    name: xamarin/monodroid
    endpoint: xamarin

# Global variables
variables:
  RunningOnCI: true
  XA.Build.Configuration: Release
  XA.Jdk8.Folder: jdk-1.8
  XA.Jdk11.Folder: jdk-11
  NuGetArtifactName: nupkgs
  InstallerArtifactName: installers
  TestAssembliesArtifactName: test-assemblies
  DotNetCoreVersion: 3.1.201
  DotNet5Version: 5.0.100
  MacMojaveBuildPool:
  HostedMacImage: macOS-10.15
  VSEngWinVS2019: Xamarin-Android-Win2019-1120
  XA.Build.MacOSSPool: VSEng-Xamarin-RedmondMac-Android-Untrusted

stages:
- stage: mac_build
  displayName: Mac
  dependsOn: []
  jobs:
  - job: mac_build_create_installers
    displayName: Build
    pool: $(MacMojaveBuildPool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - script: echo "##vso[task.setvariable variable=JI_JAVA_HOME]$HOME/Library/Android/$(XA.Jdk11.Folder)"
      displayName: set JI_JAVA_HOME

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNet5Version)
        remove_dotnet: true

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    - task: provisionator@2
      displayName: Install Xcode
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/provisioning/xcode.csx
        provisioning_extra_args: '-v -v -v -v'

    # Prepare and build everything
    - script: make prepare-update-mono V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make prepare-update-mono

    # Clone monodroid wth submodules, but disregard the unused xamarin-android submodule.
    - checkout: monodroid
      clean: true
      submodules: recursive
      path: s/xamarin-android/external/monodroid
      persistCredentials: true

    - script: rm -rf external/monodroid/external/xamarin-android
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: delete legacy xamarin-android submodule

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make prepare-external-git-dependencies

    - script: make jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make jenkins

    # Build and package test assemblies
    - script: make all-tests V=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make all-tests

    - script: >
        cp -r bin/$(XA.Build.Configuration)/bcl-tests bin/Test$(XA.Build.Configuration)/bcl-tests &&
        cp bin/Build$(XA.Build.Configuration)/ProfileAssemblies.projitems bin/Test$(XA.Build.Configuration)/bcl-tests/
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: copy bcl-tests assemblies

    - task: PublishPipelineArtifact@1
      displayName: upload test assemblies
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        targetPath: xamarin-android/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: pack all nupkgs
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-packs/Microsoft.Android.Sdk.proj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:CreateAllPacks /restore /p:NuGetLicense=$(System.DefaultWorkingDirectory)/xamarin-android/external/monodroid/tools/scripts/License.txt /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/create-all-packs.binlog

    # Create installers
    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make create-installers

    - script: >
        mkdir -p bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName) &&
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: copy unsigned installers

    - task: PublishPipelineArtifact@1
      displayName: upload installers
      inputs:
        artifactName: $(InstallerArtifactName)
        targetPath: xamarin-android/bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)

    - task: PublishPipelineArtifact@1
      displayName: upload nupkgs
      inputs:
        artifactName: $(NuGetArtifactName)
        targetPath: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - macOS

- stage: test
  displayName: Test
  dependsOn: mac_build
  jobs:
  - job: emulator_tests
    displayName: Emulator
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Android21:
          apiLevel: 21
        Android23:
          apiLevel: 23
        Android24:
          apiLevel: 24
        Android26:
          apiLevel: 26
        Android28:
          apiLevel: 28
    pool:
      vmImage: $(HostedMacImage)
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        configuration: $(XA.Build.Configuration)

    - script: >
        mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(XA.Build.Configuration)/xaprepare.exe
        --s=Required --auto-provision=yes --auto-provision-uses-sudo=yes --no-emoji --run-mode=CI
      displayName: install required brew tools and prepare java.interop

    - script:>
        mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(XA.Build.Configuration)/xaprepare.exe
        --s=EmulatorTestDependencies --no-emoji --run-mode=CI
      displayName: install emulator

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:InstallAvdImage;AcquireAndroidTarget /p:TestAvdApiLevel=$(apiLevel) /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/install-emulator-$(apiLevel).binlog
      
    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android_Tests
        project: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(XA.Build.Configuration).xml
        artifactName: Mono.Android_Tests-Signed.apk
        artifactFolder: Default

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:AcquireAndroidTarget,ReleaseAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - Emulator API $(apiLevel) - macOS

    - template: yaml-templates/fail-on-issue.yaml
