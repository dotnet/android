# Xamarin.Android Pipeline

trigger:
  - master
  - d16-*

# Global variables
variables:
  BundleArtifactName: bundle
  AutoProvisionArgs: /p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False
  AndroidTargetAbiArgs: >-
    /p:AndroidSupportedTargetJitAbis=armeabi-v7a:arm64-v8a:x86:x86_64
    /p:AndroidSupportedTargetAotAbis=armeabi-v7a:arm64:x86:x86_64:win-armeabi-v7a:win-arm64:win-x86:win-x86_64

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- stage: prepare
  displayName: Prepare
  variables:
    MSBuildAbiArgs: $(AndroidTargetAbiArgs) /p:AndroidSupportedHostJitAbis=Darwin:mxe-Win32:mxe-Win64
  jobs:
  - job: create_bundle
    displayName: Bundle
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    steps:

    - checkout: self
      clean: true
      submodules: recursive

      # Update Mono in a separate step since xaprepare uses it as well and it will crash when Mono it runs with is updated
      # The 'prepare' step creates the bundle
    - script: |
        make prepare-update-mono PREPARE_CI=1 V=1 CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS="$(AutoProvisionArgs) $(MSBuildAbiArgs)"
        make prepare PREPARE_CI=1 PREPARE_ARGS="--copy-bundle-to=bin/$(XA.Build.Configuration)" V=1 CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS="$(AutoProvisionArgs) $(MSBuildAbiArgs)"
      displayName: create bundle

    - task: CopyFiles@2
      displayName: copy bundle
      inputs:
        sourceFolder: bin/$(XA.Build.Configuration)
        contents: bundle-*.7z
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@0
      displayName: upload bundle
      inputs:
        artifactName: $(BundleArtifactName)
        targetPath: $(Build.ArtifactStagingDirectory)

    - task: MSBuild@1
      displayName: package build results
      inputs:
        solution: build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Build,ZipBuildStatus /p:BuildStatusZipOutputPath=$(Build.ArtifactStagingDirectory)/results
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: prepare-build-results
        targetPath: $(Build.ArtifactStagingDirectory)/results
      condition: always()

- stage: mac_build
  displayName: Mac
  dependsOn: prepare
  jobs:
  - job: mac_build
    displayName: Build
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    variables:
      JAVA_HOME: /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/
    steps:
    - checkout: self
      clean: true
      submodules: recursive

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare-commercial
      condition: eq(variables['XA.Commercial.Build'], 'true')
      env:
        GH_AUTH_SECRET: $(Github.Token)

    - task: provisionator@2
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))
      inputs:
        provisionator_uri: $(provisionator-uri)
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/external/monodroid/build-tools/provisionator/profile.csx
        provisioning_extra_args: -vv

    - script: make prepare-update-mono V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_ARGS="--bundle-path=$(System.DefaultWorkingDirectory)" MSBUILD_ARGS="$(AutoProvisionArgs) /p:BundleRootPath=$(System.DefaultWorkingDirectory)"
      displayName: make prepare-update-mono

      # No need to add `prepare` to the command line, the `jenkins` rule depends on `prepare-jenkins` which will run the bootstrapper
    - script: make jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_ARGS="--bundle-path=$(System.DefaultWorkingDirectory)" MSBUILD_ARGS="$(AutoProvisionArgs) /p:BundleRootPath=$(System.DefaultWorkingDirectory)"
      displayName: make jenkins

    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make create-installers

    - script: |
        mkdir -p bin/Build$(XA.Build.Configuration)/unsigned-installers
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/unsigned-installers
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/unsigned-installers
      displayName: copy unsigned installers

    - task: PublishPipelineArtifact@0
      displayName: upload unsigned installers
      inputs:
        artifactName: unsigned
        targetPath: bin/Build$(XA.Build.Configuration)/unsigned-installers

    - task: MSBuild@1
      displayName: package build results
      inputs:
        solution: build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:ZipBuildStatus /p:BuildStatusZipOutputPath=$(Build.ArtifactStagingDirectory)
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: mac-build-results
        targetPath: $(Build.ArtifactStagingDirectory)
      condition: always()

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
- stage: win_build_test
  displayName: Windows
  dependsOn: prepare
  jobs:
  - job: win_build_test
    displayName: Build and Test
    pool: $(XA.Build.Win.Pool)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    variables:
      JAVA_HOME: '%HOMEDRIVE%%HOMEPATH%\android-toolchain\jdk'
    steps:
    - checkout: self
      clean: true
      submodules: recursive

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: $(AutoProvisionArgs) $(AndroidTargetAbiArgs) /t:Prepare /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-prepare.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Build
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Build /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-build.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory) $(AndroidTargetAbiArgs)

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-create-vsix.binlog $(AndroidTargetAbiArgs)

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /p:Configuration=$(XA.Build.Configuration) /p:XAIntegratedTests=False /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-build-tests.binlog $(AndroidTargetAbiArgs)

    - task: MSBuild@1
      displayName: nunit Xamarin.Android.Build.Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:RunNUnitTests /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-nunit-tests.binlog
      timeoutInMinutes: 240

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\LogcatParse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-ji-tests.binlog
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: xamarin-android
        failTaskOnFailedTests: true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: package results
      inputs:
        solution: build-tools\Xamarin.Android.Tools.BootstrapTasks\Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:ZipBuildStatus;ZipTestResults /p:BuildStatusZipOutputPath=$(Build.ArtifactStagingDirectory) /p:TestResultZipOutputPath=$(Build.ArtifactStagingDirectory)
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: win-build-test-results
        targetPath: $(Build.ArtifactStagingDirectory)
      condition: always()
