# Xamarin.Android Pipeline

trigger:
  - master
  - d16-*

# Global variables
variables:
  BundleArtifactName: bundle
  AutoProvisionArgs: /p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False

stages:
- stage: prepare
  displayName: Prepare
  variables:
    MSBuildAbiArgs: >-
      /p:AndroidSupportedTargetJitAbis=armeabi-v7a:arm64-v8a:x86:x86_64
      /p:AndroidSupportedHostJitAbis=Darwin:mxe-Win32:mxe-Win64
      /p:AndroidSupportedTargetAotAbis=armeabi-v7a:arm64:x86:x86_64:win-armeabi-v7a:win-arm64:win-x86:win-x86_64
  jobs:
  - job: create_bundle
    displayName: Create Bundle
    pool: Hosted Mac Internal
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    steps:
    - script: make prepare-deps V=1 CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS="$(AutoProvisionArgs) $(MSBuildAbiArgs)"
      displayName: make prepare-deps

    - task: MSBuild@1
      displayName: create bundle
      inputs:
        solution: build-tools/create-bundle/create-bundle.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /bl:bin/Build$(XA.Build.Configuration)/msbuild-createbundle.binlog $(MSBuildAbiArgs)

    - task: CopyFiles@2
      displayName: copy bundle
      inputs:
        sourceFolder: bin/$(XA.Build.Configuration)
        contents: bundle-*.zip
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@0
      displayName: upload bundle
      inputs:
        artifactName: $(BundleArtifactName)
        targetPath: $(Build.ArtifactStagingDirectory)

    - task: MSBuild@1
      displayName: package build results
      inputs:
        solution: build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:ZipBuildStatus /p:ResultPackageOutputPath=$(Build.ArtifactStagingDirectory)/results
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: prepare-build-results
        targetPath: $(Build.ArtifactStagingDirectory)/results
      condition: always()

- stage: mac_build
  displayName: Mac
  dependsOn: prepare
  jobs:
  - job: mac_build
    displayName: Build
    pool: Hosted Mac Internal
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - script: make prepare-external-git-dependencies CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare-commercial
      condition: eq(variables['XA.Commercial.Build'], 'true')
      env:
        GH_AUTH_SECRET: $(Github.Token)

    - task: provisionator@2
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))
      inputs:
        provisionator_uri: $(provisionator-uri)
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/external/monodroid/build-tools/provisionator/profile.csx
        provisioning_extra_args: -vv

    - script: make prepare-deps V=1 CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS="$(AutoProvisionArgs)"
      displayName: make prepare-deps

    - script: make prepare jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) MSBUILD_ARGS="$(AutoProvisionArgs) /p:BundleRootPath=$(System.DefaultWorkingDirectory)"
      displayName: make prepare jenkins

    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make create-installers

    - script: |
        mkdir -p $(System.DefaultWorkingDirectory)/unsigned-installers
        cp bin/Build$(XA.Build.Configuration)/*.vsix $(System.DefaultWorkingDirectory)/unsigned-installers
        cp bin/Build$(XA.Build.Configuration)/*.pkg $(System.DefaultWorkingDirectory)/unsigned-installers
      displayName: copy build artifacts

    - task: PublishPipelineArtifact@0
      displayName: upload unsigned installers
      inputs:
        artifactName: unsigned
        targetPath: $(System.DefaultWorkingDirectory)/unsigned-installers

    - task: MSBuild@1
      displayName: package build results
      inputs:
        solution: build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:ZipBuildStatus /p:ResultPackageOutputPath=$(Build.ArtifactStagingDirectory)
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: mac-build-results
        targetPath: $(Build.ArtifactStagingDirectory)
      condition: always()

- stage: win_build_test
  displayName: Win
  dependsOn: prepare
  jobs:
  - job: build_test
    displayName: Build and Test
    pool: VSEng-MicroBuildVS2017
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Prepare /bl:$(Build.ArtifactStagingDirectory)\prepare.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Build
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Build /bl:$(Build.ArtifactStagingDirectory)\build.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(Build.ArtifactStagingDirectory)\create-vsix.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /p:Configuration=$(XA.Build.Configuration) /p:XAIntegratedTests=False /bl:$(Build.ArtifactStagingDirectory)\build-tests.binlog

    - task: MSBuild@1
      displayName: nunit Xamarin.Android.Build.Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:RunNUnitTests /bl:$(Build.ArtifactStagingDirectory)\run-nunit-tests.binlog
      timeoutInMinutes: 240

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\LogcatParse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(Build.ArtifactStagingDirectory)\run-ji-tests.binlog
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: xamarin-android
        failTaskOnFailedTests: true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: package test results
      inputs:
        solution: build-tools\Xamarin.Android.Tools.BootstrapTasks\Xamarin.Android.Tools.BootstrapTasks.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:ZipTestResults /p:ResultPackageOutputPath=$(Build.ArtifactStagingDirectory)
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: upload artifacts
      inputs:
        artifactName: win-build-results
        targetPath: $(Build.ArtifactStagingDirectory)
      condition: always()
