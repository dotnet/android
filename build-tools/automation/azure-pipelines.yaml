# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - master
  - d16-*

# External yaml template files
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/master
    endpoint: xamarin

# Global variables
variables:
  BundleArtifactName: bundle
  InstallerArtifactName: installers
  TestAssembliesArtifactName: test-assemblies
  NUnitConsoleVersion: 3.9.0
  HostedWinVS2019: Hosted Windows 2019 with VS2019

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- stage: prepare
  displayName: Prepare
  jobs:
  # Check - "Xamarin.Android (Prepare Run Code Analysis)"
  - job: run_code_analysis
    displayName: Run Code Analysis
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    steps:
    - checkout: self
      submodules: recursive
    - template: security\xa-static-analysis\v1.yml@yaml
      parameters:
        credScanSuppressionsFile: $(System.DefaultWorkingDirectory)\build-tools\automation\CredScanSuppressions.json

  # Check - "Xamarin.Android (Prepare bundle)"
  - job: create_bundle
    displayName: Bundle
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - task: UseDotNet@2
      displayName: install .NET Core 2.1.701
      inputs:
        version: 2.1.701

      # Update Mono in a separate step since xaprepare uses it as well and it will crash when Mono it runs with is updated
      # The 'prepare' step creates the bundle
    - script: |
        make prepare-update-mono PREPARE_CI=1 V=1 PREPARE_AUTOPROVISION=1 CONFIGURATION=$(XA.Build.Configuration)
        make prepare PREPARE_CI=1 PREPARE_AUTOPROVISION=1 PREPARE_ARGS="--copy-bundle-to=bin/$(XA.Build.Configuration)" V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: create bundle

    - task: CopyFiles@2
      displayName: copy bundle
      inputs:
        sourceFolder: bin/$(XA.Build.Configuration)
        contents: bundle-*.7z
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@0
      displayName: upload bundle
      inputs:
        artifactName: $(BundleArtifactName)
        targetPath: $(Build.ArtifactStagingDirectory)

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-prepare-results

- stage: mac_build
  displayName: Mac
  dependsOn: prepare
  jobs:
  # Check - "Xamarin.Android (Mac Build)"
  - job: mac_build_create_installers
    displayName: Build
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      JAVA_HOME: /Users/vsts/Library/Android/jdk/
    steps:
    - checkout: self
      submodules: recursive

    - task: UseDotNet@2
      displayName: install .NET Core 2.1.701
      inputs:
        version: 2.1.701

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - script: make prepare-update-mono V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1 PREPARE_ARGS="--bundle-path=$(System.DefaultWorkingDirectory)"
      displayName: make prepare-update-mono

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare-external-git-dependencies
      condition: eq(variables['XA.Commercial.Build'], 'true')
      env:
        GH_AUTH_SECRET: $(Github.Token)

    - script: make jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1 PREPARE_ARGS="--bundle-path=$(System.DefaultWorkingDirectory)"
      displayName: make jenkins

    - script: |
        cp -r bin/$(XA.Build.Configuration)/bcl-tests bin/Test$(XA.Build.Configuration)/bcl-tests
        cp bin/Build$(XA.Build.Configuration)/ProfileAssemblies.projitems bin/Test$(XA.Build.Configuration)/bcl-tests/
      displayName: copy bcl-tests assemblies

    - task: PublishPipelineArtifact@0
      displayName: upload test assemblies
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        targetPath: bin/Test$(XA.Build.Configuration)

    - template: install-certificates.yml@yaml
      parameters:
        DeveloperIdApplication: $(developer-id-application)
        DeveloperIdInstaller: $(developer-id-installer)
        IphoneDeveloper: $(iphone-developer)
        MacDeveloper: $(mac-developer)

    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make create-installers

    - script: |
        mkdir -p bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
      displayName: copy unsigned installers

    - script: |
        VERSION=`LANG=C; export LANG && git log --no-color --first-parent -n1 --pretty=format:%ct`
        echo "d1ec039f-f3db-468b-a508-896d7c382999 $VERSION" > bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)/updateinfo
      displayName: create updateinfo file

    - powershell: |
        $pkg = Get-ChildItem -Path "bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)/*" -Include *.pkg -File
        if (![System.IO.File]::Exists($pkg)) {
            throw [System.IO.FileNotFoundException] "Pkg File not found in bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)"
        }
        Write-Host "##vso[task.setvariable variable=XA.Unsigned.Pkg]$pkg"
      displayName: set variable to pkg path

    - template: productsign-pkg.yml@yaml
      parameters:
        UnsignedPkgPath: $(XA.Unsigned.Pkg)

    - task: PublishPipelineArtifact@0
      displayName: upload installers
      inputs:
        artifactName: $(InstallerArtifactName)
        targetPath: bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)

    - template: upload-to-storage.yml@yaml
      parameters:
        BuildPackages: bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
        AzureContainerName: $(Azure.Container.Name)
        AzureUploadLocation: $(Build.DefinitionName)/$(Build.BuildId)/$(Build.SourceBranchName)/$(Build.SourceVersion)
        condition: and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-build-results

  # Check - "Xamarin.Android (Mac Queue Vsix Signing)"
  # Actually runs on a Windows host, but the work is done in a Jenkins job. Does not run on PR builds.
  - job: queue_vsix_signing
    displayName: Queue Vsix Signing
    dependsOn: mac_build_create_installers
    pool: $(XA.Build.Win.Pool)
    condition: and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))
    timeoutInMinutes: 45
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    steps:
    - task: JenkinsQueueJob@2
      displayName: xamarin vsix codesign - run jenkins job
      inputs:
        serverEndpoint: $(Signing.Endpoint)
        jobName: $(Signing.Job)
        isParameterizedJob: true
        jobParameters: |
          REPO=$(Build.Repository.Name)
          COMMIT=$(Build.SourceVersion)
          SIGN_TYPE=Real
          GITHUB_CONTEXT=$(GitHub.Artifacts.Context)
          ENABLE_JAR_SIGNING=true

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
# Check - "Xamarin.Android (Windows Build and Test)"
- stage: win_build_test
  displayName: Windows
  dependsOn: prepare
  jobs:
  - job: win_build_test
    displayName: Build and Test
    pool: $(XA.Build.Win.Pool)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      AndroidTargetAbiArgs: >-
        /p:AndroidSupportedTargetJitAbis=armeabi-v7a:arm64-v8a:x86:x86_64
        /p:AndroidSupportedTargetAotAbis=armeabi-v7a:arm64:x86:x86_64:win-armeabi-v7a:win-arm64:win-x86:win-x86_64
      JAVA_HOME: '%HOMEDRIVE%%HOMEPATH%\android-toolchain\jdk'
    steps:
    - checkout: self
      submodules: recursive

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(BundleArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Prepare /p:AutoProvision=true $(AndroidTargetAbiArgs) /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-prepare.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Build
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Build $(AndroidTargetAbiArgs) /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-build.binlog /p:BundleRootPath=$(System.DefaultWorkingDirectory)

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-create-vsix.binlog $(AndroidTargetAbiArgs)

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /p:Configuration=$(XA.Build.Configuration) /p:XAIntegratedTests=False /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-build-tests.binlog $(AndroidTargetAbiArgs)

    - task: MSBuild@1
      displayName: nunit Xamarin.Android.Build.Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:RunNUnitTests /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-nunit-tests.binlog
      timeoutInMinutes: 240

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\LogcatParse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-ji-tests.binlog
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: xamarin-android
      condition: succeededOrFailed()

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: win-build-test-results

- stage: test
  displayName: Test
  dependsOn: mac_build
  jobs:
  # Check - "Xamarin.Android (Test APK Instrumentation)"
  - job: mac_apk_tests
    displayName: APK Instrumentation
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      ApkTestConfiguration: Release
    steps:
    - template: yaml-templates/mac/setup-test-environment.yaml
      parameters:
        configuration: $(ApkTestConfiguration)

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Aot
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:EnableLlvm=True

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Profiled
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Profiled.xml
        extraBuildArgs: /p:AndroidEnableProfiledAot=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Bundle
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Bundle.xml
        extraBuildArgs: /p:BundleAssemblies=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsAppBundle
        project: tests/Runtime-AppBundle/Mono.Android-TestsAppBundle.csproj
        testResultsFiles: TestResult-Mono.Android_TestsAppBundle-$(ApkTestConfiguration).xml
        packageType: Aab

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsMultiDex
        project: tests/Runtime-MultiDex/Mono.Android-TestsMultiDex.csproj
        testResultsFiles: TestResult-Mono.Android_TestsMultiDex-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.JcwGen_Tests
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Aot
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Profiled
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Profiled.xml
        extraBuildArgs: /p:AndroidEnableProfiledAot=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.EmbeddedDSO_Test
        project: tests/EmbeddedDSOs/EmbeddedDSO/EmbeddedDSO.csproj
        testResultsFiles: TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-$(ApkTestConfiguration).xml

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf.binlog
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Aot
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Aot.binlog
          /p:AotAssemblies=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Profiled
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Profiled.binlog
          /p:AndroidEnableProfiledAot=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Bundle
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Bundle.binlog
          /p:BundleAssemblies=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        artifactName: mac-apk-test-results

  # Check - "Xamarin.Android (Test BCL With Emulator)"
  - job: mac_bcl_tests
    displayName: BCL With Emulator
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 180
    steps:
    - template: yaml-templates/mac/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: build remap-assembly-ref.csproj
      inputs:
        solution: build-tools/remap-assembly-ref/remap-assembly-ref.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/remap-assembly-ref.binlog

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Xamarin.Android.Bcl-Tests
        project: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.nunit-$(XA.Build.Configuration).xml

    - task: PublishTestResults@2
      displayName: publish Xamarin.Android.Bcl-Tests-XUnit results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.xunit-$(XA.Build.Configuration).xml
        testRunTitle: Xamarin.Android.Bcl-Tests-NUnit
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-bcl-test-results

  # Check - "Xamarin.Android (Test MSBuild Mac)"
  - job: mac_msbuild_tests
    displayName: MSBuild Mac
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/mac/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - script: >
        mono packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe
        $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.dll
        --result TestResult-MSBuildTests-$(XA.Build.Configuration).xml
      displayName: run Xamarin.Android.Build.Tests

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-MSBuildTests-$(XA.Build.Configuration).xml
        testRunTitle: MSBuildTestsMac
      condition: succeededOrFailed()

    - script: >
        mono packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe
        $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.Commercial.dll
        --result TestResult-MSBuildTestsCommercial-$(XA.Build.Configuration).xml
      displayName: run Xamarin.Android.Build.Tests.Commercial
      condition: and(succeededOrFailed(), eq(variables['XA.Commercial.Build'], 'true'))

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-MSBuildTestsCommercial-$(XA.Build.Configuration).xml
        testRunTitle: MSBuildTestsMac
      condition: and(succeededOrFailed(), eq(variables['XA.Commercial.Build'], 'true'))

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-msbuild-test-results

 # Check - "Xamarin.Android (Test MSBuild With Emulator Mac)"
  - job: mac_msbuilddevice_tests
    displayName: MSBuild With Emulator Mac
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/mac/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: start emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/start-emulator.binlog

    - script: >
        mono packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe
        $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.dll
        --where "cat == UsesDevice"
        --result TestResult-MSBuildDeviceTests-$(XA.Build.Configuration).xml
      displayName: run on-device Xamarin.Android.Build.Tests

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-MSBuildDeviceTests-$(XA.Build.Configuration).xml
        testRunTitle: MSBuildDeviceTestsMac
      condition: always()

    - script: >
        mono packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe
        $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/MSBuildDeviceIntegration.dll
        --where "test != Xamarin.Android.Build.Tests.DeploymentTest.CheckTimeZoneInfoIsCorrect"
        --result TestResult-MSBuildDeviceIntegration-$(XA.Build.Configuration).xml
      displayName: run on-device MSBuildDeviceIntegration tests
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-MSBuildDeviceIntegration-$(XA.Build.Configuration).xml
        testRunTitle: MSBuildDeviceIntegration
      condition: always()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-msbuild-device-test-results

# Check - "Xamarin.Android (Test TimeZoneInfo With Emulator Mac)"
  - job: mac_timezonedevice_tests
    displayName: TimeZoneInfo With Emulator Mac
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/mac/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: start emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/start-emulator.binlog

    - script: >
        mono packages/NUnit.ConsoleRunner.$(NUnitConsoleVersion)/tools/nunit3-console.exe
        $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/MSBuildDeviceIntegration.dll
        --where "test == Xamarin.Android.Build.Tests.DeploymentTest.CheckTimeZoneInfoIsCorrect"
        --result TestResult-TimeZoneInfoTests-$(XA.Build.Configuration).xml
      displayName: run TimeZoneInfo tests

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-TimeZoneInfoTests-$(XA.Build.Configuration).xml
        testRunTitle: TimeZoneInfoTestsMac
      condition: always()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: mac-timezoneinfo-test-results

  # Check - "Xamarin.Android (Test Designer Mac)"
  - job: designer_integration_mac
    displayName: Designer Mac
    pool: $(XA.Build.Mac.Pool)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
    steps:
    - script: |
        git clone -q https://$(GitHub.Token)@github.com/xamarin/designer.git
        cd designer
        git submodule update -q --init --recursive
      displayName: Clone and update designer

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/designer/bot-provisioning/dependencies.csx
        provisioning_extra_args: -remove Xamarin.Android -vv

    - template: yaml-templates/run-installer.yaml

    - template: designer/android-designer-build-mac.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/designer

    - template: designer/android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/designer

  # Check - "Xamarin.Android (Test Designer Windows)"
  - job: designer_integration_win
    displayName: Designer Windows
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
      RegressionTestSuiteOutputDir: C:\Git\ADesRegTestSuite
      VisualStudioInstallationPath: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    steps:
    - script: |
        git clone -q https://$(GitHub.Token)@github.com/xamarin/designer.git
        cd designer
        git submodule update -q --init --recursive
      displayName: Clone and update designer

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)\designer\bot-provisioning\dependencies.csx
        provisioning_extra_args: -vv

    - template: yaml-templates\run-installer.yaml
      parameters:
        itemPattern: "*.vsix"

    - template: designer\android-designer-build-win.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\designer

    - template: designer\android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\designer
