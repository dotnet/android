# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - main
  - d16-*
  - d17-*
  - release/*

# External sources, scripts, tests, and yaml template files.
resources:
  repositories:
  - repository: yaml-templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin
  - repository: sdk-insertions
    type: github
    name: xamarin/sdk-insertions
    ref: refs/heads/main
    endpoint: xamarin
  - repository: monodroid
    type: github
    name: xamarin/monodroid
    endpoint: xamarin
  - repository: release_scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized
    endpoint: xamarin

parameters:
- name: provisionatorChannel
  type: string
  default: latest           # Support for launching a build against a Provisionator PR (e.g., pr/[github-account-name]/[pr-number]) as a means to test in-progress Provisionator changes

# Global variables
variables:
- template: yaml-templates/variables.yaml
- template: templates/common/vs-release-vars.yml@sdk-insertions
  # Run all tests if:
  # - User who queued the job requested it (They set XA.RunAllTests to true)
  # - This is the master integration branch (Pipeline defaults XA.RunAllTests to true)
  # - This is a non-fork branch with name containing "mono-" (for Mono bumps)
- name: IsMonoBranch
  value: $[and(ne(variables['System.PullRequest.IsFork'], 'True'), or(contains(variables['Build.SourceBranchName'], 'mono-'), contains(variables['System.PullRequest.SourceBranch'], 'mono-')))]
- name: RunAllTests
  value: $[or(eq(variables['XA.RunAllTests'], true), eq(variables['IsMonoBranch'], true))]
- name: IsRelOrTargetingRel
  value: $[or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['System.PullRequest.TargetBranch'], 'release/'))]
- name: DotNetNUnitCategories
  value: '& TestCategory != DotNetIgnore & TestCategory != HybridAOT & TestCategory != MkBundle & TestCategory != MonoSymbolicate & TestCategory != PackagesConfig & TestCategory != StaticProject & TestCategory != SystemApplication'
- name: ExcludedNUnitCategories
  value: '& cat != DotNetIgnore & cat != HybridAOT & cat != MkBundle & cat != MonoSymbolicate & cat != PackagesConfig & cat != StaticProject & cat != SystemApplication'
- name: DefaultTestSdkPlatforms  # Comma-separated SDK Platform(s) to install on test agents (no spaces)
  value: 33,UpsideDownCake
- ${{ if eq(variables['Build.DefinitionName'], 'Xamarin.Android-Private') }}:
  - group: AzureDevOps-Artifact-Feeds-Pats
  - group: DotNet-MSRC-Storage
  - name: DotNetFeedCredential
    value: dotnet8-internal-dnceng-internal-feed
- ${{ if ne(variables['Build.DefinitionName'], 'Xamarin.Android-Private') }}:
  - name: DotNetFeedCredential
    value: dnceng-dotnet8
- ${{ if and(or(eq(variables['Build.DefinitionName'], 'Xamarin.Android'), eq(variables['Build.DefinitionName'], 'Xamarin.Android-Private')), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - name: MicroBuildSignType
    value: Real
  - name: MacBuildPoolName
    value: Azure Pipelines
  - name: MacBuildPoolImage
    value: internal-macos12
- ${{ if or(and(ne(variables['Build.DefinitionName'],'Xamarin.Android'), ne(variables['Build.DefinitionName'], 'Xamarin.Android-Private')), eq(variables['Build.Reason'], 'PullRequest')) }}:
  - name: MicroBuildSignType
    value: Test
  - name: MacBuildPoolName
    value: VSEng-Xamarin-RedmondMac-Android-Untrusted
  - name: MacBuildPoolImage
    value: ''
  - name: DisablePipelineConfigDetector
    value: true

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- template: yaml-templates/build-macos.yaml
  parameters:
    provisionatorChannel: ${{ parameters.provisionatorChannel }}

- template: yaml-templates/build-windows.yaml

# Check - "Xamarin.Android (Linux > Build)"
- template: yaml-templates/build-linux.yaml

- stage: smoke_tests
  displayName: Package Tests
  dependsOn: mac_build
  jobs:
 # Check - "Xamarin.Android (macOS > Tests > APKs .NET)"
  - job: mac_apk_tests_net
    displayName: macOS > Tests > APKs .NET
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        provisionClassic: false
        provisionatorChannel: ${{ parameters.provisionatorChannel }}
        installLegacyDotNet: false
        restoreNUnitConsole: false
        updateMono: false

    - template: yaml-templates/run-xaprepare.yaml
      parameters:
        displayName: install emulator
        arguments: --s=EmulatorTestDependencies --android-sdk-platforms="$(DefaultTestSdkPlatforms)"
        
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    # Set up dependencies to run tests in both debug and release configurations
    - task: DotNetCoreCLI@2
      displayName: build Xamarin.Android.Tools.BootstrapTasks.csproj
      inputs:
        projects: $(System.DefaultWorkingDirectory)/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        arguments: -c Debug -bl:$(System.DefaultWorkingDirectory)/bin/TestDebug/BootstrapTasks.binlog

    - template: yaml-templates/run-dotnet-preview.yaml
      parameters:
        project: Xamarin.Android.sln
        arguments: >-
          -t:PrepareJavaInterop -c Debug --no-restore
          -p:DotNetPreviewTool=$(System.DefaultWorkingDirectory)/bin/$(XA.Build.Configuration)/dotnet/dotnet
        displayName: prepare java.interop Debug
        continueOnError: false

    - template: yaml-templates/run-dotnet-preview.yaml
      parameters:
        project: Xamarin.Android.sln
        arguments: -t:PrepareJavaInterop -c $(XA.Build.Configuration) --no-restore
        displayName: prepare java.interop $(XA.Build.Configuration)
        continueOnError: false
      
    - template: yaml-templates/start-stop-emulator.yaml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android.NET_Tests-$(XA.Build.Configuration)
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(XA.Build.Configuration).xml
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.aab
        artifactFolder: $(DotNetTargetFramework)-$(XA.Build.Configuration)

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        buildConfiguration: $(XA.Build.Configuration)
        configuration: Debug
        testName: Mono.Android.NET_Tests-Debug
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-Debug.xml
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.apk
        artifactFolder: $(DotNetTargetFramework)-Debug

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android.NET_Tests-NoAab
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(XA.Build.Configuration)NoAab.xml
        extraBuildArgs: -p:TestsFlavor=NoAab -p:AndroidPackageFormat=apk
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.apk
        artifactFolder: $(DotNetTargetFramework)-NoAab

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android.NET_Tests-Interpreter
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(XA.Build.Configuration)Interpreter.xml
        extraBuildArgs: -p:TestsFlavor=Interpreter -p:UseInterpreter=True
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.aab
        artifactFolder: $(DotNetTargetFramework)-Interpreter

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android.NET_Tests-NoAot
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(XA.Build.Configuration)NoAot.xml
        extraBuildArgs: -p:TestsFlavor=NoAot -p:RunAOTCompilation=false
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.aab
        artifactFolder: $(DotNetTargetFramework)-NoAot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Mono.Android.NET_Tests-AotLlvm
        project: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(XA.Build.Configuration)AotLlvm.xml
        extraBuildArgs: -p:TestsFlavor=AotLlvm -p:EnableLLVM=true -p:AndroidEnableProfiledAot=false
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Mono.Android.NET_Tests-Signed.aab
        artifactFolder: $(DotNetTargetFramework)-AotLlvm
        
    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Xamarin.Android.JcwGen_Tests
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(XA.Build.Configuration).xml
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Xamarin.Android.JcwGen_Tests-Signed.apk
        artifactFolder: $(DotNetTargetFramework)-Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Xamarin.Android.JcwGen_Tests_FastDev
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(XA.Build.Configuration).xml
        artifactSource: bin/Test$(XA.Build.Configuration)/$(DotNetTargetFramework)-android/Xamarin.Android.JcwGen_Tests-Signed.apk
        artifactFolder: $(DotNetTargetFramework)-FastDev_Assemblies_Dexes
        extraBuildArgs: /p:AndroidFastDeploymentType=Assemblies:Dexes
        
    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Tools.Aidl-Tests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Tools.Aidl-Tests.dll
        testResultsFile: TestResult-Aidl-Tests-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/start-stop-emulator.yaml
      parameters:
        command: stop

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - APKs .NET $(XA.Build.Configuration) - macOS

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - APKs .NET Debug - macOS
        configuration: Debug

    - task: MSBuild@1
      displayName: build plots-to-appinsights
      inputs:
        solution: build-tools/plots-to-appinsights/ProcessPlotCSVFile.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /restore
          /t:Build
          /v:normal
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/plots-to-appinsights.binlog
      continueOnError: true
      condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))

    - template: yaml-templates/plots-to-appinsights.yaml
      parameters:
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
        configuration: $(XA.Build.Configuration)
        plotGroup: Test times
        plotTitle: Runtime merged $(DotNetTargetFramework)
        plotPathAndFilename: $(System.DefaultWorkingDirectory)/TestResult-Mono.Android.NET_Tests-times.csv

    - template: yaml-templates/fail-on-issue.yaml

- stage: linux_tests
  displayName: Linux Tests
  dependsOn:
  - mac_build
  - linux_build
  jobs:
  # Check - "Xamarin.Android (Linux > Tests > MSBuild)"
  - job: linux_tests_smoke
    displayName: Linux > Tests > MSBuild
    pool: android-devdiv-ubuntu-vmss
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-ubuntu.yaml

    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        provisionatorChannel: ${{ parameters.provisionatorChannel }}

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Linux .NET 6 Smoke Tests
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/$(DotNetStableTargetFramework)/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter "TestCategory = SmokeTests $(DotNetNUnitCategories)"
        testResultsFile: TestResult-NETSmokeMSBuildTests-Linux-$(XA.Build.Configuration).xml

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        artifactName: Test Results - MSBuild Smoke - Linux

    - template: yaml-templates/fail-on-issue.yaml
      
- template: yaml-templates/stage-msbuild-tests.yaml
      
- template: yaml-templates/stage-msbuild-emulator-tests.yaml

- stage: dotnet_prepare_release
  displayName: Prepare .NET Release
  dependsOn:
  - mac_build
  - linux_build
  condition: and(eq(dependencies.mac_build.result, 'Succeeded'), eq(dependencies.linux_build.result, 'Succeeded'), eq(variables['MicroBuildSignType'], 'Real'))
  jobs:
  # Check - "Xamarin.Android (Prepare .NET Release Sign Archives)"
  - template: sign-artifacts/jobs/v2.yml@yaml-templates
    parameters:
      name: sign_net_mac_win
      poolName: $(VSEngMicroBuildPool)
      artifactName: $(NuGetArtifactName)
      signType: $(MicroBuildSignType)
      signedArtifactName: nuget-signed
      usePipelineArtifactTasks: true

  # Check - "Xamarin.Android (Prepare .NET Release Sign Linux Archive)"
  - template: sign-artifacts/jobs/v2.yml@yaml-templates
    parameters:
      name: sign_net_linux
      displayName: Sign Linux Archive
      poolName: $(VSEngMicroBuildPool)
      artifactName: $(LinuxNuGetArtifactName)
      signType: $(MicroBuildSignType)
      signedArtifactName: nuget-linux-signed
      usePipelineArtifactTasks: true

  # Check - "Xamarin.Android (Prepare .NET Release Convert NuGet to MSI)"
  - template: nuget-msi-convert/job/v3.yml@yaml-templates
    parameters:
      yamlResourceName: yaml-templates
      dependsOn: sign_net_mac_win
      artifactName: nuget-signed
      artifactPatterns: |
        !*Darwin*
      propsArtifactName: $(NuGetArtifactName)
      signType: $(MicroBuildSignType)
      postConvertSteps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: $(NuGetArtifactName)
          downloadPath: $(Build.StagingDirectory)\sign-verify
          patterns: |
            **/SignVerifyIgnore.txt

      - task: MicroBuildCodesignVerify@3
        displayName: verify signed msi content
        inputs:
          TargetFolders: $(Build.StagingDirectory)\bin\manifests
          ExcludeSNVerify: true
          ApprovalListPathForCerts: $(Build.StagingDirectory)\sign-verify\SignVerifyIgnore.txt

  # Check - "Xamarin.Android (Prepare .NET Release Push Internal)"
  - job: push_signed_nugets
    displayName: Push Internal
    dependsOn:
    - nuget_convert
    - sign_net_linux
    condition: and(eq(dependencies.nuget_convert.result, 'Succeeded'), eq(dependencies.sign_net_linux.result, 'Succeeded'))
    timeoutInMinutes: 60
    pool: $(VSEngMicroBuildPool)
    workspace:
      clean: all
    variables:
    - ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
      - group: Publish-Build-Assets
    steps:
    - checkout: self

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: nuget-signed
        downloadPath: $(Build.StagingDirectory)\nuget-signed

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: nuget-linux-signed
        downloadPath: $(Build.StagingDirectory)\nuget-signed

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: vs-msi-nugets
        downloadPath: $(Build.StagingDirectory)\nuget-signed

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(WindowsToolchainPdbArtifactName)
        downloadPath: $(Build.StagingDirectory)\nuget-signed

    - task: NuGetCommand@2
      displayName: push nupkgs
      inputs:
        command: push
        packagesToPush: $(Build.StagingDirectory)\nuget-signed\*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: $(DotNetFeedCredential)
      condition: and(succeeded(), eq(variables['PushXAPackages'], 'true'))

    - template: templates\common\upload-vs-insertion-artifacts.yml@sdk-insertions
      parameters:
        githubToken: $(GitHub.Token)
        githubContext: $(NupkgCommitStatusName)
        blobName: $(NupkgCommitStatusName)
        packagePrefix: xamarin-android
        artifactsPath: $(Build.StagingDirectory)\nuget-signed
        yamlResourceName: yaml-templates

    - template: templates\common\upload-vs-insertion-artifacts.yml@sdk-insertions
      parameters:
        githubToken: $(GitHub.Token)
        githubContext: $(VSDropCommitStatusName)
        blobName: $(VSDropCommitStatusName)
        packagePrefix: xamarin-android
        artifactsPath: $(Build.StagingDirectory)\$(VSDropCommitStatusName)
        yamlResourceName: yaml-templates
        downloadSteps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: vsdrop-signed
            downloadPath: $(Build.StagingDirectory)\$(VSDropCommitStatusName)

    - template: templates\common\upload-vs-insertion-artifacts.yml@sdk-insertions
      parameters:
        githubToken: $(GitHub.Token)
        githubContext: $(MultiTargetVSDropCommitStatusName)
        blobName: $(MultiTargetVSDropCommitStatusName)
        packagePrefix: xamarin-android
        artifactsPath: $(Build.StagingDirectory)\$(MultiTargetVSDropCommitStatusName)
        yamlResourceName: yaml-templates
        downloadSteps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: vsdrop-multitarget-signed
            downloadPath: $(Build.StagingDirectory)\$(MultiTargetVSDropCommitStatusName)

    - powershell: >-
        & dotnet build -v:n -c $(XA.Build.Configuration)
        -t:PushManifestToBuildAssetRegistry
        -p:BuildAssetRegistryToken=$(MaestroAccessToken)
        -p:OutputPath=$(Build.StagingDirectory)\nuget-signed\
        $(System.DefaultWorkingDirectory)\build-tools\create-packs\Microsoft.Android.Sdk.proj
        -bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\push-bar-manifest.binlog
      displayName: generate and publish BAR manifest
      condition: and(succeeded(), eq(variables['PushXAPackageInfoToMaestro'], 'true'))

    - powershell: |
        $versionEndpoint = 'https://maestro-prod.westus2.cloudapp.azure.com/api/assets/darc-version?api-version=2019-01-16'
        $darcVersion = $(Invoke-WebRequest -Uri $versionEndpoint -UseBasicParsing).Content
        $arcadeServicesSource = 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
        & dotnet tool update microsoft.dotnet.darc --version "$darcVersion" --add-source "$arcadeServicesSource" --tool-path $(Agent.ToolsDirectory)\darc -v n
        & $(Agent.ToolsDirectory)\darc\darc add-build-to-channel --default-channels --id $(BARBuildId) --publishing-infra-version 3 --skip-assets-publishing --password $(MaestroAccessToken) --azdev-pat $(publishing-dnceng-devdiv-code-r-build-re)
      displayName: add build to default darc channel
      condition: and(succeeded(), eq(variables['PushXAPackageInfoToMaestro'], 'true'))

    - template: yaml-templates\upload-results.yaml
      parameters:
        xaSourcePath: $(System.DefaultWorkingDirectory)
        artifactName: Prepare Release - Push Internal
        includeBuildResults: true

# .NET 6 VS Insertion Stage
# Check - "Xamarin.Android (VS Insertion - Wait For Approval)"
# Check - "Xamarin.Android (VS Insertion - Create VS Drop and Open PR)"
- template: vs-insertion/stage/v1.yml@yaml-templates
  parameters:
    dependsOn: dotnet_prepare_release
    symbolArtifactName: nuget-signed
    symbolArtifactPatterns: |
      !*Darwin*
    pushToShippingFeed: true
    nupkgArtifactName: nuget-signed
    msiNupkgArtifactName: vs-msi-nugets
    condition: eq(variables['MicroBuildSignType'], 'Real')

- stage: push_nugets_to_nuget_org
  displayName: Push to NuGet.org
  dependsOn: dotnet_prepare_release
  condition: and(eq(variables['MicroBuildSignType'], 'Real'), eq(dependencies.dotnet_prepare_release.result, 'Succeeded'))
  jobs:
  - job: wait_for_nuget_org_approval
    displayName: Wait For NuGet.org Approval
    timeoutInMinutes: 60 # The job timeout should be longer than the task timeout.
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 30 # The stage can be re-ran if needed.
      inputs:
        instructions: 'Press "Resume" to push .NET 6 packages to NuGet.org.'
        onTimeout: reject
      continueOnError: true

  - job: push_to_nuget_org
    displayName: Push to NuGet.org
    pool: $(VSEngMicroBuildPool)
    dependsOn: wait_for_nuget_org_approval
    condition: eq(dependencies.wait_for_nuget_org_approval.result, 'Succeeded')
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: nuget-signed
        downloadPath: $(System.DefaultWorkingDirectory)\nuget-signed

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: nuget-linux-signed
        downloadPath: $(System.DefaultWorkingDirectory)\nuget-signed

    - task: NuGetCommand@2
      displayName: push nupkgs
      inputs:
        command: push
        packagesToPush: $(System.DefaultWorkingDirectory)\nuget-signed\*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: Xamarin nuget.org - xamarinc

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: vs-msi-nugets
        downloadPath: $(System.DefaultWorkingDirectory)\vs-msi-nugets

    - task: NuGetCommand@2
      displayName: push msi nupkgs
      inputs:
        command: push
        packagesToPush: $(System.DefaultWorkingDirectory)\vs-msi-nugets\*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: Xamarin nuget.org - xamarinc

- stage: post_build
  displayName: Post Build
  dependsOn:
  - dotnet_prepare_release
  condition: and(eq(variables['MicroBuildSignType'], 'Real'), eq(dependencies.dotnet_prepare_release.result, 'Succeeded'))
  jobs:
  - template: compliance/sbom/job.v1.yml@yaml-templates
    parameters:
      artifactNames: [ nuget-signed, nuget-linux-signed, vs-msi-nugets, vsdrop-signed ]
      packageName: xamarin-android
      packageFilter: '*.nupkg;*.msi'
      GitHub.Token: $(GitHub.Token)

# Check - "Xamarin.Android (Compliance)"
- template: security/full/v0.yml@yaml-templates
  parameters:
    stageDependsOn: []
    credScanSuppressionFile: $(Build.SourcesDirectory)\build-tools\automation\guardian\CredScanSuppressions.json
    sourceGdnSuppressionFile: $(Build.SourcesDirectory)\build-tools\automation\guardian\source.gdnsuppress
    tsaConfigFile: $(Build.SourcesDirectory)\build-tools\automation\guardian\tsaoptions-v2.json
    policheckLocScanEnabled: true
    policheckExclusionFilesFolder: $(Build.SourcesDirectory)\build-tools\automation\guardian
    policheckGdnSuppressionFilesFolder: $(Build.SourcesDirectory)\build-tools\automation\guardian
    policheckChsScanFolder: $(Build.SourcesDirectory)\Localize\loc\zh-Hans
    policheckChtScanFolder: $(Build.SourcesDirectory)\Localize\loc\zh-Hant
    policheckCsyScanFolder: $(Build.SourcesDirectory)\Localize\loc\cs
    policheckDeuScanFolder: $(Build.SourcesDirectory)\Localize\loc\de
    policheckEsnScanFolder: $(Build.SourcesDirectory)\Localize\loc\es
    policheckFraScanFolder: $(Build.SourcesDirectory)\Localize\loc\fr
    policheckItaScanFolder: $(Build.SourcesDirectory)\Localize\loc\it
    policheckJpnScanFolder: $(Build.SourcesDirectory)\Localize\loc\ja
    policheckKorScanFolder: $(Build.SourcesDirectory)\Localize\loc\ko
    policheckPlkScanFolder: $(Build.SourcesDirectory)\Localize\loc\pl
    policheckPtbScanFolder: $(Build.SourcesDirectory)\Localize\loc\pt-BR
    policheckRusScanFolder: $(Build.SourcesDirectory)\Localize\loc\ru
    policheckTrkScanFolder: $(Build.SourcesDirectory)\Localize\loc\tr
