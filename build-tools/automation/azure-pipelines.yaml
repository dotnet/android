# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - master
  - d16-*

# External yaml template files
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/master
    endpoint: xamarin

# Global variables
variables:
  InstallerArtifactName: installers
  TestAssembliesArtifactName: test-assemblies
  NUnitConsoleVersion: 3.9.0
  DotNetCoreVersion: 2.1.701
  HostedMacMojave: Hosted Mac Internal Mojave
  HostedMac: Hosted Mac Internal
  HostedWinVS2019: Hosted Windows 2019 with VS2019
  VSEngWinVS2019: VSEng-MicroBuildVS2019

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- stage: code_analysis
  displayName: Code Analysis
  jobs:
  # Check - "Xamarin.Android (Code Analysis CredScan)"
  - job: run_static_analysis
    displayName: CredScan
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    steps:
    - checkout: self
      submodules: recursive
    - template: security\xa-static-analysis\v1.yml@yaml
      parameters:
        credScanSuppressionsFile: $(System.DefaultWorkingDirectory)\build-tools\automation\CredScanSuppressions.json

- stage: mac_build
  displayName: Mac
  dependsOn: []
  jobs:
  # Check - "Xamarin.Android (Mac Build)"
  - job: mac_build_create_installers
    displayName: Build
    pool: $(HostedMacMojave)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - script: echo "##vso[task.setvariable variable=JAVA_HOME]$HOME/Library/Android/jdk"
      displayName: set JAVA_HOME

    - task: UseDotNet@2
      displayName: install .NET Core $(DotNetCoreVersion)
      inputs:
        version: $(DotNetCoreVersion)

    # Prepare and build everything
    - script: make prepare-update-mono V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      displayName: make prepare-update-mono

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare-external-git-dependencies
      condition: and(succeeded(), eq(variables['XA.Commercial.Build'], 'true'))
      env:
        GH_AUTH_SECRET: $(Github.Token)

    - script: make jenkins V=1 CONFIGURATION=$(XA.Build.Configuration) PREPARE_CI=1 PREPARE_AUTOPROVISION=1
      displayName: make jenkins

    # Build and package test assemblies
    - task: MSBuild@1
      displayName: msbuild tests/CodeBehind/UnitTests/CodeBehindUnitTests.csproj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/tests/CodeBehind/UnitTests/CodeBehindUnitTests.csproj
        configuration: $(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: msbuild tests/CodeGen-MkBundle/Xamarin.Android.MakeBundle-UnitTests/Xamarin.Android.MakeBundle-UnitTests.csproj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/tests/CodeGen-MkBundle/Xamarin.Android.MakeBundle-UnitTests/Xamarin.Android.MakeBundle-UnitTests.csproj
        configuration: $(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: msbuild tests/EmbeddedDSOs/EmbeddedDSO-UnitTests/EmbeddedDSO-UnitTests.csproj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/tests/EmbeddedDSOs/EmbeddedDSO-UnitTests/EmbeddedDSO-UnitTests.csproj
        configuration: $(XA.Build.Configuration)

    - script: |
        cp -r bin/$(XA.Build.Configuration)/bcl-tests bin/Test$(XA.Build.Configuration)/bcl-tests
        cp bin/Build$(XA.Build.Configuration)/ProfileAssemblies.projitems bin/Test$(XA.Build.Configuration)/bcl-tests/
      displayName: copy bcl-tests assemblies

    - task: PublishPipelineArtifact@0
      displayName: upload test assemblies
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        targetPath: bin/Test$(XA.Build.Configuration)

    # Create installers
    - template: install-certificates.yml@yaml
      parameters:
        DeveloperIdApplication: $(developer-id-application)
        DeveloperIdInstaller: $(developer-id-installer)
        IphoneDeveloper: $(iphone-developer)
        MacDeveloper: $(mac-developer)

    - script: make create-installers V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make create-installers

    - script: |
        mkdir -p bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
        cp bin/Build$(XA.Build.Configuration)/*.vsix bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
        cp bin/Build$(XA.Build.Configuration)/*.pkg bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)
      displayName: copy unsigned installers

    - script: |
        VERSION=`LANG=C; export LANG && git log --no-color --first-parent -n1 --pretty=format:%ct`
        echo "d1ec039f-f3db-468b-a508-896d7c382999 $VERSION" > bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)/updateinfo
      displayName: create updateinfo file

    - task: PublishPipelineArtifact@0
      displayName: upload installers
      inputs:
        artifactName: $(InstallerArtifactName)
        targetPath: bin/Build$(XA.Build.Configuration)/$(InstallerArtifactName)

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Build Results - macOS

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
# Check - "Xamarin.Android (Windows Build and Test)"
- stage: win_build_test
  displayName: Windows
  dependsOn: []
  jobs:
  - job: win_build_test
    displayName: Build and Test
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - task: xamops.azdevex.lingering-process-task.lingering-process-task@1

    - task: UseDotNet@2
      displayName: install .NET Core $(DotNetCoreVersion)
      inputs:
        version: $(DotNetCoreVersion)

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Prepare /p:AutoProvision=true /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-prepare.binlog

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Build
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Build /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-build.binlog

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-create-vsix.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /p:Configuration=$(XA.Build.Configuration) /p:XAIntegratedTests=False /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-build-tests.binlog

    - task: MSBuild@1
      displayName: nunit Xamarin.Android.Build.Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:RunNUnitTests /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-nunit-tests.binlog
      timeoutInMinutes: 150

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\LogcatParse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-ji-tests.binlog
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: xamarin-android
      condition: succeededOrFailed()

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: Build Results - Windows

- stage: finalize_installers
  displayName: Finalize Installers
  dependsOn: mac_build
  condition: and(eq(dependencies.mac_build.result, 'Succeeded'), eq(variables['XA.Commercial.Build'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  # Check - "Xamarin.Android (Finalize Installers Notarize and Upload to Storage)"
  - job: notarize_pkg_upload_storage
    displayName: Notarize and Upload to Storage
    pool: $(HostedMacMojave)
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    variables:
    - group: Xamarin Notarization
    steps:
    - template: install-certificates.yml@yaml
      parameters:
        DeveloperIdApplication: $(developer-id-application)
        DeveloperIdInstaller: $(developer-id-installer)
        IphoneDeveloper: $(iphone-developer)
        MacDeveloper: $(mac-developer)

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(InstallerArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/storage-artifacts

    - powershell: |
        $pkg = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/storage-artifacts/*" -Include *.pkg -File
        if (![System.IO.File]::Exists($pkg)) {
            throw [System.IO.FileNotFoundException] "Pkg File not found in $(System.DefaultWorkingDirectory)/storage-artifacts"
        }
        Write-Host "##vso[task.setvariable variable=XA.Unsigned.Pkg]$pkg"
      displayName: set variable to pkg path

    - template: productsign-pkg.yml@yaml
      parameters:
        UnsignedPkgPath: $(XA.Unsigned.Pkg)

    - script: |
        cd $(System.DefaultWorkingDirectory)/..
        git clone -b $(ReleaseScriptsBranch) https://$(GitHub.Token):x-oauth-basic@github.com/xamarin/release-scripts
        cd release-scripts
        ruby notarize.rb $(XA.Unsigned.Pkg) $(XamarinIdentifier) $(XamarinUserId) $(XamarinPassword) $(TeamID)
      displayName: Notarize PKG

    - script: xcrun stapler validate $(XA.Unsigned.Pkg)
      displayName: validate notarized pkg

    - template: upload-to-storage.yml@yaml
      parameters:
        BuildPackages: $(System.DefaultWorkingDirectory)/storage-artifacts
        AzureContainerName: $(Azure.Container.Name)
        AzureUploadLocation: $(Build.DefinitionName)/$(Build.BuildId)/$(Build.SourceBranchName)/$(Build.SourceVersion)

    - script: cp $(System.DefaultWorkingDirectory)/storage-artifacts/*.pkg $(Build.ArtifactStagingDirectory)
      displayName: copy notarized pkg

    - task: PublishPipelineArtifact@0
      displayName: upload notarized pkg
      inputs:
        artifactName: notarized-pkg
        targetPath: $(Build.ArtifactStagingDirectory)

  # Check - "Xamarin.Android (Finalize Installers Queue Vsix Signing)"
  - job: queue_vsix_signing
    displayName: Queue Vsix Signing
    dependsOn: notarize_pkg_upload_storage
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    steps:
    - task: xamops.azdevex.lingering-process-task.lingering-process-task@1

    - task: JenkinsQueueJob@2
      displayName: xamarin vsix codesign - run jenkins job
      inputs:
        serverEndpoint: $(Signing.Endpoint)
        jobName: $(Signing.Job)
        isParameterizedJob: true
        jobParameters: |
          REPO=$(Build.Repository.Name)
          COMMIT=$(Build.SourceVersion)
          SIGN_TYPE=Real
          GITHUB_CONTEXT=$(GitHub.Artifacts.Context)
          ENABLE_JAR_SIGNING=true

- stage: test
  displayName: Test
  dependsOn: mac_build
  jobs:
  # Check - "Xamarin.Android (Test API Compatibility)"
  - job: mac_api_compat
    displayName: API Compatibility
    pool: $(HostedMacMojave)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - template: yaml-templates/run-installer.yaml

    - script: |
        make prepare-update-mono PREPARE_CI=1 V=1 PREPARE_AUTOPROVISION=1 CONFIGURATION=$(XA.Build.Configuration)
        make prepare PREPARE_CI=1 PREPARE_AUTOPROVISION=1 V=1 CONFIGURATION=$(XA.Build.Configuration)
      displayName: make prepare

    - script: >
        make run-api-compatibility-tests V=1 CONFIGURATION=$(XA.Build.Configuration)
        FRAMEWORK_DIR=/Library/Frameworks/Xamarin.Android.framework/Versions/Current/lib/xamarin.android/xbuild-frameworks/MonoAndroid
      displayName: make run-api-compatibility-tests

    - powershell: |
        $breakageReports = Get-ChildItem $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/compatibility -Filter *.html
        foreach ($report in $breakageReports) {
            Write-Host "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/compatibility/$report"
        }

  # Check - "Xamarin.Android (Test APK Instrumentation - macOS)"
  - job: mac_apk_tests
    displayName: APK Instrumentation - macOS
    pool: $(HostedMac)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      ApkTestConfiguration: Release
    steps:
    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        configuration: $(ApkTestConfiguration)

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Aot
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:EnableLlvm=True

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Profiled
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Profiled.xml
        extraBuildArgs: /p:AndroidEnableProfiledAot=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Bundle
        project: src/Mono.Android/Test/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Bundle.xml
        extraBuildArgs: /p:BundleAssemblies=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsAppBundle
        project: tests/Runtime-AppBundle/Mono.Android-TestsAppBundle.csproj
        testResultsFiles: TestResult-Mono.Android_TestsAppBundle-$(ApkTestConfiguration).xml
        packageType: Aab

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsMultiDex
        project: tests/Runtime-MultiDex/Mono.Android-TestsMultiDex.csproj
        testResultsFiles: TestResult-Mono.Android_TestsMultiDex-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.JcwGen_Tests
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration).xml

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Aot
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Profiled
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Profiled.xml
        extraBuildArgs: /p:AndroidEnableProfiledAot=true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.EmbeddedDSO_Test
        project: tests/EmbeddedDSOs/EmbeddedDSO/EmbeddedDSO.csproj
        testResultsFiles: TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-$(ApkTestConfiguration).xml

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf.binlog
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Aot
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Aot.binlog
          /p:AotAssemblies=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Profiled
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Profiled.binlog
          /p:AndroidEnableProfiledAot=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: run Xamarin.Forms-Performance-Integration-Bundle
      inputs:
        solution: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,SignAndroidPackage,DeployTestApks,RunTestApks,UndeployTestApks,ReportComponentFailures
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/XamarinFormsPerf-Bundle.binlog
          /p:BundleAssemblies=true
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        artifactName: Test Results - APK Instrumentation - macOS

  # Check - "Xamarin.Android (Test BCL With Emulator - macOS)"
  - job: mac_bcl_tests
    displayName: BCL With Emulator - macOS
    pool: $(HostedMac)
    timeoutInMinutes: 180
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: build remap-assembly-ref.csproj
      inputs:
        solution: build-tools/remap-assembly-ref/remap-assembly-ref.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/remap-assembly-ref.binlog

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Xamarin.Android.Bcl-Tests
        project: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.nunit-$(XA.Build.Configuration).xml

    - task: PublishTestResults@2
      displayName: publish Xamarin.Android.Bcl-Tests-XUnit results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.xunit-$(XA.Build.Configuration).xml
        testRunTitle: Xamarin.Android.Bcl-Tests-NUnit
      condition: succeededOrFailed()

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - BCL With Emulator - macOS

  # Check - "Xamarin.Android (Test MSBuild - macOS)"
  - job: mac_msbuild_tests
    displayName: MSBuild - macOS
    pool: $(HostedMacMojave)
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: CodeBehindUnitTests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/CodeBehind/CodeBehindUnitTests.dll
        testResultsFile: TestResult-CodeBehindUnitTests-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.MakeBundle-UnitTests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.MakeBundle-UnitTests.dll
        testResultsFile: TestResult-MakeBundleUnitTests-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: EmbeddedDSOUnitTests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/EmbeddedDSOUnitTests.dll
        testResultsFile: TestResult-EmbeddedDSOUnitTests-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-MSBuildTests-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests.Commercial - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.Commercial.dll
        testResultsFile: TestResult-MSBuildTestsCommercial-macOS-$(XA.Build.Configuration).xml

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild - macOS

  # Check - "Xamarin.Android (Test MSBuild - Windows)"
  - job: win_msbuild_tests
    displayName: MSBuild - Windows
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      VSINSTALLDIR: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    steps:
    - template: yaml-templates\setup-test-environment.yaml
      parameters:
        provisionExtraArgs: -vv PROVISIONATOR_VISUALSTUDIO_LOCATION="$(VSINSTALLDIR)"

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)

    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests - Windows
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-MSBuildTests-Windows-$(XA.Build.Configuration).xml

    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests.Commercial - Windows
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\Xamarin.Android.Build.Tests.Commercial.dll
        testResultsFile: TestResult-MSBuildTestsCommercial-Windows-$(XA.Build.Configuration).xml

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild - Windows

  # Check - "Xamarin.Android (Test MSBuild With Emulator - macOS)"
  - job: mac_msbuilddevice_tests
    displayName: MSBuild With Emulator - macOS
    pool: $(HostedMac)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: start emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/start-emulator.binlog

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: Xamarin.Android.Build.Tests On Device - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/Xamarin.Android.Build.Tests.dll
        nunitConsoleExtraArgs: --where "cat == UsesDevice"
        testResultsFile: TestResult-MSBuildDeviceTests-$(XA.Build.Configuration).xml

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: MSBuildDeviceIntegration On Device - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/MSBuildDeviceIntegration.dll
        nunitConsoleExtraArgs: --where "test != Xamarin.Android.Build.Tests.DeploymentTest.CheckTimeZoneInfoIsCorrect"
        testResultsFile: TestResult-MSBuildDeviceIntegration-$(XA.Build.Configuration).xml

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild With Emulator - macOS

  # Check - "Xamarin.Android (Test TimeZoneInfo With Emulator - macOS)"
  - job: mac_timezonedevice_tests
    displayName: TimeZoneInfo With Emulator - macOS
    pool: $(HostedMac)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: start emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/start-emulator.binlog

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: TimeZoneInfoTests On Device - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/MSBuildDeviceIntegration.dll
        nunitConsoleExtraArgs: --where "test == Xamarin.Android.Build.Tests.DeploymentTest.CheckTimeZoneInfoIsCorrect"
        testResultsFile: TestResult-TimeZoneInfoTests-$(XA.Build.Configuration).xml

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: src/Mono.Android/Test/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - TimeZoneInfo With Emulator - macOS

  # Check - "Xamarin.Android (Test Designer - macOS)"
  - job: designer_integration_mac
    displayName: Designer - macOS
    pool: $(HostedMac)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
    steps:
    - script: |
        git clone -q https://$(GitHub.Token)@github.com/xamarin/designer.git
        cd designer
        git submodule update -q --init --recursive
      displayName: Clone and update designer

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/designer/bot-provisioning/dependencies.csx
        provisioning_extra_args: -remove Xamarin.Android -vv

    - template: yaml-templates/run-installer.yaml

    - template: designer/android-designer-build-mac.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/designer

    - template: designer/android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/designer

  # Check - "Xamarin.Android (Test Designer Windows)"
  - job: designer_integration_win
    displayName: Designer - Windows
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
      RegressionTestSuiteOutputDir: C:\Git\ADesRegTestSuite
      VisualStudioInstallationPath: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    steps:
    - script: |
        git clone -q https://$(GitHub.Token)@github.com/xamarin/designer.git
        cd designer
        git submodule update -q --init --recursive
      displayName: Clone and update designer

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)\designer\bot-provisioning\dependencies.csx
        provisioning_extra_args: -vv

    - template: yaml-templates\run-installer.yaml

    - template: designer\android-designer-build-win.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\designer

    - template: designer\android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\designer

  # Check - "Xamarin.Android (Test Integrated Regression - macOS)"
  - job: integrated_regression_mac
    displayName: Integrated Regression - macOS
    pool:
      name: VSEng-Xamarin-Mac-Devices
      demands:
      - android
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    condition: and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['System.PullRequest.IsFork'], 'True'))
    workspace:
      clean: all
    steps:
    - template: yaml-templates/run-integrated-regression-tests.yaml

  # Check - "Xamarin.Android (Test Integrated Regression - Windows)"
  - job: integrated_regression_Win
    displayName: Integrated Regression - Windows
    pool:
      name: VSEng-Xamarin-Win-XMA
      demands:
      - android
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    condition: and(eq(variables['XA.Commercial.Build'], 'true'), ne(variables['System.PullRequest.IsFork'], 'True'))
    workspace:
      clean: all
    variables:
      XQA_VISUALSTUDIO_LOCATION: '%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise'
    steps:
    - template: remove-visualstudio.yml@yaml

    - template: yaml-templates\run-integrated-regression-tests.yaml

    - template: remove-visualstudio.yml@yaml
