# Xamarin.Android Pipeline

name: $(Build.SourceBranchName)-$(Build.SourceVersion)-$(Rev:r)

trigger:
  - main
  - d16-*

# External sources, scripts, tests, and yaml template files.
resources:
  repositories:
  - repository: yaml
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin
  - repository: monodroid
    type: github
    name: xamarin/monodroid
    endpoint: xamarin
  - repository: release_scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized
    endpoint: xamarin
  - repository: uitools
    type: github
    name: xamarin/UITools
    ref: refs/heads/main
    endpoint: xamarin
  - repository: qa
    type: github
    name: xamarin/QualityAssurance
    ref: refs/heads/master
    endpoint: xamarin
  - repository: samples
    type: github
    name: xamarin/monodroid-samples
    ref: refs/heads/master
    endpoint: xamarin
  - repository: xfsamples
    type: github
    name: xamarin/xamarin-forms-samples
    ref: refs/heads/master
    endpoint: xamarin

# Global variables
variables:
  XA.Jdk8.Folder: jdk-1.8
  XA.Jdk11.Folder: jdk-11
  NuGetArtifactName: nuget-unsigned
  InstallerArtifactName: installers-unsigned
  TestAssembliesArtifactName: test-assemblies
  NUnitConsoleVersion: 3.11.1
  DotNetCoreVersion: 3.1.405
  DotNet5Version: 5.0.103
  HostedMacImage: macOS-10.15
  HostedWinVS2019: Hosted Windows 2019 with VS2019
  VSEngWinVS2019: Xamarin-Android-Win2019
  # Run all tests if:
  # - User who queued the job requested it (They set XA.RunAllTests to true)
  # - This is the master integration branch (Pipeline defaults XA.RunAllTests to true)
  # - This is a non-fork branch with name containing "mono-" (for Mono bumps)
  IsMonoBranch: $[and(ne(variables['System.PullRequest.IsFork'], 'True'), or(contains(variables['Build.SourceBranchName'], 'mono-'), contains(variables['System.PullRequest.SourceBranch'], 'mono-')))]
  RunAllTests: $[or(eq(variables['XA.RunAllTests'], true), eq(variables['IsMonoBranch'], true))]
  DotNetNUnitCategories: '& TestCategory != DotNetIgnore & TestCategory != AOT & TestCategory != MkBundle & TestCategory != MonoSymbolicate & TestCategory != PackagesConfig & TestCategory != StaticProject & TestCategory != Debugger & TestCategory != SystemApplication'
  NUnit.NumberOfTestWorkers: 4
  GitHub.Token: $(github--pat--vs-mobiletools-engineering-service2)
  CONVERT_JAVADOC_TO_XMLDOC: $[ne(variables['Build.DefinitionName'], 'Xamarin.Android-PR')]
  ${{ if and(eq(variables['Build.DefinitionName'], 'Xamarin.Android'), ne(variables['Build.Reason'], 'PullRequest')) }}:
    MicroBuildSignType: Real
    VSEngMacBuildPool: VSEng-Xamarin-RedmondMac-Android-Trusted
  ${{ if or(ne(variables['Build.DefinitionName'], 'Xamarin.Android'), eq(variables['Build.Reason'], 'PullRequest')) }}:
    MicroBuildSignType: Test
    VSEngMacBuildPool: VSEng-Xamarin-RedmondMac-Android-Untrusted
  TeamName: XamarinAndroid

# Stage and Job "display names" are shortened because they are combined to form the name of the corresponding GitHub check.
stages:
- stage: code_analysis
  displayName: Code Analysis
  jobs:
  # Check - "Xamarin.Android (Code Analysis Security and Compliance)"
  - job: run_static_analysis
    displayName: Security and Compliance
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    steps:
    - checkout: self
      submodules: recursive

    - template: security\credscan\v2.yml@yaml
      parameters:
        suppressionsFile: $(System.DefaultWorkingDirectory)\build-tools\automation\CredScanSuppressions.json

    - template: security\policheck\v1.yml@yaml
      parameters:
        exclusionFile: $(System.DefaultWorkingDirectory)\build-tools\automation\PoliCheckExclusions.xml

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
      displayName: Run AntiMalware (Defender) Scan
      inputs:
        FileDirPath: $(System.DefaultWorkingDirectory)
        EnableServices: true
      condition: succeededOrFailed()

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
      displayName: Create Security Analysis Report
      inputs:
        CredScan: true
        PoliCheck: true
      condition: succeededOrFailed()

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
      displayName: Publish Security Analysis Logs
      inputs:
        ArtifactName: CodeAnalysisLogs
      condition: succeededOrFailed()

    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
      displayName: Fail Job if Security Issues are Detected
      inputs:
        CredScan: true
        PoliCheck: true
      condition: succeededOrFailed()

- stage: mac_build
  displayName: Mac
  dependsOn: []
  jobs:
  # Check - "Xamarin.Android (Mac Build)"
  - job: mac_build_create_installers
    displayName: Build
    pool:
      name: $(VSEngMacBuildPool)
      demands:
      - agent.osversionfamily -equals 10.15
    timeoutInMinutes: 180
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - template: yaml-templates/install-microbuild-tooling.yaml
      parameters:
        condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

    - template: yaml-templates/commercial-build.yaml

    - template: yaml-templates/remove-microbuild-tooling.yaml
      parameters:
        condition: and(succeededOrFailed(), eq(variables['MicroBuildSignType'], 'Real'))

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - Nightly macOS

    - script: mono $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/xaprepare/xaprepare/bin/$(XA.Build.Configuration)/xaprepare.exe --s=DetermineApplicableTests --no-emoji --run-mode=CI
      displayName: determine which test stages to run
      name: TestConditions
      condition: and(succeeded(), eq(variables['Build.DefinitionName'], 'Xamarin.Android-PR'))

# This stage ensures Windows specific build steps continue to work, and runs unit tests.
# Check - "Xamarin.Android (Windows Build and Test)"
- stage: win_build_test
  displayName: Windows
  dependsOn: []
  jobs:
  - job: win_build_test
    displayName: Build and Smoke Test
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    steps:
    - script: netsh int ipv4 set global sourceroutingbehavior=drop

    - checkout: self
      submodules: recursive

    - template: yaml-templates\kill-processes.yaml

    - template: yaml-templates\clean.yaml

    - template: yaml-templates\update-vs.yaml

    - script: |
        echo ##vso[task.setvariable variable=JI_JAVA_HOME]%USERPROFILE%\android-toolchain\$(XA.Jdk11.Folder)
      displayName: set JI_JAVA_HOME

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNet5Version)

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    # Downgrade the XA .vsix installed into the instance of VS that we are building with so that we don't restore/build against a test version.
    # The VS installer will attempt to resume any failed or partial installation before trying to downgrade Xamarin.Android.
    # VSIXInstaller.exe will exit non-zero when the downgrade attempt is a no-op, so we will allow this step to fail silently.
    - powershell: |
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        & "$vsWhere" -all -prerelease -latest | Out-Default
        $isLatestVSLaunchable = & "$vsWhere" -all -prerelease -latest -property isLaunchable
        if ($isLatestVSLaunchable -eq 0) {
            $vsPath = & "$vsWhere" -all -prerelease -latest -property installationPath
            Write-Host "Attempting to repair VS instance:" $vsPath
            $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            & "$vsInstaller" resume --installPath $vsPath --quiet --norestart | Out-Default
            Write-Host "vs_installer.exe resume attempt complete"
        }
        $vsixInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\resources\app\ServiceHub\Services\Microsoft.VisualStudio.Setup.Service\VSIXInstaller.exe"
        $ts = Get-Date -Format FileDateTimeUniversal
        $log = "xavsixdowngrade-$ts.log"
        $process = Start-Process -NoNewWindow -FilePath $vsixInstaller -ArgumentList "/downgrade:Xamarin.Android.Sdk /admin /quiet /logFile:$log" -Wait -PassThru -RedirectStandardError "err.txt"
        Get-Content "err.txt" | Write-Host
        Get-Content "${env:TEMP}\$log" | Write-Host
        Write-Host "VSInstaller.exe exited with code:" $process.ExitCode
        Remove-Item "${env:TEMP}\$log"
      displayName: downgrade XA to stable
      ignoreLASTEXITCODE: true

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android /t:Prepare
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Prepare /p:AutoProvision=true /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-prepare.binlog

    # Build, pack .nupkgs, and extract workload packs to dotnet preview test directory
    - task: MSBuild@1
      displayName: msbuild Xamarin.Android
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:PackDotNet /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-build.binlog

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-create-vsix.binlog

    - task: MSBuild@1
      displayName: msbuild xabuild
      inputs:
        solution: tools\xabuild\xabuild.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-xabuild.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /restore /p:Configuration=$(XA.Build.Configuration) /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-build-tests.binlog

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /restore
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\logcat-parse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\msbuild-run-ji-tests.binlog
      continueOnError: True

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: Java Interop Tests - Windows Build Tree

    - script: dotnet tool update apkdiff -g
      displayName: install apkdiff dotnet tool
      continueOnError: true

    # Limit the amount of worker threads used to run these tests in parallel to half of what is currently available (8) on the Windows pool.
    # Using all available cores seems to occasionally bog down our machines and cause parallel test execution to slow down dramatically.
    # Only run a subset of the Xamarin.Android.Build.Tests against the local Windows build tree.
    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Smoke MSBuild Tests - Windows Build Tree
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\net472\Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-SmokeMSBuildTests-WinBuildTree-$(XA.Build.Configuration).xml
        nunitConsoleExtraArgs: --where "cat == SmokeTests"

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: Build Results - Windows

    - template: yaml-templates\fail-on-issue.yaml

  - job: win_dotnet_build_test
    displayName: Dotnet Build and Smoke Test
    pool: $(VSEngWinVS2019)
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 5
    steps:
    - checkout: self
      submodules: recursive

    - template: yaml-templates\kill-processes.yaml

    - template: yaml-templates\clean.yaml

    - template: yaml-templates\update-vs.yaml

    - script: |
        echo ##vso[task.setvariable variable=JI_JAVA_HOME]%USERPROFILE%\android-toolchain\$(XA.Jdk11.Folder)
      displayName: set JI_JAVA_HOME

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNet5Version)

    - template: yaml-templates\use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    # Downgrade the XA .vsix installed into the instance of VS that we are building with so that we don't restore/build against a test version.
    # The VS installer will attempt to resume any failed or partial installation before trying to downgrade Xamarin.Android.
    # VSIXInstaller.exe will exit non-zero when the downgrade attempt is a no-op, so we will allow this step to fail silently.
    - powershell: |
        $vsWhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        & "$vsWhere" -all -prerelease -latest | Out-Default
        $isLatestVSLaunchable = & "$vsWhere" -all -prerelease -latest -property isLaunchable
        if ($isLatestVSLaunchable -eq 0) {
            $vsPath = & "$vsWhere" -all -prerelease -latest -property installationPath
            Write-Host "Attempting to repair VS instance:" $vsPath
            $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
            & "$vsInstaller" resume --installPath $vsPath --quiet --norestart | Out-Default
            Write-Host "vs_installer.exe resume attempt complete"
        }
        $vsixInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\resources\app\ServiceHub\Services\Microsoft.VisualStudio.Setup.Service\VSIXInstaller.exe"
        $ts = Get-Date -Format FileDateTimeUniversal
        $log = "xavsixdowngrade-$ts.log"
        $process = Start-Process -NoNewWindow -FilePath $vsixInstaller -ArgumentList "/downgrade:Xamarin.Android.Sdk /admin /quiet /logFile:$log" -Wait -PassThru -RedirectStandardError "err.txt"
        Get-Content "err.txt" | Write-Host
        Get-Content "${env:TEMP}\$log" | Write-Host
        Write-Host "VSInstaller.exe exited with code:" $process.ExitCode
        Remove-Item "${env:TEMP}\$log"
      displayName: downgrade XA to stable
      ignoreLASTEXITCODE: true

    - task: DotNetCoreCLI@2
      displayName: Prepare Solution
      inputs:
        projects: Xamarin.Android.sln
        arguments: '-c $(XA.Build.Configuration) -target:Prepare -m:1 -p:AutoProvision=true -bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-build-prepare.binlog'

    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        projects: Xamarin.Android.sln
        arguments: '-c $(XA.Build.Configuration) -m:1 -bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-build.binlog'

    - task: MSBuild@1
      displayName: msbuild create-vsix
      inputs:
        solution: build-tools\create-vsix\create-vsix.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /p:CreateVsixContainer=True /p:ZipPackageCompressionLevel=Normal /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-create-vsix.binlog

    # Pack .nupkgs and extract workload packs to dotnet preview test directory
    - task: MSBuild@1
      displayName: PackDotNet
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:PackDotNet /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-packdotnet.binlog

    - task: MSBuild@1
      displayName: msbuild xabuild
      inputs:
        solution: tools\xabuild\xabuild.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\dotnet-xabuild.binlog

    - task: CmdLine@1
      displayName: xabuild Xamarin.Android-Tests
      inputs:
        filename: bin\$(XA.Build.Configuration)\bin\xabuild.exe
        arguments: Xamarin.Android-Tests.sln /restore /p:Configuration=$(XA.Build.Configuration) /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\dotnet-build-tests.binlog

    - task: MSBuild@1
      displayName: nunit Java.Interop Tests
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /restore
          /t:RunJavaInteropTests
          /p:TestAssembly="bin\Test$(XA.Build.Configuration)\generator-Tests.dll;bin\Test$(XA.Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(XA.Build.Configuration)\logcat-parse-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(XA.Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll"
          /bl:$(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\dotnet-run-ji-tests.binlog
      continueOnError: True

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-*.xml
        testRunTitle: Java Interop Tests - Windows Dotnet Build

    - script: 'dotnet tool update apkdiff -g'
      displayName: install apkdiff dotnet tool
      continueOnError: true

    # Limit the amount of worker threads used to run these tests in parallel to half of what is currently available (8) on the Windows pool.
    # Using all available cores seems to occasionally bog down our machines and cause parallel test execution to slow down dramatically.
    # Only run a subset of the Xamarin.Android.Build.Tests against the local Windows build tree.
    - template: yaml-templates\run-nunit-tests.yaml
      parameters:
        testRunTitle: Smoke MSBuild Tests - Windows Dotnet Build
        testAssembly: $(System.DefaultWorkingDirectory)\bin\Test$(XA.Build.Configuration)\net472\Xamarin.Android.Build.Tests.dll
        testResultsFile: TestResult-SmokeMSBuildTests-WinDotnetBuildTree-$(XA.Build.Configuration).xml
        nunitConsoleExtraArgs: --where "cat == SmokeTests"

    - template: yaml-templates\upload-results.yaml
      parameters:
        artifactName: Build Results - Windows DotNet

    - template: yaml-templates\fail-on-issue.yaml

# Check - "Xamarin.Android (Linux Build and Smoke Test)"
- stage: linux_build_test
  displayName: Linux
  dependsOn: []
  jobs:
  - job: linux_build_test
    displayName: Build and Smoke Test
    pool: Xamarin-Android-Ubuntu20.04
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 2
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: true
      submodules: recursive

    - checkout: monodroid
      clean: true
      submodules: recursive
      path: s/xamarin-android/external/monodroid
      persistCredentials: true

    - script: rm -rf external/monodroid/external/xamarin-android
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: delete external xamarin-android submodule

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNet5Version)

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    - task: NuGetAuthenticate@0
      displayName: authenticate with azure artifacts
      inputs:
        forceReinstallCredentialProvider: true

    - script: >
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&
        echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list &&
        sudo apt-get update &&
        sudo apt-get install -y --no-install-recommends apt-transport-https mono-complete nuget
      displayName: install mono

    - task: NuGetToolInstaller@0
      inputs:
        versionSpec: 5.x

    - script: make prepare-external-git-dependencies PREPARE_CI=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make prepare-external-git-dependencies

    - script: make jenkins V=1 PREPARE_CI=1 PREPARE_AUTOPROVISION=1 CONFIGURATION=$(XA.Build.Configuration)
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: make jenkins

    - task: MSBuild@1
      displayName: pack all nupkgs
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-packs/Microsoft.Android.Sdk.proj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /t:CreateAllPacks,ExtractWorkloadPacks /restore
          /p:NuGetLicense=$(System.DefaultWorkingDirectory)/xamarin-android/external/monodroid/tools/scripts/License.txt
          /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/create-all-packs.binlog

    - script: >
        mkdir -p $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/nuget-linux &&
        cp $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)/Microsoft.Android.Sdk.Linux*.nupkg
        $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/nuget-linux
      workingDirectory: $(System.DefaultWorkingDirectory)/xamarin-android
      displayName: copy linux sdk

    - task: PublishPipelineArtifact@1
      displayName: upload linux sdk
      inputs:
        artifactName: nuget-linux-unsigned
        targetPath: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/nuget-linux

    - script: dotnet tool update apkdiff -g
      displayName: install apkdiff dotnet tool
      continueOnError: true

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        useDotNet: true
        testRunTitle: Xamarin.Android.Build.Tests - Linux .NET 6 Smoke Tests
        testAssembly: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Test$(XA.Build.Configuration)/netcoreapp3.1/Xamarin.Android.Build.Tests.dll
        dotNetTestExtraArgs: --filter CheckSignApk  # TODO: Add more tests (e.g. "TestCategory = SmokeTests $(DotNetNUnitCategories)" )
        testResultsFile: TestResult-NET6SmokeMSBuildTests-Linux-$(XA.Build.Configuration).xml

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - Linux

    - template: yaml-templates\fail-on-issue.yaml

- stage: smoke_tests
  displayName: Smoke Tests
  dependsOn: mac_build
  jobs:

  # Check - "Xamarin.Android (Smoke Tests APK Instrumentation - macOS)"
  - job: mac_apk_tests
    displayName: APK Instrumentation - macOS
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 240
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      ApkTestConfiguration: Release
    steps:
    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        configuration: $(ApkTestConfiguration)

    - script: mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(ApkTestConfiguration)/xaprepare.exe --s=Required --auto-provision=yes --auto-provision-uses-sudo=yes --no-emoji --no-mingw-w64 --run-mode=CI
      displayName: install required brew tools and prepare java.interop

    - script: mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(ApkTestConfiguration)/xaprepare.exe --s=EmulatorTestDependencies --no-emoji --run-mode=CI
      displayName: install emulator

    - script: 'dotnet tool update apkdiff -g'
      displayName: install apkdiff dotnet tool
      continueOnError: true

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests
        project: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration).xml
        artifactName: Mono.Android_Tests-Signed.apk
        artifactFolder: Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Aot
        project: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:EnableLlvm=True
        artifactName: Mono.Android_Tests-Signed.apk
        artifactFolder: AotLlvm

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Profiled-Aot
        project: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Profiled-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:AndroidEnableProfiledAot=true
        artifactName: Mono.Android_Tests-Signed.apk
        artifactFolder: Profiled-Aot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_Tests-Bundle
        project: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        testResultsFiles: TestResult-Mono.Android_Tests-$(ApkTestConfiguration)-Bundle.xml
        extraBuildArgs: /p:BundleAssemblies=true
        artifactName: Mono.Android_Tests-Signed.apk
        artifactFolder: Bundle

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsAppBundle
        project: tests/Mono.Android-Tests/Runtime-AppBundle/Mono.Android-TestsAppBundle.csproj
        testResultsFiles: TestResult-Mono.Android_TestsAppBundle-$(ApkTestConfiguration).xml
        packageType: Aab
        artifactName: Mono.Android_TestsAppBundle-Signed.aab
        artifactFolder: Aab

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Mono.Android_TestsMultiDex
        project: tests/Mono.Android-Tests/Runtime-MultiDex/Mono.Android-TestsMultiDex.csproj
        testResultsFiles: TestResult-Mono.Android_TestsMultiDex-$(ApkTestConfiguration).xml
        artifactName: Mono.Android_TestsMultiDex-Signed.apk
        artifactFolder: MultiDex

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.JcwGen_Tests
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(ApkTestConfiguration).xml
        artifactName: Xamarin.Android.JcwGen_Tests-Signed.apk
        artifactFolder: Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.JcwGen_Tests_FastDev
        project: tests/CodeGen-Binding/Xamarin.Android.JcwGen-Tests/Xamarin.Android.JcwGen-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.JcwGen_Tests-$(ApkTestConfiguration).xml
        artifactName: Xamarin.Android.JcwGen_Tests-Signed.apk
        artifactFolder: FastDev_Assemblies_Dexes
        extraBuildArgs: /p:AndroidFastDeploymentType=Assemblies:Dexes

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration).xml
        artifactName: Xamarin.Android.Locale_Tests-Signed.apk
        artifactFolder: Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Aot
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True
        artifactName: Xamarin.Android.Locale_Tests-Signed.apk
        artifactFolder: Aot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.Locale_Tests-Profiled-Aot
        project: tests/locales/Xamarin.Android.Locale-Tests/Xamarin.Android.Locale-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Locale_Tests-$(ApkTestConfiguration)-Profiled-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:AndroidEnableProfiledAot=true
        artifactName: Xamarin.Android.Locale_Tests-Signed.apk
        artifactFolder: Profiled-Aot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Android.EmbeddedDSO_Test
        project: tests/EmbeddedDSOs/EmbeddedDSO/EmbeddedDSO.csproj
        testResultsFiles: TestResult-Xamarin.Android.EmbeddedDSO_Test.nunit-$(ApkTestConfiguration).xml
        artifactName: Xamarin.Android.EmbeddedDSO_Test-Signed.apk
        artifactFolder: Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Forms-Performance-Integration
        project: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        testResultsFiles: TestResult-apkdiff-Xamarin.Forms_Performance_Integration-Signed-$(ApkTestConfiguration).xml
        artifactName: Xamarin.Forms_Performance_Integration-Signed.apk
        artifactFolder: Default

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Forms-Performance-Integration-Aot
        project: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        testResultsFiles: TestResult-apkdiff-Xamarin.Forms_Performance_Integration-Signed-$(ApkTestConfiguration)-Aot.xml
        extraBuildArgs: /p:AotAssemblies=true
        artifactName: Xamarin.Forms_Performance_Integration-Signed.apk
        artifactFolder: Aot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Forms-Performance-Integration-Profiled-Aot
        project: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        testResultsFiles: TestResult-apkdiff-Xamarin.Forms_Performance_Integration-Signed-$(ApkTestConfiguration)-Profiled-Aot.xml
        extraBuildArgs: /p:AotAssemblies=True /p:AndroidEnableProfiledAot=true
        artifactName: Xamarin.Forms_Performance_Integration-Signed.apk
        artifactFolder: Profiled-Aot

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: Xamarin.Forms-Performance-Integration-Bundle
        project: tests/Xamarin.Forms-Performance-Integration/Droid/Xamarin.Forms.Performance.Integration.Droid.csproj
        testResultsFiles: TestResult-apkdiff-Xamarin.Forms_Performance_Integration-Signed-$(ApkTestConfiguration)-Bundle.xml
        extraBuildArgs: /p:BundleAssemblies=true
        artifactName: Xamarin.Forms_Performance_Integration-Signed.apk
        artifactFolder: Bundle

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        testName: VSAndroidApp
        project: samples/VSAndroidAppProxy.csproj
        testResultsFiles: TestResult-apkdiff-com.companyname.vsandroidapp-Signed-$(ApkTestConfiguration).xml
        artifactName: com.companyname.vsandroidapp-Signed.apk
        artifactFolder: Default

    - task: MSBuild@1
      displayName: run Mono.Android.NET_Tests
      inputs:
        solution: tests/Mono.Android-Tests/Runtime-Microsoft.Android.Sdk/Mono.Android.NET-Tests.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: /t:RunDotNetInstrumentation
      continueOnError: true

    - script: >
        mkdir -p $(Build.ArtifactStagingDirectory)/OneDotNet &&
        cp "$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/net6.0-android/Mono.Android.NET_Tests-Signed.apk" "$(Build.ArtifactStagingDirectory)/OneDotNet"
      displayName: copy apk/aab
      continueOnError: true

    - task: PublishTestResults@2
      displayName: publish Mono.Android.NET_Tests results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-Mono.Android.NET_Tests-$(ApkTestConfiguration).xml
        testRunTitle: Mono.Android.NET_Tests

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >-
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(ApkTestConfiguration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        configuration: $(ApkTestConfiguration)
        artifactName: Test Results - APK Instrumentation - macOS

    # Plots: Utilize command-line utility built here to send plot information contained in CSV files to AppInsights
    - task: MSBuild@1
      displayName: build plots-to-appinsights
      inputs:
        solution: build-tools/plots-to-appinsights/ProcessPlotCSVFile.csproj
        configuration: $(ApkTestConfiguration)
        msbuildArguments: >-
          /restore
          /t:Build
          /v:normal
          /bl:$(System.DefaultWorkingDirectory)/bin/Tools$(ApkTestConfiguration)plots-to-appinsights.binlog
      continueOnError: true
      condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))

    # Process Plot CSV files and send results to AppInsights
    # XamarinAndroidMetrics: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/64e11c84-c922-4ffd-bea9-67ab39354edd/resourceGroups/XamarinMetrics/providers/microsoft.insights/components/XamarinAndroidMetrics/overview
    # UNDONE: Need plot definitions for the following files:
    #  TestResult-Xamarin.Android.EmbeddedDSO_Test-times.csv

    - template: yaml-templates/plots-to-appinsights.yaml
      parameters:
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
        configuration: $(ApkTestConfiguration)
        plotGroup: Test times
        plotTitle: Runtime merged
        plotPathAndFilename: $(System.DefaultWorkingDirectory)/TestResult-Mono.Android_Tests-times.csv

    - template: yaml-templates/plots-to-appinsights.yaml
      parameters:
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
        configuration: $(ApkTestConfiguration)
        plotGroup: Test times
        plotTitle: Jcw
        plotPathAndFilename: $(System.DefaultWorkingDirectory)/TestResult-Xamarin.Android.JcwGen_Tests-times.csv

    - template: yaml-templates/plots-to-appinsights.yaml
      parameters:
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
        configuration: $(ApkTestConfiguration)
        plotGroup: Test times
        plotTitle: Locale
        plotPathAndFilename: $(System.DefaultWorkingDirectory)/TestResult-Xamarin.Android.Locale_Tests-times.csv

    - template: yaml-templates/plots-to-appinsights.yaml
      parameters:
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual')))
        configuration: $(ApkTestConfiguration)
        plotGroup: Test times
        plotTitle: Xamarin.Forms app startup
        plotPathAndFilename: $(System.DefaultWorkingDirectory)/TestResult-Xamarin.Forms_Test-times.csv

    - template: yaml-templates/fail-on-issue.yaml

  # Xamarin.Android (Smoke Tests MSBuild - Mac-0)
  - template: yaml-templates/run-msbuild-mac-tests.yaml
    parameters:
      job_name: mac_msbuild_tests_0
      nunit_categories: '|| cat == SmokeTests'

  # Xamarin.Android (Smoke Tests MSBuild - Win-0)
  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      job_name: win_msbuild_tests_0
      nunit_categories: '|| cat == SmokeTests'

  # Check - "Xamarin.Android (Smoke Tests MSBuild Emulator - macOS)"
  - job: mac_msbuilddevice_tests
    displayName: MSBuild Emulator - macOS
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - script: mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(XA.Build.Configuration)/xaprepare.exe --s=EmulatorTestDependencies --no-emoji --run-mode=CI
      displayName: install emulator

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: start emulator
      inputs:
        solution: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:AcquireAndroidTarget /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/start-emulator.binlog

    - template: yaml-templates/run-nunit-tests.yaml
      parameters:
        testRunTitle: MSBuildDeviceIntegration Smoke - macOS
        testAssembly: $(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/MSBuildDeviceIntegration/net472/MSBuildDeviceIntegration.dll
        nunitConsoleExtraArgs: --where "cat == SmokeTests"
        testResultsFile: TestResult-MSBuildDeviceIntegrationSmoke-$(XA.Build.Configuration).xml

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/Mono.Android-Tests/Mono.Android-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - MSBuild Smoke With Emulator - macOS

    - template: yaml-templates/fail-on-issue.yaml

- stage: msbuild_legacy
  displayName: Legacy Tests
  dependsOn: mac_build
  condition: and(succeeded(), or(eq(variables['RunAllTests'], true), contains(dependencies.mac_build.outputs['mac_build_create_installers.TestConditions.TestAreas'], 'MSBuild')))
  jobs:
  # Xamarin.Android (Test MSBuild Legacy - macOS)
  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 1
      job_name: mac_msbuild_tests_1
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      jdkTestFolder: $(XA.Jdk8.Folder)

  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 2
      job_name: mac_msbuild_tests_2
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      run_extra_tests: true
      jdkTestFolder: $(XA.Jdk8.Folder)

  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 3
      job_name: mac_msbuild_tests_3
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      jdkTestFolder: $(XA.Jdk8.Folder)

  # Xamarin.Android (Test MSBuild Legacy - Windows)
  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 1
      job_name: win_msbuild_tests_1
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      jdkTestFolder: $(XA.Jdk8.Folder)

  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 2
      job_name: win_msbuild_tests_2
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      run_extra_tests: true
      jdkTestFolder: $(XA.Jdk8.Folder)

  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 3
      job_name: win_msbuild_tests_3
      job_suffix: Legacy
      nunit_categories: '&& cat != SmokeTests'
      jdkTestFolder: $(XA.Jdk8.Folder)

- stage: msbuild_dotnet
  displayName: One .NET Tests
  dependsOn: mac_build
  condition: and(succeeded(), or(eq(variables['RunAllTests'], true), contains(dependencies.mac_build.outputs['mac_build_create_installers.TestConditions.TestAreas'], 'MSBuild')))
  jobs:
  # Xamarin.Android (Test MSBuild One .NET - macOS)
  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 1
      job_name: mac_dotnet_tests_1
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 2
      job_name: mac_dotnet_tests_2
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

  - template: yaml-templates\run-msbuild-mac-tests.yaml
    parameters:
      node_id: 3
      job_name: mac_dotnet_tests_3
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

  # Xamarin.Android (Test MSBuild One .NET - Windows)
  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 1
      job_name: win_dotnet_tests_1
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 2
      job_name: win_dotnet_tests_2
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

  - template: yaml-templates\run-msbuild-win-tests.yaml
    parameters:
      node_id: 3
      job_name: win_dotnet_tests_3
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

- stage: msbuilddevice_tests
  displayName: MSBuild Emulator Tests
  dependsOn: mac_build
  condition: and(succeeded(), or(eq(variables['RunAllTests'], true), contains(dependencies.mac_build.outputs['mac_build_create_installers.TestConditions.TestAreas'], 'MSBuildDevice')))
  jobs:
  # Check - "Xamarin.Android (MSBuild Emulator Tests macOS - Legacy)"
  - template: yaml-templates/run-msbuild-device-tests.yaml
    parameters:
      job_name: mac_msbuilddevice_tests
      job_suffix: Legacy
      jdkTestFolder: $(XA.Jdk8.Folder)

  # Check - "Xamarin.Android (MSBuild Emulator Tests macOS - One .NET)"
  - template: yaml-templates/run-msbuild-device-tests.yaml
    parameters:
      job_name: mac_dotnetdevice_tests
      job_suffix: One .NET
      nunit_categories: $(DotNetNUnitCategories)
      target_framework: 'netcoreapp3.1'

- stage: designer_tests
  displayName: Designer Tests
  dependsOn: mac_build
  condition: and(succeeded(), or(eq(variables['RunAllTests'], true), contains(dependencies.mac_build.outputs['mac_build_create_installers.TestConditions.TestAreas'], 'Designer')))
  jobs:
 # Check - "Xamarin.Android (Designer Tests macOS)"
  - job: designer_integration_mac
    displayName: macOS
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
    steps:
    - checkout: uitools
      clean: true
      submodules: recursive
      path: s/UITools
      persistCredentials: true

    - powershell: |
        # Use the branch name of the source being built or the PR target branch name. Fall back to 'main' if the branch is unknown.
        $branchPrefix = "/refs/heads/"
        $branchName = "$(Build.SourceBranch)" -replace $branchPrefix, ""
        if ("$(Build.Reason)" -eq "PullRequest") {
            $branchName = "$(System.PullRequest.TargetBranch)" -replace $branchPrefix, ""
        }
        if (("$branchName" -ne "main") -and ("$branchName" -notlike "d16*")) {
            $branchName = "main"
        }
        Set-Location -Path $(System.DefaultWorkingDirectory)/UITools
        git checkout $branchName
        git submodule update -q --init --recursive
      displayName: Clone and update UITools

    - task: NuGetAuthenticate@0
      displayName: authenticate with azure artifacts
      inputs:
        forceReinstallCredentialProvider: true

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)/UITools/Designer/bot-provisioning/dependencies.csx
        provisioning_extra_args: -remove Xamarin.Android -vv DEVDIV_PKGS_NUGET_TOKEN=$(DevDiv.NuGet.Token) SECTOOLS_PKGS_NUGET_TOKEN=$(SecTools.NuGet.Token)

    - template: yaml-templates/setup-test-environment.yaml
      parameters:
        xaSourcePath: $(System.DefaultWorkingDirectory)/xamarin-android
        jdkTestFolder: $(XA.Jdk8.Folder)

    - template: designer/android-designer-build-mac.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/UITools/Designer

    - template: designer/android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)/UITools/Designer

    - task: CopyFiles@2
      displayName: 'Copy binlogs'
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/UITools/Designer/Xamarin.Designer.Android
        contents: '**/*.binlog'
        targetFolder: $(Build.ArtifactStagingDirectory)/designer-binlogs
        overWrite: true
        flattenFolders: true
      condition: always()

    - template: yaml-templates/publish-artifact.yaml
      parameters:
        displayName: upload designer binlogs
        artifactName: Test Results - Designer - macOS
        targetPath: $(Build.ArtifactStagingDirectory)/designer-binlogs

  # Check - "Xamarin.Android (Designer Tests Windows)"
  - job: designer_integration_win
    displayName: Windows
    pool: $(HostedWinVS2019)
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 5
    workspace:
      clean: all
    variables:
      EnableRegressionTest: true
      RegressionTestSuiteOutputDir: C:\Git\ADesRegTestSuite
      VisualStudioInstallationPath: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
    steps:
    - checkout: uitools
      clean: true
      submodules: recursive
      path: s\UITools
      persistCredentials: true

    - powershell: |
        # Use the branch name of the source being built or the PR target branch name. Fall back to 'main' if the branch is unknown.
        $branchPrefix = "/refs/heads/"
        $branchName = "$(Build.SourceBranch)" -replace $branchPrefix, ""
        if ("$(Build.Reason)" -eq "PullRequest") {
            $branchName = "$(System.PullRequest.TargetBranch)" -replace $branchPrefix, ""
        }
        if (("$branchName" -ne "main") -and ("$branchName" -notlike "d16*")) {
            $branchName = "main"
        }
        Set-Location -Path $(System.DefaultWorkingDirectory)\UITools
        git checkout $branchName
        git submodule update -q --init --recursive
      displayName: Clone and update UITools

    - task: NuGetAuthenticate@0
      displayName: authenticate with azure artifacts
      inputs:
        forceReinstallCredentialProvider: true

    - task: provisionator@2
      displayName: provision designer dependencies
      inputs:
        github_token: $(GitHub.Token)
        provisioning_script: $(System.DefaultWorkingDirectory)\UITools\Designer\bot-provisioning\dependencies.csx
        provisioning_extra_args: -vv DEVDIV_PKGS_NUGET_TOKEN=$(DevDiv.NuGet.Token) SECTOOLS_PKGS_NUGET_TOKEN=$(SecTools.NuGet.Token)

    - template: yaml-templates\setup-test-environment.yaml
      parameters:
        xaSourcePath: $(System.DefaultWorkingDirectory)\xamarin-android
        jdkTestFolder: $(XA.Jdk8.Folder)

    - template: designer\android-designer-build-win.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\UITools\Designer

    - template: designer\android-designer-tests.yaml@yaml
      parameters:
        designerSourcePath: $(System.DefaultWorkingDirectory)\UITools\Designer

    - task: CopyFiles@2
      displayName: 'Copy binlogs'
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)\UITools\Designer\Xamarin.Designer.Android
        contents: '**/*.binlog'
        targetFolder: $(Build.ArtifactStagingDirectory)\designer-binlogs
        overWrite: true
        flattenFolders: true
      condition: always()

    - template: yaml-templates/publish-artifact.yaml
      parameters:
        displayName: upload designer binlogs
        artifactName: Test Results - Designer - Windows
        targetPath: $(Build.ArtifactStagingDirectory)\designer-binlogs

- stage: bcl_tests
  displayName: BCL Emulator Tests
  dependsOn: mac_build
  condition: and(succeeded(), or(eq(variables['RunAllTests'], true), contains(dependencies.mac_build.outputs['mac_build_create_installers.TestConditions.TestAreas'], 'BCL')))
  jobs:
  # Check - "Xamarin.Android (BCL Emulator Tests macOS)"
  - job: mac_bcl_tests
    displayName: macOS
    pool:
      vmImage: $(HostedMacImage)
    timeoutInMinutes: 180
    workspace:
      clean: all
    steps:
    - template: yaml-templates/setup-test-environment.yaml

    - script: mono $(System.DefaultWorkingDirectory)/build-tools/xaprepare/xaprepare/bin/$(XA.Build.Configuration)/xaprepare.exe --s=EmulatorTestDependencies --no-emoji --run-mode=CI
      displayName: install emulator

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(TestAssembliesArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/bin/$(XA.Build.Configuration)

    - task: MSBuild@1
      displayName: build remap-assembly-ref.csproj
      inputs:
        solution: build-tools/remap-assembly-ref/remap-assembly-ref.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/remap-assembly-ref.binlog

    - template: yaml-templates/apk-instrumentation.yaml
      parameters:
        configuration: $(XA.Build.Configuration)
        testName: Xamarin.Android.Bcl-Tests
        project: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.nunit-$(XA.Build.Configuration).xml
        artifactName: Xamarin.Android.Bcl_Tests-Signed.apk
        artifactFolder: Default

    - task: PublishTestResults@2
      displayName: publish Xamarin.Android.Bcl-Tests-XUnit results
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: TestResult-Xamarin.Android.Bcl_Tests.xunit-$(XA.Build.Configuration).xml
        testRunTitle: Xamarin.Android.Bcl-Tests-NUnit

    - task: MSBuild@1
      displayName: shut down emulator
      inputs:
        solution: tests/BCL-Tests/Xamarin.Android.Bcl-Tests/Xamarin.Android.Bcl-Tests.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /t:AcquireAndroidTarget,ReleaseAndroidTarget
          /bl:$(System.DefaultWorkingDirectory)/bin/Test$(XA.Build.Configuration)/shutdown-emulator.binlog
      condition: always()

    - template: yaml-templates/upload-results.yaml
      parameters:
        artifactName: Test Results - BCL With Emulator - macOS

    - template: yaml-templates/fail-on-issue.yaml

- stage: dotnet_installers
  displayName: .NET 6 Preview Installers
  dependsOn: mac_build
  jobs:
  # Check - "Xamarin.Android (.NET 6 Preview Installers Sign NuGets)"
  - template: sign-artifacts/jobs/v2.yml@yaml
    parameters:
      artifactName: $(NuGetArtifactName)
      signType: $(MicroBuildSignType)
      usePipelineArtifactTasks: true
      condition: eq(variables['MicroBuildSignType'], 'Real')

  # Check - "Xamarin.Android (.NET 6 Preview Installers Create .pkg)"
  - job: dotnet_create_pkg
    displayName: Create .pkg
    ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
      dependsOn: signing
    pool:
      name: $(VSEngMacBuildPool)
      demands:
      - agent.osversionfamily -equals 10.15
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - checkout: release_scripts
      clean: true

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    - task: DownloadPipelineArtifact@2
      inputs:
        ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: nuget-signed
        ${{ if ne(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: $(NuGetArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)

    - task: NuGetCommand@2
      displayName: push nupkgs
      inputs:
        command: push
        packagesToPush: $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/$(NuGetArtifactName)/*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: xamarin-impl public feed
      condition: and(succeeded(), eq(variables['PushXAPackages'], 'true'))

    - template: yaml-templates/install-microbuild-tooling.yaml
      parameters:
        condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android.BootstrapTasks
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/Xamarin.Android.BootstrapTasks.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/msbuild-bootstraptasks.binlog

    - task: MSBuild@1
      displayName: msbuild /t:Restore create-dotnet-pkg.proj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-dotnet-pkg/create-dotnet-pkg.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Restore /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/restore-create-pkg.binlog

    - task: MSBuild@1
      displayName: msbuild /t:CreateWorkloadInstallers
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:CreateWorkloadInstallers /p:SignType=$(MicroBuildSignType) /p:MicroBuildOverridePluginDirectory=$(Build.StagingDirectory)/MicroBuild/Plugins /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/msbuild-workload.binlog

    - powershell: |
        $pkg = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/*" -Include *.pkg -File
        if (![System.IO.File]::Exists($pkg)) {
            throw [System.IO.FileNotFoundException] "Pkg File not found in $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)"
        }
        Write-Host "##vso[task.setvariable variable=XA.NET6.Pkg]$pkg"
      displayName: set variable to pkg path

    - script: >
        cd $(System.DefaultWorkingDirectory)/release-scripts &&
        pwsh notarize.ps1 -FolderForApps $(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)
      failOnStderr: true
      displayName: Notarize PKG
      condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

    - script: xcrun stapler validate $(XA.NET6.Pkg)
      displayName: validate notarized pkg
      condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

    - task: PublishPipelineArtifact@1
      displayName: upload pkg
      inputs:
        ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: net6-pkg-signed
        ${{ if ne(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: net6-pkg-unsigned
        targetPath: $(XA.NET6.Pkg)

    - template: yaml-templates/remove-microbuild-tooling.yaml
      parameters:
        condition: and(succeededOrFailed(), eq(variables['MicroBuildSignType'], 'Real'))

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - .NET 6 Preview .pkg

  # Check - "Xamarin.Android (.NET 6 Preview Installers Create .msi and Upload)"
  - job: dotnet_create_msi
    displayName: Create .msi and Upload
    dependsOn: dotnet_create_pkg
    pool: VSEng-MicroBuildVS2019
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: recursive

    - task: DownloadPipelineArtifact@2
      inputs:
        ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: nuget-signed
        ${{ if ne(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: $(NuGetArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\$(NuGetArtifactName)

    - task: DownloadPipelineArtifact@2
      inputs:
        ${{ if eq(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: net6-pkg-signed
        ${{ if ne(variables['MicroBuildSignType'], 'Real') }}:
          artifactName: net6-pkg-unsigned
        downloadPath: $(System.DefaultWorkingDirectory)\installer-artifacts
        patterns: Microsoft.*.pkg

    - template: yaml-templates\install-microbuild-tooling.yaml
      parameters:
        condition: and(succeeded(), eq(variables['MicroBuildSignType'], 'Real'))

    - task: MSBuild@1
      displayName: msbuild Xamarin.Android.BootstrapTasks
      inputs:
        solution: Xamarin.Android.BootstrapTasks.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-bootstraptasks.binlog

    - task: MSBuild@1
      displayName: msbuild /t:Restore create-dotnet-msi.csproj
      inputs:
        solution: $(System.DefaultWorkingDirectory)\build-tools\create-dotnet-msi\create-dotnet-msi.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Restore /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\restore-create-msi.binlog

    - task: MSBuild@1
      displayName: msbuild /t:CreateWorkloadInstallers
      inputs:
        solution: Xamarin.Android.sln
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:CreateWorkloadInstallers /p:SignType=$(MicroBuildSignType) /bl:$(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\msbuild-workload.binlog

    - script: copy /Y $(System.DefaultWorkingDirectory)\bin\Build$(XA.Build.Configuration)\*.msi $(System.DefaultWorkingDirectory)\installer-artifacts
      displayName: copy .msi

    - template: upload-to-storage\win\v1.yml@yaml
      parameters:
        ArtifactsDirectory: $(System.DefaultWorkingDirectory)\installer-artifacts
        Azure.ContainerName: $(Azure.Container.Name)
        Azure.BlobPrefix: $(Build.DefinitionName)/public/net6/$(Build.BuildId)/$(Build.SourceBranchName)/$(Build.SourceVersion)
        GitHub.Context: .NET 6 Preview Installers

    - template: yaml-templates\remove-microbuild-tooling.yaml
      parameters:
        condition: and(succeededOrFailed(), eq(variables['MicroBuildSignType'], 'Real'))

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: build-tools\Xamarin.Android.Tools.BootstrapTasks\Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Build Results - .NET 6 Preview .msi

- stage: finalize_installers
  displayName: Finalize Installers
  dependsOn: mac_build
  condition: and(eq(dependencies.mac_build.result, 'Succeeded'), eq(variables['MicroBuildSignType'], 'Real'))
  jobs:
  # Check - "Xamarin.Android (Finalize Installers Notarize and Upload to Storage)"
  - job: notarize_pkg_upload_storage
    displayName: Notarize and Upload to Storage
    pool:
      name: $(VSEngMacBuildPool)
      demands:
      - agent.osversionfamily -equals 10.15
    timeoutInMinutes: 120
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    variables:
    - group: Xamarin Notarization
    steps:
    - checkout: self
      submodules: recursive

    - checkout: release_scripts
      clean: true

    - template: yaml-templates/use-dot-net.yaml
      parameters:
        version: $(DotNetCoreVersion)

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: $(InstallerArtifactName)
        downloadPath: $(System.DefaultWorkingDirectory)/storage-artifacts
        patterns: |
          xamarin.android*.pkg
          Xamarin.Android*.vsix
          updateinfo

    - powershell: |
        $pkg = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/storage-artifacts/*" -Include *.pkg -File
        if (![System.IO.File]::Exists($pkg)) {
            throw [System.IO.FileNotFoundException] "Pkg File not found in $(System.DefaultWorkingDirectory)/storage-artifacts"
        }
        Write-Host "##vso[task.setvariable variable=XA.Unsigned.Pkg]$pkg"
      displayName: set variable to pkg path

    - template: yaml-templates/install-microbuild-tooling.yaml

    - task: MSBuild@1
      displayName: msbuild /t:Restore create-pkg.proj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-pkg/create-pkg.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: /t:Restore /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/restore-create-pkg.binlog

    - task: MSBuild@1
      displayName: msbuild /t:SignFiles create-pkg.proj
      inputs:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/create-pkg/create-pkg.csproj
        configuration: $(XA.Build.Configuration)
        msbuildArguments: >-
          /t:SignFiles
          /p:SignType=$(MicroBuildSignType)
          /p:MicroBuildOverridePluginDirectory=$(Build.StagingDirectory)/MicroBuild/Plugins
          /p:OutputPath=$(System.DefaultWorkingDirectory)/storage-artifacts
          /bl:$(System.DefaultWorkingDirectory)/xamarin-android/bin/Build$(XA.Build.Configuration)/sign-pkg.binlog

    - script: >
        cd $(System.DefaultWorkingDirectory)/release-scripts &&
        pwsh notarize.ps1 -FolderForApps $(System.DefaultWorkingDirectory)/storage-artifacts
      failOnStderr: true
      displayName: Notarize PKG

    - script: xcrun stapler validate $(XA.Unsigned.Pkg)
      displayName: validate notarized pkg

    - template: upload-to-storage.yml@yaml
      parameters:
        BuildPackages: $(System.DefaultWorkingDirectory)/storage-artifacts
        AzureContainerName: $(Azure.Container.Name)
        AzureUploadLocation: $(Build.DefinitionName)/public/$(Build.BuildId)/$(Build.SourceBranchName)/$(Build.SourceVersion)
        SourceDirectory: $(System.DefaultWorkingDirectory)/xamarin-android

    - template: yaml-templates/remove-microbuild-tooling.yaml

    - template: yaml-templates/upload-results.yaml
      parameters:
        solution: $(System.DefaultWorkingDirectory)/xamarin-android/build-tools/Xamarin.Android.Tools.BootstrapTasks/Xamarin.Android.Tools.BootstrapTasks.csproj
        artifactName: Legacy Notarization Results - macOS

  # Check - "Xamarin.Android (Finalize Installers Queue Vsix Signing)"
  - job: queue_vsix_signing
    displayName: Queue Vsix Signing
    dependsOn: notarize_pkg_upload_storage
    pool: VSEng-MicroBuildVS2019
    timeoutInMinutes: 90
    cancelTimeoutInMinutes: 1
    workspace:
      clean: all
    steps:
      # Signing job is run here: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=13878
      # https://github.com/huserben/TfsExtensions/blob/master/BuildTasks/overview.md
    - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
      displayName: 'xamarin vsix codesign - run Azure DevOps job'
      inputs:
        buildDefinition: $(Signing.Job)
        useSameSourceVersion: false
        useSameBranch: false
        branchToUse: 'full-esrp-integration'
        waitForQueuedBuildsToFinish: true
        storeInEnvironmentVariable: true
        buildParameters: '{ "REPO": "$(Build.Repository.Name)", "COMMIT": "$(Build.SourceVersion)", "SIGN_TYPE": "Real", "GITHUB_CONTEXT": "$(GitHub.Artifacts.Context)", "BUILD_DEFINITIONNAME": "$(Build.DefinitionName)", "BUILD_ID": "$(Build.BuildId)", "BUILD_NUMBER": "$(Build.BuildNumber)", "BUILD_URI": "$(Build.BuildUri)", "ENABLE_JAR_SIGNING": "true" }'
        authenticationMethod: 'OAuth Token'
        password: $(System.AccessToken)     # Equivalent to the 'Allow scripts to access OAuth token option': https://stackoverflow.com/questions/52837980/how-to-allow-scripts-to-access-oauth-token-from-yaml-builds
