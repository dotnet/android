<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
      Each _MonoRuntime is placed in its own ItemGroup to keep it together with the associated PropertyGroup that
      creates properties which determine whether the runtime is to be only configured or also built. The distinction
      is necessary because of the cross compiled runtime requirements. Namely, the cross compiled ones need to have a C
      header with structure offsets generated and in order to do so, they need the runtime's config.h file. But if the
      runtime is not enabled by the user it would be a waste of time to build it when the configuration stage is all
      we need. The PropertyGroup is kept in this file so that it's clear what set of conditions triggers the given
      runtime's build
  -->
  <PropertyGroup>
    <_ArmeabiRuntimeConfigure Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':armeabi:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-armeabi:'))">true</_ArmeabiRuntimeConfigure>
    <_ArmeabiRuntimeBuild Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':armeabi:'))">true</_ArmeabiRuntimeBuild>
  </PropertyGroup>
  <ItemGroup>
    <_MonoRuntime Include="armeabi" Condition=" '$(_ArmeabiRuntimeConfigure)' == 'true' ">
      <Ar>$(_ArmAr)</Ar>
      <As>$(_ArmAs)</As>
      <Cc>$(_ArmCc)</Cc>
      <Cpp>$(_ArmCpp) $(_ArmCppFlags)</Cpp>
      <CFlags>$(_ArmCFlags) -march=armv5te $(_TargetCFlags)</CFlags>
      <Cxx>$(_ArmCxx)</Cxx>
      <CxxFlags>$(_ArmCxxFlags) -march=armv5te $(_TargetCxxFlags)</CxxFlags>
      <CxxCpp>$(_ArmCxxCpp) $(_ArmCppFlags)</CxxCpp>
      <Ld>$(_ArmLd)</Ld>
      <LdFlags>$(_ArmLdFlags)</LdFlags>
      <Objdump>$(_ArmObjdump)</Objdump>
      <RanLib>$(_ArmRanLib)</RanLib>
      <Strip>$(_ArmStrip)</Strip>
      <ConfigureFlags>--host=armv5-linux-androideabi $(_TargetConfigureFlags)</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>$(_ArmeabiRuntimeBuild)</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <!-- Cross compiler doesn't need this one, it uses the 'armeabi' build above. Thus no PropertyGroup here. -->
  <ItemGroup>
    <_MonoRuntime Include="armeabi-v7a" Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':armeabi-v7a:'))">
      <Ar>$(_ArmAr)</Ar>
      <As>$(_ArmAs)</As>
      <Cc>$(_ArmCc)</Cc>
      <Cpp>$(_ArmCpp) $(_ArmCppFlags)</Cpp>
      <CFlags>$(_ArmCFlags) -mtune=cortex-a8 -march=armv7-a -mfpu=vfp -mfloat-abi=softfp $(_TargetCFlags)</CFlags>
      <Cxx>$(_ArmCxx)</Cxx>
      <CxxFlags>$(_ArmCxxFlags) -mtune=cortex-a8 -march=armv7-a -mfpu=vfp -mfloat-abi=softfp $(_TargetCxxFlags) </CxxFlags>
      <CxxCpp>$(_ArmCxxCpp) $(_ArmCppFlags)</CxxCpp>
      <Ld>$(_ArmLd)</Ld>
      <LdFlags>$(_ArmLdFlags)</LdFlags>
      <Objdump>$(_ArmObjdump)</Objdump>
      <RanLib>$(_ArmRanLib)</RanLib>
      <Strip>$(_ArmStrip)</Strip>
      <ConfigureFlags>--host=armv5-linux-androideabi $(_TargetConfigureFlags)</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>true</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <PropertyGroup>
    <_Arm64RuntimeConfigure Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':arm64-v8a:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-arm64:'))">true</_Arm64RuntimeConfigure>
    <_Arm64RuntimeBuild Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':arm64-v8a:'))">true</_Arm64RuntimeBuild>
  </PropertyGroup>
  <ItemGroup>
    <_MonoRuntime Include="arm64-v8a" Condition=" '$(_Arm64RuntimeConfigure)' == 'true' ">
      <Ar>$(_Arm64Ar)</Ar>
      <As>$(_Arm64As)</As>
      <Cc>$(_Arm64Cc)</Cc>
      <Cpp>$(_Arm64Cpp) $(_Arm64CppFlags)</Cpp>
      <CFlags>$(_Arm64CFlags) $(_TargetCFlags)</CFlags>
      <Cxx>$(_Arm64Cxx)</Cxx>
      <CxxFlags>$(_Arm64CxxFlags) $(_TargetCxxFlags) </CxxFlags>
      <CxxCpp>$(_Arm64CxxCpp) $(_Arm64CppFlags)</CxxCpp>
      <Ld>$(_Arm64Ld)</Ld>
      <LdFlags>$(_Arm64LdFlags)</LdFlags>
      <Objdump>$(_Arm64Objdump)</Objdump>
      <RanLib>$(_Arm64RanLib)</RanLib>
      <Strip>$(_Arm64Strip)</Strip>
      <ConfigureFlags>--host=aarch64-linux-android $(_TargetConfigureFlags)</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>$(_Arm64RuntimeBuild)</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <PropertyGroup>
    <_X86RuntimeConfigure Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86:'))">true</_X86RuntimeConfigure>
    <_X86RuntimeBuild Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86:'))">true</_X86RuntimeBuild>
  </PropertyGroup>
  <ItemGroup>
    <_MonoRuntime Include="x86" Condition=" '$(_X86RuntimeConfigure)' == 'true' ">
      <Ar>$(_X86Ar)</Ar>
      <As>$(_X86As)</As>
      <Cc>$(_X86Cc)</Cc>
      <Cpp>$(_X86Cpp) $(_X86CppFlags)</Cpp>
      <CFlags>$(_X86CFlags) $(_TargetCFlags)</CFlags>
      <Cxx>$(_X86Cxx)</Cxx>
      <CxxFlags>$(_X86CxxFlags) $(_TargetCxxFlags) </CxxFlags>
      <CxxCpp>$(_X86CxxCpp) $(_X86CppFlags)</CxxCpp>
      <Ld>$(_X86Ld)</Ld>
      <LdFlags>$(_X86LdFlags)</LdFlags>
      <Objdump>$(_X86Objdump)</Objdump>
      <RanLib>$(_X86RanLib)</RanLib>
      <Strip>$(_X86Strip)</Strip>
      <ConfigureFlags>--host=i686-linux-android $(_TargetConfigureFlags)</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>$(_X86RuntimeBuild)</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <PropertyGroup>
    <_X8664RuntimeConfigure Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86_64:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86_64:'))">true</_X8664RuntimeConfigure>
    <_X8664RuntimeBuild Condition="$(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86_64:'))">true</_X8664RuntimeBuild>
  </PropertyGroup>
  <ItemGroup>
    <_MonoRuntime Include="x86_64" Condition=" '$(_X8664RuntimeConfigure)' == 'true' ">
      <Ar>$(_X86_64Ar)</Ar>
      <As>$(_X86_64As)</As>
      <Cc>$(_X86_64Cc)</Cc>
      <Cpp>$(_X86_64Cpp) $(_X86_64CppFlags)</Cpp>
      <CFlags>$(_X86_64CFlags) $(_TargetCFlags)</CFlags>
      <Cxx>$(_X86_64Cxx)</Cxx>
      <CxxFlags>$(_X86_64CxxFlags) $(_TargetCxxFlags) </CxxFlags>
      <CxxCpp>$(_X86_64CxxCpp) $(_X86_64CppFlags)</CxxCpp>
      <Ld>$(_X86_64Ld)</Ld>
      <LdFlags>$(_X86_64LdFlags)</LdFlags>
      <RanLib>$(_X86_64RanLib)</RanLib>
      <Objdump>$(_X86_64Objdump)</Objdump>
      <Strip>$(_X86_64Strip)</Strip>
      <ConfigureFlags>--host=x86_64-linux-android $(_TargetConfigureFlags)</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>$(_X8664RuntimeBuild)</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <ItemGroup>
    <_MonoRuntime Include="host-mxe-Win64" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win64:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win64:'))">
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-gcc</Cc>
      <Cpp></Cpp>
      <CFlags>$(_HostWin64CFlags)</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-g++</Cxx>
      <CxxFlags>$(_HostWin64CFlags)</CxxFlags>
      <CxxCpp></CxxCpp>
      <DllTool>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-dlltool</DllTool>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ld</Ld>
      <LdFlags></LdFlags>
      <Objdump>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-objdump</Objdump>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <ConfigureFlags>PATH="$PATH:$(AndroidMxeFullPath)\bin" --host=$(MingwCommandPrefix64) --target=$(MingwCommandPrefix64) --disable-boehm --enable-mcs-build=no --enable-nls=no --enable-maintainer-mode --with-monodroid --disable-llvm ac_cv_header_zlib_h=no ac_cv_search_dlopen=no</ConfigureFlags>
      <NativeLibraryExtension>dll</NativeLibraryExtension>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <OutputProfilerFilename></OutputProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>True</DoBuild>
    </_MonoRuntime>
    <_MonoRuntime Include="host-mxe-Win32" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win32:'))">
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-gcc</Cc>
      <Cpp></Cpp>
      <CFlags>$(_HostWin32CFlags)</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-g++</Cxx>
      <CxxFlags>$(_HostWin32CFlags)</CxxFlags>
      <CxxCpp></CxxCpp>
      <DllTool>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-dlltool</DllTool>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ld</Ld>
      <LdFlags></LdFlags>
      <Objdump>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-objdump</Objdump>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <ConfigureFlags>PATH="$PATH:$(AndroidMxeFullPath)\bin" --host=$(MingwCommandPrefix32) --target=$(MingwCommandPrefix32) --disable-boehm --enable-mcs-build=no --enable-nls=no --enable-maintainer-mode --with-monodroid --disable-llvm ac_cv_header_zlib_h=no ac_cv_search_dlopen=no</ConfigureFlags>
      <NativeLibraryExtension>dll</NativeLibraryExtension>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <OutputProfilerFilename></OutputProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>True</DoBuild>
    </_MonoRuntime>
    <_MonoRuntime Include="host-Darwin" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc)</Cc>
      <CFlags>$(_CommonCFlags) -mmacosx-version-min=10.9</CFlags>
      <Cxx>$(HostCxx)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags></CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ConfigureFlags>--enable-dynamic-btls --enable-maintainer-mode --without-ikvm-native --with-monodroid --with-mcs-docs=no --disable-mono-debugger --with-profile2=no --with-profile4=no --with-profile4_5=yes --disable-boehm --enable-nls=no --disable-iconv</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>dylib</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>True</DoBuild>
    </_MonoRuntime>
    <_MonoRuntime Include="host-Linux" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc)</Cc>
      <CFlags>$(_CommonCFlags)</CFlags>
      <Cxx>$(HostCxx)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags></CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ConfigureFlags>--enable-dynamic-btls --enable-maintainer-mode --without-ikvm-native --with-monodroid --with-mcs-docs=no --disable-mono-debugger --with-profile2=no --with-profile4=no --with-profile4_5=yes --disable-boehm --enable-nls=no --disable-iconv</ConfigureFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
      <DoBuild>True</DoBuild>
    </_MonoRuntime>
  </ItemGroup>

  <ItemGroup>
    <!-- LLVM

         Note: due to an xbuild bug we can't put property references inside item metadata that is to be used in the Target.Outputs attribute.
         In this case the affected metadata item is BuildDir. Once the bug is fixed, we should replace the hard-coded values in BuildDir
         metadata items with references to the appropriate $(_LlvmBuildDir*) properties. The properties in question are defined in the
         mono-runtimes.props file.
         At this moment the BuildDir item is treated as a *subdirectory* name and once the bug is fixed it will contain a full directory path - that
         means mono-rutime.targets which use BuildDir (_ConfigureLlvm, BuildLlvm and _InstallLlvm) must be updated accordingly.
    -->
    <_LlvmRuntime Include="llvm32" Condition=" '$(_LlvmNeeded)' != '' ">
      <BuildDir>build-32</BuildDir>
      <Prefix>$(_LlvmPrefix32)</Prefix>
      <ConfigureFlags>$(_LlvmConfigureFlags32)</ConfigureFlags>
      <ConfigureEnvironment></ConfigureEnvironment>
      <BuildEnvironment></BuildEnvironment>
      <ExeSuffix></ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvm64" Condition=" '$(_LlvmNeeded)' != '' And '$(_LlvmCanBuild64)' == 'yes' ">
      <BuildDir>build-64</BuildDir>
      <Prefix>$(_LlvmPrefix64)</Prefix>
      <ConfigureFlags>$(_LlvmConfigureFlags64)</ConfigureFlags>
      <ConfigureEnvironment></ConfigureEnvironment>
      <BuildEnvironment></BuildEnvironment>
      <ExeSuffix></ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvmwin32" Condition=" '$(_LlvmNeeded)' != '' And ($(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win32:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win32:'))) ">
      <BuildDir>build-win32</BuildDir>
      <Prefix>$(_LlvmPrefixWin32)</Prefix>
      <ConfigureFlags>$(_LlvmConfigureFlagsWin32)</ConfigureFlags>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin32)</ConfigureEnvironment>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath></InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvmwin64" Condition=" '$(_LlvmNeeded)' != '' And ($(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win64:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win64:'))) ">
      <BuildDir>build-win64</BuildDir>
      <Prefix>$(_LlvmPrefixWin64)</Prefix>
      <ConfigureFlags>$(_LlvmConfigureFlagsWin64)</ConfigureFlags>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin64)</ConfigureEnvironment>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallBinaries>false</InstallBinaries>
      <InstallPath></InstallPath>
    </_LlvmRuntime>
  </ItemGroup>

  <ItemGroup>
    <!-- cross compilers -->
    <_MonoCrossRuntime Include="cross-arm" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':armeabi:'))">
      <JitArch>armeabi</JitArch>
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc32)</Cc>
      <CFlags>$(_CrossCFlags)</CFlags>
      <Cxx>$(HostCxx32)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlags)</CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>armv5-none-linux-androideabi</TargetAbi>
      <ConfigureFlags>--target=armv5-linux-androideabi --cache-file=$(_CrossConfigureCachePrefix)arm.config.cache --with-cross-offsets=armv5-none-linux-androideabi.h $(_CrossConfigureFlags32) --with-llvm=$(_LlvmPrefix32)</ConfigureFlags>
      <ExeSuffix></ExeSuffix>
      <BuildEnvironment></BuildEnvironment>
      <ConfigureEnvironment></ConfigureEnvironment>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-arm</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm64" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':arm64:'))">
      <JitArch>arm64-v8a</JitArch>
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc)</Cc>
      <CFlags>$(_CrossCFlags)</CFlags>
      <Cxx>$(HostCxx)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlags)</CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>aarch64-v8a-linux-android</TargetAbi>
      <ConfigureFlags>--target=aarch64-v8a-linux-android --cache-file=$(_CrossConfigureCachePrefix)arm64.config.cache --with-cross-offsets=aarch64-v8a-linux-android.h $(_CrossConfigureFlags) --with-llvm=$(_CrossDefaultLlvmPrefix)</ConfigureFlags>
      <ExeSuffix></ExeSuffix>
      <BuildEnvironment></BuildEnvironment>
      <ConfigureEnvironment></ConfigureEnvironment>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-arm64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86:'))">
      <JitArch>x86</JitArch>
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc32)</Cc>
      <CFlags>$(_CrossCFlags)</CFlags>
      <Cxx>$(HostCxx32)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlags)</CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>i686-none-linux-android</TargetAbi>
      <ConfigureFlags>--target=i686-linux-android --cache-file=$(_CrossConfigureCachePrefix)x86.config.cache --with-cross-offsets=i686-none-linux-android.h $(_CrossConfigureFlags32)  --with-llvm=$(_LlvmPrefix32)</ConfigureFlags>
      <ExeSuffix></ExeSuffix>
      <BuildEnvironment></BuildEnvironment>
      <ConfigureEnvironment></ConfigureEnvironment>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-x86</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86_64" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86_64:'))">
      <JitArch>x86_64</JitArch>
      <Ar>ar</Ar>
      <As>as</As>
      <Cc>$(HostCc)</Cc>
      <CFlags>$(_CrossCFlags)</CFlags>
      <Cxx>$(HostCxx)</Cxx>
      <CxxCpp>cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlags)</CxxFlags>
      <Ld>ld</Ld>
      <LdFlags></LdFlags>
      <RanLib>ranlib</RanLib>
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>x86_64-none-linux-android</TargetAbi>
      <ConfigureFlags>--target=x86_64-linux-android --cache-file=$(_CrossConfigureCachePrefix)x86_64.config.cache --with-cross-offsets=x86_64-none-linux-android.h $(_CrossConfigureFlags)  --with-llvm=$(_CrossDefaultLlvmPrefix)</ConfigureFlags>
      <ExeSuffix></ExeSuffix>
      <BuildEnvironment></BuildEnvironment>
      <ConfigureEnvironment></ConfigureEnvironment>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-x86_64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-armeabi:'))">
      <JitArch>armeabi</JitArch>
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-gcc</Cc>
      <CFlags>$(_CrossCFlagsWin) -static -static-libgcc</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-g++</Cxx>
      <CxxCpp>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlagsWin) -static -static-libgcc -static-libstdc++</CxxFlags>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ld</Ld>
      <LdFlags>-static -static-libgcc</LdFlags>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>armv5-none-linux-androideabi</TargetAbi>
      <ConfigureFlags>--target=armv5-linux-androideabi --host="$(_CrossConfigureBuildHostWin32)" --cache-file=$(_CrossConfigureCachePrefix)arm-win.config.cache --with-cross-offsets=armv5-none-linux-androideabi.h $(_CrossConfigureFlags32) --with-llvm=$(_LlvmPrefixWin32)</ConfigureFlags>
      <ExeSuffix>.exe</ExeSuffix>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin32)</ConfigureEnvironment>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-arm</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm64-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-arm64:'))">
      <JitArch>arm64-v8a</JitArch>
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-gcc</Cc>
      <CFlags>$(_CrossCFlagsWin) -static -static-libgcc</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-g++</Cxx>
      <CxxCpp>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlagsWin) -static -static-libgcc</CxxFlags>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ld</Ld>
      <LdFlags>-static -static-libgcc -static-libstdc++</LdFlags>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>aarch64-v8a-linux-android</TargetAbi>
      <ConfigureFlags>--target=aarch64-v8a-linux-android --host="$(_CrossConfigureBuildHostWin64)" --cache-file=$(_CrossConfigureCachePrefix)arm64-win.config.cache --with-cross-offsets=aarch64-v8a-linux-android.h $(_CrossConfigureFlags) --with-llvm=$(_LlvmPrefixWin64)</ConfigureFlags>
      <ExeSuffix>.exe</ExeSuffix>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin64)</ConfigureEnvironment>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-arm64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86:'))">
      <JitArch>x86</JitArch>
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-gcc</Cc>
      <CFlags>$(_CrossCFlagsWin) -static -static-libgcc</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-g++</Cxx>
      <CxxCpp>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlagsWin) -static -static-libgcc</CxxFlags>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ld</Ld>
      <LdFlags>-static -static-libgcc -static-libstdc++</LdFlags>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>i686-none-linux-android</TargetAbi>
      <ConfigureFlags>--target=i686-linux-android --host="$(_CrossConfigureBuildHostWin32)" --cache-file=$(_CrossConfigureCachePrefix)x86-win.config.cache --with-cross-offsets=i686-none-linux-android.h $(_CrossConfigureFlags32) --with-llvm=$(_LlvmPrefixWin32)</ConfigureFlags>
      <ExeSuffix>.exe</ExeSuffix>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin32)</ConfigureEnvironment>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-x86</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86_64-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86_64:'))">
      <JitArch>x86_64</JitArch>
      <Ar>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ar</Ar>
      <As>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-as</As>
      <Cc>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-gcc</Cc>
      <CFlags>$(_CrossCFlagsWin) -static -static-libgcc</CFlags>
      <Cxx>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-g++</Cxx>
      <CxxCpp>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-cpp</CxxCpp>
      <CxxFlags>$(_CrossCXXFlagsWin) -static -static-libgcc</CxxFlags>
      <Ld>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ld</Ld>
      <LdFlags>-static -static-libgcc -static-libstdc++</LdFlags>
      <RanLib>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-ranlib</RanLib>
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <StripFlags>-S</StripFlags>
      <TargetAbi>x86_64-none-linux-android</TargetAbi>
      <ConfigureFlags>--target=x86_64-linux-android --host="$(_CrossConfigureBuildHostWin64)" --cache-file=$(_CrossConfigureCachePrefix)x86_64-win.config.cache --with-cross-offsets=x86_64-none-linux-android.h $(_CrossConfigureFlags) --with-llvm=$(_LlvmPrefixWin64)</ConfigureFlags>
      <ExeSuffix>.exe</ExeSuffix>
      <BuildEnvironment>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</BuildEnvironment>
      <ConfigureEnvironment>$(_LlvmConfigureEnvironmentWin32)</ConfigureEnvironment>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-x86_64</CrossMonoName>
    </_MonoCrossRuntime>
  </ItemGroup>
</Project>
