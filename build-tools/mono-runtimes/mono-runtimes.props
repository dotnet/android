<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <_CommonCFlags Condition=" '$(Configuration)' == 'Debug' ">-ggdb3 -O0 -fno-omit-frame-pointer</_CommonCFlags>
    <_CommonCFlags Condition=" '$(Configuration)' == 'Release' ">-g -O2</_CommonCFlags>
    <_HostWinCFlags Condition=" '$(Configuration)' == 'Debug' ">-ggdb3 -O0 -DXAMARIN_PRODUCT_VERSION=0</_HostWinCFlags>
    <_HostWinCFlags Condition=" '$(Configuration)' == 'Release' ">-g -O2 -DXAMARIN_PRODUCT_VERSION=0</_HostWinCFlags>
  </PropertyGroup>

  <!-- LLVM+cross common -->
  <PropertyGroup>
    <_CrossOutputDirTop>$([System.IO.Path]::GetFullPath ('$(IntermediateOutputPath)'))</_CrossOutputDirTop>
    <_MingwCc32>$(MingwCommandPrefix32)-gcc</_MingwCc32>
    <_MingwCxx32>$(MingwCommandPrefix32)-g++</_MingwCxx32>
    <_MingwCc64>$(MingwCommandPrefix64)-gcc</_MingwCc64>
    <_MingwCxx64>$(MingwCommandPrefix64)-g++</_MingwCxx64>
    <_MingwTriplet32>i686-w64-mingw32$(_MingwPrefixTail)</_MingwTriplet32>
    <_MingwTriplet64>x86_64-w64-mingw32$(_MingwPrefixTail)</_MingwTriplet64>

    <!-- LLVM -->
    <_LlvmNeeded Condition=" '$(AndroidSupportedTargetAotAbis)' != '' ">yes</_LlvmNeeded>
    <_LlvmCanBuild64 Condition=" '$(HostBits)' == '64' ">yes</_LlvmCanBuild64>
    <_LlvmHaveWindowsAOT Condition=" $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-armeabi:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-arm64:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86_64:'))">yes</_LlvmHaveWindowsAOT>
    <_LlvmNeededWindows32 Condition=" '$(_LlvmNeeded)' != '' And '$(_LlvmHaveWindowsAOT)' == 'yes' And ($(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win32:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))) ">yes</_LlvmNeededWindows32>
    <_LlvmNeededWindows64 Condition=" '$(_LlvmNeeded)' != '' And '$(_LlvmHaveWindowsAOT)' == 'yes' And '$(_LlvmCanBuild64)' == 'yes' And ($(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win64:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))) ">yes</_LlvmNeededWindows64>
    <_LlvmOutputDirTop>$(_CrossOutputDirTop)\llvm</_LlvmOutputDirTop>

    <_LlvmBuildDir32>$(_LlvmOutputDirTop)\build-32</_LlvmBuildDir32>
    <_LlvmBuildDir64>$(_LlvmOutputDirTop)\build-64</_LlvmBuildDir64>
    <_LlvmPrefix32>$(_LlvmOutputDirTop)\installed-32\usr</_LlvmPrefix32>
    <_LlvmPrefix64>$(_LlvmOutputDirTop)\installed-64\usr</_LlvmPrefix64>

    <_LlvmBuildDirWin32>$(_LlvmOutputDirTop)\build-win32</_LlvmBuildDirWin32>
    <_LlvmBuildDirWin64>$(_LlvmOutputDirTop)\build-win64</_LlvmBuildDirWin64>
    <_LlvmPrefixWin32>$(_LlvmOutputDirTop)\installed-win32\usr</_LlvmPrefixWin32>
    <_LlvmPrefixWin64>$(_LlvmOutputDirTop)\installed-win64\usr</_LlvmPrefixWin64>

    <_LlvmCommonConfigureFlags>--enable-optimized --enable-assertions=no --enable-targets="arm,aarch64,x86"</_LlvmCommonConfigureFlags>
    <_LlvmCommonConfigureFlags32>$(_LlvmCommonConfigureFlags) --prefix=$(_LlvmPrefix32) --cache-file=$(_CrossOutputDirTop)\llvm32.config.cache CC="$(HostCc32)" CXX="$(HostCxx32)"</_LlvmCommonConfigureFlags32>
    <_LlvmCommonConfigureFlags64>$(_LlvmCommonConfigureFlags) --prefix=$(_LlvmPrefix64) --cache-file=$(_CrossOutputDirTop)\llvm64.config.cache CC="$(HostCc64)" CXX="$(HostCxx64)"</_LlvmCommonConfigureFlags64>

    <_LlvmCommonConfigureFlagsWin>$(_LlvmCommonConfigureFlags) --disable-pthreads --disable-zlib</_LlvmCommonConfigureFlagsWin>
    <_LlvmCommonConfigureFlagsWin32>$(_LlvmCommonConfigureFlagsWin) --prefix=$(_LlvmPrefixWin32) --with-llvm=$(_LlvmPrefix32) --cache-file=$(_CrossOutputDirTop)\llvm-win32.config.cache CC="$(_MingwCc32)" CXX="$(_MingwCxx32)"</_LlvmCommonConfigureFlagsWin32>
    <_LlvmCommonConfigureFlagsWin64>$(_LlvmCommonConfigureFlagsWin) --prefix=$(_LlvmPrefixWin64) --with-llvm=$(_LlvmPrefix64) --cache-file=$(_CrossOutputDirTop)\llvm-win64.config.cache CC="$(_MingwCc64)" CXX="$(_MingwCxx64)"</_LlvmCommonConfigureFlagsWin64>

    <!-- Cross compilers -->
    <_AotOffsetsDumperName>MonoAotOffsetsDumper.exe</_AotOffsetsDumperName>
    <_AotOffsetsDumperSourceDir>$(MonoSourceFullPath)\tools\offsets-tool</_AotOffsetsDumperSourceDir>
    <_CrossDefaultLlvmPrefix Condition=" '$(_LlvmCanBuild64)' == 'yes' ">$(_LlvmPrefix64)</_CrossDefaultLlvmPrefix>
    <_CrossDefaultLlvmPrefix Condition=" '$(_LlvmCanBuild64)' != 'yes' ">$(_LlvmPrefix32)</_CrossDefaultLlvmPrefix>
    <_CrossOutputPrefix>$(_CrossOutputDirTop)\cross-</_CrossOutputPrefix>
    <_CrossConfigureCachePrefix>$(_CrossOutputDirTop)cross-</_CrossConfigureCachePrefix>
    <_CrossDebugCFlags Condition=" '$(Configuration)' == 'Debug'">-DDEBUG_CROSS</_CrossDebugCFlags>
    <_CrossCommonCFlags>$(_CrossDebugCFlags) -DXAMARIN_PRODUCT_VERSION=0</_CrossCommonCFlags>
    <_CrossCommonCXXFlags>$(_CrossCommonCFlags)</_CrossCommonCXXFlags>
    <_CrossCommonConfigureFlags>--disable-boehm --enable-mcs-build=no --enable-nls=no --enable-maintainer-mode --enable-extension-module --with-tls=pthread</_CrossCommonConfigureFlags>
  </PropertyGroup>

  <!-- LLVM+cross OSX -->
  <PropertyGroup Condition=" '$(HostOS)' == 'Darwin' ">
    <_OSXMinVersion>-mmacosx-version-min=10.9</_OSXMinVersion>
    <_CrossConfigureBuildHost32>$(HostTriplet32)</_CrossConfigureBuildHost32>
    <_CrossConfigureBuildHost64>$(HostTriplet64)</_CrossConfigureBuildHost64>
    <_CrossConfigureBuildHostWin32>$(_MingwTriplet32)</_CrossConfigureBuildHostWin32>
    <_CrossConfigureBuildHostWin64>$(_MingwTriplet64)</_CrossConfigureBuildHostWin64>
    <_CrossOSXCommonCompilerFlags>$(_OSXMinVersion)</_CrossOSXCommonCompilerFlags>
    <_CrossCFlags>$(_CrossCommonCFlags) $(_CrossOSXCommonCompilerFlags)</_CrossCFlags>
    <_CrossCFlagsWin>$(_CrossCommonCFlags)</_CrossCFlagsWin>
    <_CrossCXXFlags>$(_CrossCommonCXXFlags) $(_CrossOSXCommonCompilerFlags) -stdlib=libc++</_CrossCXXFlags>
    <_CrossCXXFlagsWin>$(_CrossCommonCXXFlags)</_CrossCXXFlagsWin>
    <_CrossConfigureFlags32>--build=$(_CrossConfigureBuildHost32) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags32>
    <_CrossConfigureFlags64>--build=$(_CrossConfigureBuildHost64) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags64>
    <_CrossConfigureFlags>$(_CrossConfigureFlags64)</_CrossConfigureFlags>

    <_LlvmStdlib>-stdlib=libc++</_LlvmStdlib>
    <_LlvmExtraConfigureFlags>--enable-libcpp</_LlvmExtraConfigureFlags>
    <_LlvmOsxCommonConfigureFlags>$(_LlvmExtraConfigureFlags) CXXFLAGS="$(_LlvmStdlib) $(_OSXMinVersion)" LDFLAGS="$(_OSXMinVersion)"</_LlvmOsxCommonConfigureFlags>
    <_LlvmConfigureFlags32>--build="$(_CrossConfigureBuildHost32)" $(_LlvmOsxCommonConfigureFlags) $(_LlvmCommonConfigureFlags32)</_LlvmConfigureFlags32>
    <_LlvmConfigureFlags64>--build="$(_CrossConfigureBuildHost64)" $(_LlvmOsxCommonConfigureFlags) $(_LlvmCommonConfigureFlags64)</_LlvmConfigureFlags64>
    <_LlvmConfigureEnvironmentWin32>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</_LlvmConfigureEnvironmentWin32>
    <_LlvmConfigureEnvironmentWin64>PATH="$(AndroidMxeFullPath)\bin:$(PATH)"</_LlvmConfigureEnvironmentWin64>
    <_LlvmConfigureFlagsWin32>--host="$(_CrossConfigureBuildHostWin32)" $(_LlvmCommonConfigureFlagsWin32)</_LlvmConfigureFlagsWin32>
    <_LlvmConfigureFlagsWin64>--host="$(_CrossConfigureBuildHostWin64)" $(_LlvmCommonConfigureFlagsWin64)</_LlvmConfigureFlagsWin64>
  </PropertyGroup>

  <!-- LLVM+cross Linux -->
  <PropertyGroup Condition=" '$(HostOS)' == 'Linux' ">
    <_CrossConfigureBuildHost>$(HostTriplet)</_CrossConfigureBuildHost>
    <_CrossConfigureBuildHostWin32>$(_MingwTriplet32)</_CrossConfigureBuildHostWin32>
    <_CrossConfigureBuildHostWin64>$(_MingwTriplet64)</_CrossConfigureBuildHostWin64>

    <_CrossCFlags>$(_CrossCommonCFlags)</_CrossCFlags>
    <_CrossCFlagsWin>$(_CrossCFlags)</_CrossCFlagsWin>
    <_CrossCXXFlags>$(_CrossCommonCXXFlags)</_CrossCXXFlags>
    <_CrossCXXFlagsWin>$(_CrossCXXFlags)</_CrossCXXFlagsWin>
    <_CrossConfigureFlags32>--build=$(_CrossConfigureBuildHost32) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags32>
    <_CrossConfigureFlags64>--build=$(_CrossConfigureBuildHost64) $(_CrossCommonConfigureFlags)</_CrossConfigureFlags64>
    <_CrossConfigureFlags Condition=" '$(HostBits)' == '64' " >$(_CrossConfigureFlags64)</_CrossConfigureFlags>
    <_CrossConfigureFlags Condition=" '$(HostBits)' == '32' " >$(_CrossConfigureFlags32)</_CrossConfigureFlags>

    <_LlvmConfigureFlags32>--build="$(_CrossConfigureBuildHost)" $(_LlvmCommonConfigureFlags32)</_LlvmConfigureFlags32>
    <_LlvmConfigureFlags64>--build="$(_CrossConfigureBuildHost)" $(_LlvmCommonConfigureFlags64)</_LlvmConfigureFlags64>
    <_LlvmConfigureFlagsWin32>--host="$(_CrossConfigureBuildHostWin32)" $(_LlvmCommonConfigureFlagsWin32)</_LlvmConfigureFlagsWin32>
    <_LlvmConfigureFlagsWin64>--host="$(_CrossConfigureBuildHostWin64)" $(_LlvmCommonConfigureFlagsWin64)</_LlvmConfigureFlagsWin64>
  </PropertyGroup>

  <!-- Mono runtimes settings -->
  <PropertyGroup>
    <_HostWin64CFlags>$(_HostWinCFlags)</_HostWin64CFlags>
  </PropertyGroup>
</Project>
