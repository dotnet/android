//
// Generate constants that need to be shared between the C++ and the assembler sides
//
// Files are generated in the current directory
//
// Compile with:
//
//   c++ -std=c++20 generate-marshaling-data.cc -o generate-marshaling-data
//
#include <iostream>
#include <filesystem>
#include <fstream>
#include <stdexcept>
#include <string>

#define __FOR_GENERATOR_ONLY
#include "xamarin-app-marshaling-private.hh"
#include "../../../external/magic_enum/include/magic_enum.hpp"

class invalid_operation_error : public std::runtime_error
{
public:
	explicit invalid_operation_error (const std::string& what_arg)
		: runtime_error (what_arg)
	{}

	explicit invalid_operation_error (const char* what_arg)
		: runtime_error (what_arg)
	{}
};

constexpr char marshal_types_basename[] = "marshal-types";
constexpr char generated_subdir_name[] = "generated";

namespace fs = std::filesystem;

static void output_header (std::ofstream &output)
{
	output << "/*\n"
	       << " * Autogenerated by Xamarin.Android using src/monodroid/jni/generate-marshaling-data\n"
	       << " * Do not edit\n"
	       << " */\n\n";
}

static fs::path get_output_file_path (std::string const& dir_name, std::string const& file_name, std::string const& file_extension)
{
	fs::path fpath { dir_name };

	if (!fs::exists (fpath)) {
		fs::create_directories (fpath);
	} else if (!fs::is_directory (fpath)) {
		std::string message { "Filesystem entry '" + fpath.make_preferred ().string () + "' already exists and is not a directory." };
		throw invalid_operation_error (message);
	}

	fpath /= file_name + file_extension;

	return fpath;
}

static void generate_marshal_type_names_for_csharp (std::string const& extension)
{
	fs::path fpath = get_output_file_path (generated_subdir_name, marshal_types_basename, extension);
	std::ofstream output { fpath };

	output_header (output);

	output << "namespace Xamarin.Android.Build.Tasks\n"
	       << "{\n"
	       << "\tstatic class JniMarshalingAssemblerUnboxMethodNames\n"
	       << "\t{\n";

	auto lowercase_string = [](std::string& s) {
		std::transform (
			s.begin (),
			s.end (),
			s.begin (),
			[](unsigned char c) { return std::tolower(c); }
		);

		return s;
	};

	for (auto type : magic_enum::enum_entries<xamarin::android::internal::MarshalingTypes> ()) {
		std::string type_name { type.second };
		output << "\t\tpublic const string " << type_name << " = \"monodroid_unbox_value_" << lowercase_string (type_name) << "\";\n";
	}

	output << "\t}\n"
	       << "}\n\n";
}

int main ()
{
	generate_marshal_type_names_for_csharp (".cs");
	return 0;
}
