<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <_MonoBcl Include="bcl" />
  </ItemGroup>

  <PropertyGroup>
    <_NDKToolchainArch Condition=" '$(HostOS)' == 'Linux' ">linux-x86_64</_NDKToolchainArch>
    <_NDKToolchainArch Condition=" '$(HostOS)' == 'Darwin' ">darwin-x86_64</_NDKToolchainArch>
    <_NDKToolchainArch Condition=" '$(HostOS)' == 'Windows' ">windows</_NDKToolchainArch>
    <_NDKToolchainPrefix>$(AndroidNdkFullPath)\toolchains\llvm\prebuilt\$(_NDKToolchainArch)</_NDKToolchainPrefix>
  </PropertyGroup>

  <ItemGroup>
    <_MonoRuntime Include="armeabi-v7a" Condition=" $(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':armeabi-v7a:')) ">
      <Strip>$(_NDKToolchainPrefix)\bin\arm-linux-androideabi-strip</Strip>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputAotProfilerFilename>libmono-profiler-aot</OutputAotProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
    <_MonoRuntime Include="arm64-v8a" Condition=" $(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':arm64-v8a:')) ">
      <Strip>$(_NDKToolchainPrefix)\bin\aarch64-linux-android-strip</Strip>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputAotProfilerFilename>libmono-profiler-aot</OutputAotProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
    <_MonoRuntime Include="x86" Condition=" $(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86:')) ">
      <Strip>$(_NDKToolchainPrefix)\bin\i686-linux-android-strip</Strip>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputAotProfilerFilename>libmono-profiler-aot</OutputAotProfilerFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
    <_MonoRuntime Include="x86_64" Condition=" $(AndroidSupportedTargetJitAbisForConditionalChecks.Contains (':x86_64:')) ">
      <Strip>$(_NDKToolchainPrefix)\bin\x86_64-linux-android-strip</Strip>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension>so</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputAotProfilerFilename>libmono-profiler-aot</OutputAotProfilerFilename>
      <OutputMonoBtlsFilename>libmono-btls-shared</OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
  </ItemGroup>

  <PropertyGroup Condition=" '$(HostOS)' == 'Linux' ">
    <CanStripWin32DLL>False</CanStripWin32DLL>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(HostOS)' != 'Linux' ">
    <CanStripWin32DLL>True</CanStripWin32DLL>
  </PropertyGroup>

  <ItemGroup>
    <_MonoRuntime Include="host-mxe-Win64" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win64:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win64:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <NativeLibraryPrefix Condition=" '$(HostOS)' == 'Darwin' Or '$(HostOS)' == 'Linux' ">..\bin\</NativeLibraryPrefix>
      <NativeLibraryExtension>dll</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <OutputProfilerFilename></OutputProfilerFilename>
      <OutputAotProfilerFilename></OutputAotProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
    <_MonoRuntime Include="host-mxe-Win32" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':mxe-Win32:')) Or $(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':linux-Win32:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <NativeLibraryPrefix Condition=" '$(HostOS)' == 'Darwin' Or '$(HostOS)' == 'Linux' ">..\bin\</NativeLibraryPrefix>
      <NativeLibraryExtension>dll</NativeLibraryExtension>
      <CanStripNativeLibrary>$(CanStripWin32DLL)</CanStripNativeLibrary>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <OutputProfilerFilename></OutputProfilerFilename>
      <OutputAotProfilerFilename></OutputAotProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
    <_MonoRuntime Include="host-$(HostOS)" Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':$(HostOS):')) And ( '$(HostOS)' == 'Darwin' Or '$(HostOS)' == 'Linux' )">
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <OutputRuntimeFilename>libmonosgen-2.0</OutputRuntimeFilename>
      <NativeLibraryExtension Condition=" '$(HostOS)' == 'Darwin' ">dylib</NativeLibraryExtension>
      <NativeLibraryExtension Condition=" '$(HostOS)' == 'Linux' ">so</NativeLibraryExtension>
      <CanStripNativeLibrary>True</CanStripNativeLibrary>
      <OutputProfilerFilename>libmono-profiler-log</OutputProfilerFilename>
      <OutputAotProfilerFilename>libmono-profiler-aot</OutputAotProfilerFilename>
      <OutputMonoBtlsFilename></OutputMonoBtlsFilename>
      <OutputMonoPosixHelperFilename>libMonoPosixHelper</OutputMonoPosixHelperFilename>
    </_MonoRuntime>
  </ItemGroup>

  <ItemGroup>
    <!-- LLVM -->
    <_LlvmRuntime Include="llvm32" Condition=" ($(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':armeabi-v7a:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86:'))) ">
      <ExeSuffix></ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvm64" Condition=" ($(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':arm64:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86_64:'))) And '$(HostBits)' == '64' ">
      <ExeSuffix></ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvmwin32" Condition=" ($(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-armeabi-v7a:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86:'))) ">
      <ExeSuffix>.exe</ExeSuffix>
      <InstallBinaries>true</InstallBinaries>
      <InstallPath></InstallPath>
    </_LlvmRuntime>

    <_LlvmRuntime Include="llvmwin64" Condition=" ($(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-arm64:')) Or $(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86_64:'))) And '$(HostBits)' == '64' ">
      <ExeSuffix>.exe</ExeSuffix>
      <InstallBinaries>false</InstallBinaries>
      <InstallPath></InstallPath>
    </_LlvmRuntime>
  </ItemGroup>

  <ItemGroup>
    <!-- cross compilers -->
    <_MonoCrossRuntime Include="cross-arm" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':armeabi-v7a:'))">
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ExePrefix>armv7-linux-android-</ExePrefix>
      <ExeSuffix></ExeSuffix>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-arm</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm64" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':arm64:'))">
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ExePrefix>aarch64-v8a-linux-android-</ExePrefix>
      <ExeSuffix></ExeSuffix>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-arm64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86:'))">
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ExePrefix>i686-linux-android-</ExePrefix>
      <ExeSuffix></ExeSuffix>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-x86</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86_64" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':x86_64:'))">
      <Strip>strip</Strip>
      <StripFlags>-S</StripFlags>
      <ExePrefix>x86_64-linux-android-</ExePrefix>
      <ExeSuffix></ExeSuffix>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Darwin:'))">Darwin/</InstallPath>
      <InstallPath Condition="$(AndroidSupportedHostJitAbisForConditionalChecks.Contains (':Linux:'))">Linux/</InstallPath>
      <CrossMonoName>cross-x86_64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-armeabi-v7a:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <StripFlags></StripFlags>
      <ExePrefix>armv7-linux-android-</ExePrefix>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-arm</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-arm64-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-arm64:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <StripFlags></StripFlags>
      <ExePrefix>aarch64-v8a-linux-android-</ExePrefix>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-arm64</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix32)-strip</Strip>
      <StripFlags></StripFlags>
      <ExePrefix>i686-linux-android-</ExePrefix>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-x86</CrossMonoName>
    </_MonoCrossRuntime>

    <_MonoCrossRuntime Include="cross-x86_64-win" Condition="$(AndroidSupportedTargetAotAbisForConditionalChecks.Contains (':win-x86_64:'))">
      <Strip>$(AndroidMxeFullPath)\bin\$(MingwCommandPrefix64)-strip</Strip>
      <StripFlags></StripFlags>
      <ExePrefix>x86_64-linux-android-</ExePrefix>
      <ExeSuffix>.exe</ExeSuffix>
      <InstallPath></InstallPath>
      <CrossMonoName>cross-x86_64</CrossMonoName>
    </_MonoCrossRuntime>
  </ItemGroup>
</Project>
