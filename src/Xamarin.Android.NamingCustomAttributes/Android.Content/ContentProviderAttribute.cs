//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'manifest-attribute-codegen'.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;

namespace Android.Content;

[Serializable]
[AttributeUsage (AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public partial class ContentProviderAttribute : Attribute, Java.Interop.IJniNameProviderAttribute {
	public string[] Authorities { get; private set; }

	public bool DirectBootAware { get; set; }

	public bool Enabled { get; set; }

	public bool Exported { get; set; }

	public bool GrantUriPermissions { get; set; }

	public string? Icon { get; set; }

	public int InitOrder { get; set; }

	public string? Label { get; set; }

	public bool MultiProcess { get; set; }

	public string? Name { get; set; }

	public string? Permission { get; set; }

	public string? Process { get; set; }

	public string? ReadPermission { get; set; }

	public string? RoundIcon { get; set; }

	public bool Syncable { get; set; }

	public string? WritePermission { get; set; }

#if XABT_MANIFEST_EXTENSIONS
	static Xamarin.Android.Manifest.ManifestDocumentElement<ContentProviderAttribute> mapping = new ("provider");

	static ContentProviderAttribute ()
	{
		mapping.Add (
			member: "DirectBootAware",
			attributeName: "directBootAware",
			getter: self => self.DirectBootAware,
			setter: (self, value) => self.DirectBootAware = (bool) value
		);
		mapping.Add (
			member: "Enabled",
			attributeName: "enabled",
			getter: self => self.Enabled,
			setter: (self, value) => self.Enabled = (bool) value
		);
		mapping.Add (
			member: "Exported",
			attributeName: "exported",
			getter: self => self.Exported,
			setter: (self, value) => self.Exported = (bool) value
		);
		mapping.Add (
			member: "GrantUriPermissions",
			attributeName: "grantUriPermissions",
			getter: self => self.GrantUriPermissions,
			setter: (self, value) => self.GrantUriPermissions = (bool) value
		);
		mapping.Add (
			member: "Icon",
			attributeName: "icon",
			getter: self => self.Icon,
			setter: (self, value) => self.Icon = (string?) value
		);
		mapping.Add (
			member: "InitOrder",
			attributeName: "initOrder",
			getter: self => self.InitOrder,
			setter: (self, value) => self.InitOrder = (int) value
		);
		mapping.Add (
			member: "Label",
			attributeName: "label",
			getter: self => self.Label,
			setter: (self, value) => self.Label = (string?) value
		);
		mapping.Add (
			member: "MultiProcess",
			attributeName: "multiprocess",
			getter: self => self.MultiProcess,
			setter: (self, value) => self.MultiProcess = (bool) value
		);
		mapping.Add (
			member: "Name",
			attributeName: "name",
			getter: self => self.Name,
			setter: (self, value) => self.Name = (string?) value
		);
		mapping.Add (
			member: "Permission",
			attributeName: "permission",
			getter: self => self.Permission,
			setter: (self, value) => self.Permission = (string?) value
		);
		mapping.Add (
			member: "Process",
			attributeName: "process",
			getter: self => self.Process,
			setter: (self, value) => self.Process = (string?) value
		);
		mapping.Add (
			member: "ReadPermission",
			attributeName: "readPermission",
			getter: self => self.ReadPermission,
			setter: (self, value) => self.ReadPermission = (string?) value
		);
		mapping.Add (
			member: "RoundIcon",
			attributeName: "roundIcon",
			getter: self => self.RoundIcon,
			setter: (self, value) => self.RoundIcon = (string?) value
		);
		mapping.Add (
			member: "Syncable",
			attributeName: "syncable",
			getter: self => self.Syncable,
			setter: (self, value) => self.Syncable = (bool) value
		);
		mapping.Add (
			member: "WritePermission",
			attributeName: "writePermission",
			getter: self => self.WritePermission,
			setter: (self, value) => self.WritePermission = (string?) value
		);

		AddManualMapping ();
	}

	static partial void AddManualMapping ();
#endif // XABT_MANIFEST_EXTENSIONS
}
