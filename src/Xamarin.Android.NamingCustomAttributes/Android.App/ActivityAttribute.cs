//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by 'manifest-attribute-codegen'.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;

namespace Android.App;

[Serializable]
[AttributeUsage (AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
public sealed partial class ActivityAttribute : Attribute, Java.Interop.IJniNameProviderAttribute {
	public ActivityAttribute ()
	{
	}

	public bool AllowEmbedded { get; set; }

	public bool AllowTaskReparenting { get; set; }

	public bool AlwaysRetainTaskState { get; set; }

	public bool AutoRemoveFromRecents { get; set; }

	public string? Banner { get; set; }

	public bool CanDisplayOnRemoteDevices { get; set; }

	public bool ClearTaskOnLaunch { get; set; }

	public string? ColorMode { get; set; }

	public Android.Content.PM.ConfigChanges ConfigurationChanges { get; set; }

	public string? Description { get; set; }

	public bool DirectBootAware { get; set; }

	public Android.Content.PM.DocumentLaunchMode DocumentLaunchMode { get; set; }

	public bool Enabled { get; set; }

	public bool EnableOnBackInvokedCallback { get; set; }

	public string? EnableVrMode { get; set; }

	public bool ExcludeFromRecents { get; set; }

	public bool Exported { get; set; }

	public bool FinishOnCloseSystemDialogs { get; set; }

	public bool FinishOnTaskLaunch { get; set; }

	public bool HardwareAccelerated { get; set; }

	public string? Icon { get; set; }

	public bool Immersive { get; set; }

	public string? Label { get; set; }

	public Android.Content.PM.LaunchMode LaunchMode { get; set; }

	public string? LockTaskMode { get; set; }

	public string? Logo { get; set; }

	public float MaxAspectRatio { get; set; }

	public int MaxRecents { get; set; }

	public bool MultiProcess { get; set; }

	public string? Name { get; set; }

	public bool NoHistory { get; set; }

	public Type? ParentActivity { get; set; }

	public string? Permission { get; set; }

	public Android.Content.PM.ActivityPersistableMode PersistableMode { get; set; }

	public string? Process { get; set; }

	public Android.Content.PM.ConfigChanges RecreateOnConfigChanges { get; set; }

	public bool RelinquishTaskIdentity { get; set; }

	public Android.App.RequiredContentUriPermission RequireContentUriPermissionFromCaller { get; set; }

	public bool ResizeableActivity { get; set; }

	public bool ResumeWhilePausing { get; set; }

	public Android.Views.WindowRotationAnimation RotationAnimation { get; set; }

	public string? RoundIcon { get; set; }

	public Android.Content.PM.ScreenOrientation ScreenOrientation { get; set; }

	public bool ShowForAllUsers { get; set; }

	[Obsolete ("Please use ShowForAllUsers instead.")]
	public bool ShowOnLockScreen { get; set; }

	public bool ShowWhenLocked { get; set; }

	public bool SingleUser { get; set; }

	public bool StateNotNeeded { get; set; }

	public bool SupportsPictureInPicture { get; set; }

	public string? TaskAffinity { get; set; }

	public string? Theme { get; set; }

	public bool TurnScreenOn { get; set; }

	public Android.Content.PM.UiOptions UiOptions { get; set; }

	public bool VisibleToInstantApps { get; set; }

	public Android.Views.SoftInput WindowSoftInputMode { get; set; }

#if XABT_MANIFEST_EXTENSIONS
	static Xamarin.Android.Manifest.ManifestDocumentElement<ActivityAttribute> mapping = new ("activity");

	static ActivityAttribute ()
	{
		mapping.Add (
			member: "AllowEmbedded",
			attributeName: "allowEmbedded",
			getter: self => self.AllowEmbedded,
			setter: (self, value) => self.AllowEmbedded = (bool) value
		);
		mapping.Add (
			member: "AllowTaskReparenting",
			attributeName: "allowTaskReparenting",
			getter: self => self.AllowTaskReparenting,
			setter: (self, value) => self.AllowTaskReparenting = (bool) value
		);
		mapping.Add (
			member: "AlwaysRetainTaskState",
			attributeName: "alwaysRetainTaskState",
			getter: self => self.AlwaysRetainTaskState,
			setter: (self, value) => self.AlwaysRetainTaskState = (bool) value
		);
		mapping.Add (
			member: "AutoRemoveFromRecents",
			attributeName: "autoRemoveFromRecents",
			getter: self => self.AutoRemoveFromRecents,
			setter: (self, value) => self.AutoRemoveFromRecents = (bool) value
		);
		mapping.Add (
			member: "Banner",
			attributeName: "banner",
			getter: self => self.Banner,
			setter: (self, value) => self.Banner = (string?) value
		);
		mapping.Add (
			member: "CanDisplayOnRemoteDevices",
			attributeName: "canDisplayOnRemoteDevices",
			getter: self => self.CanDisplayOnRemoteDevices,
			setter: (self, value) => self.CanDisplayOnRemoteDevices = (bool) value
		);
		mapping.Add (
			member: "ClearTaskOnLaunch",
			attributeName: "clearTaskOnLaunch",
			getter: self => self.ClearTaskOnLaunch,
			setter: (self, value) => self.ClearTaskOnLaunch = (bool) value
		);
		mapping.Add (
			member: "ColorMode",
			attributeName: "colorMode",
			getter: self => self.ColorMode,
			setter: (self, value) => self.ColorMode = (string?) value
		);
		mapping.Add (
			member: "ConfigurationChanges",
			attributeName: "configChanges",
			getter: self => self.ConfigurationChanges,
			setter: (self, value) => self.ConfigurationChanges = (Android.Content.PM.ConfigChanges) value
		);
		mapping.Add (
			member: "Description",
			attributeName: "description",
			getter: self => self.Description,
			setter: (self, value) => self.Description = (string?) value
		);
		mapping.Add (
			member: "DirectBootAware",
			attributeName: "directBootAware",
			getter: self => self.DirectBootAware,
			setter: (self, value) => self.DirectBootAware = (bool) value
		);
		mapping.Add (
			member: "DocumentLaunchMode",
			attributeName: "documentLaunchMode",
			getter: self => self.DocumentLaunchMode,
			setter: (self, value) => self.DocumentLaunchMode = (Android.Content.PM.DocumentLaunchMode) value
		);
		mapping.Add (
			member: "Enabled",
			attributeName: "enabled",
			getter: self => self.Enabled,
			setter: (self, value) => self.Enabled = (bool) value
		);
		mapping.Add (
			member: "EnableOnBackInvokedCallback",
			attributeName: "enableOnBackInvokedCallback",
			getter: self => self.EnableOnBackInvokedCallback,
			setter: (self, value) => self.EnableOnBackInvokedCallback = (bool) value
		);
		mapping.Add (
			member: "EnableVrMode",
			attributeName: "enableVrMode",
			getter: self => self.EnableVrMode,
			setter: (self, value) => self.EnableVrMode = (string?) value
		);
		mapping.Add (
			member: "ExcludeFromRecents",
			attributeName: "excludeFromRecents",
			getter: self => self.ExcludeFromRecents,
			setter: (self, value) => self.ExcludeFromRecents = (bool) value
		);
		mapping.Add (
			member: "Exported",
			attributeName: "exported",
			getter: self => self.Exported,
			setter: (self, value) => self.Exported = (bool) value
		);
		mapping.Add (
			member: "FinishOnCloseSystemDialogs",
			attributeName: "finishOnCloseSystemDialogs",
			getter: self => self.FinishOnCloseSystemDialogs,
			setter: (self, value) => self.FinishOnCloseSystemDialogs = (bool) value
		);
		mapping.Add (
			member: "FinishOnTaskLaunch",
			attributeName: "finishOnTaskLaunch",
			getter: self => self.FinishOnTaskLaunch,
			setter: (self, value) => self.FinishOnTaskLaunch = (bool) value
		);
		mapping.Add (
			member: "HardwareAccelerated",
			attributeName: "hardwareAccelerated",
			getter: self => self.HardwareAccelerated,
			setter: (self, value) => self.HardwareAccelerated = (bool) value
		);
		mapping.Add (
			member: "Icon",
			attributeName: "icon",
			getter: self => self.Icon,
			setter: (self, value) => self.Icon = (string?) value
		);
		mapping.Add (
			member: "Immersive",
			attributeName: "immersive",
			getter: self => self.Immersive,
			setter: (self, value) => self.Immersive = (bool) value
		);
		mapping.Add (
			member: "Label",
			attributeName: "label",
			getter: self => self.Label,
			setter: (self, value) => self.Label = (string?) value
		);
		mapping.Add (
			member: "LaunchMode",
			attributeName: "launchMode",
			getter: self => self.LaunchMode,
			setter: (self, value) => self.LaunchMode = (Android.Content.PM.LaunchMode) value
		);
		mapping.Add (
			member: "LockTaskMode",
			attributeName: "lockTaskMode",
			getter: self => self.LockTaskMode,
			setter: (self, value) => self.LockTaskMode = (string?) value
		);
		mapping.Add (
			member: "Logo",
			attributeName: "logo",
			getter: self => self.Logo,
			setter: (self, value) => self.Logo = (string?) value
		);
		mapping.Add (
			member: "MaxAspectRatio",
			attributeName: "maxAspectRatio",
			getter: self => self.MaxAspectRatio,
			setter: (self, value) => self.MaxAspectRatio = (float) value
		);
		mapping.Add (
			member: "MaxRecents",
			attributeName: "maxRecents",
			getter: self => self.MaxRecents,
			setter: (self, value) => self.MaxRecents = (int) value
		);
		mapping.Add (
			member: "MultiProcess",
			attributeName: "multiprocess",
			getter: self => self.MultiProcess,
			setter: (self, value) => self.MultiProcess = (bool) value
		);
		mapping.Add (
			member: "Name",
			attributeName: "name",
			getter: self => self.Name,
			setter: (self, value) => self.Name = (string?) value
		);
		mapping.Add (
			member: "NoHistory",
			attributeName: "noHistory",
			getter: self => self.NoHistory,
			setter: (self, value) => self.NoHistory = (bool) value
		);
		mapping.Add (
			member: "Permission",
			attributeName: "permission",
			getter: self => self.Permission,
			setter: (self, value) => self.Permission = (string?) value
		);
		mapping.Add (
			member: "PersistableMode",
			attributeName: "persistableMode",
			getter: self => self.PersistableMode,
			setter: (self, value) => self.PersistableMode = (Android.Content.PM.ActivityPersistableMode) value
		);
		mapping.Add (
			member: "Process",
			attributeName: "process",
			getter: self => self.Process,
			setter: (self, value) => self.Process = (string?) value
		);
		mapping.Add (
			member: "RecreateOnConfigChanges",
			attributeName: "recreateOnConfigChanges",
			getter: self => self.RecreateOnConfigChanges,
			setter: (self, value) => self.RecreateOnConfigChanges = (Android.Content.PM.ConfigChanges) value
		);
		mapping.Add (
			member: "RelinquishTaskIdentity",
			attributeName: "relinquishTaskIdentity",
			getter: self => self.RelinquishTaskIdentity,
			setter: (self, value) => self.RelinquishTaskIdentity = (bool) value
		);
		mapping.Add (
			member: "RequireContentUriPermissionFromCaller",
			attributeName: "requireContentUriPermissionFromCaller",
			getter: self => self.RequireContentUriPermissionFromCaller,
			setter: (self, value) => self.RequireContentUriPermissionFromCaller = (Android.App.RequiredContentUriPermission) value
		);
		mapping.Add (
			member: "ResizeableActivity",
			attributeName: "resizeableActivity",
			getter: self => self.ResizeableActivity,
			setter: (self, value) => self.ResizeableActivity = (bool) value
		);
		mapping.Add (
			member: "ResumeWhilePausing",
			attributeName: "resumeWhilePausing",
			getter: self => self.ResumeWhilePausing,
			setter: (self, value) => self.ResumeWhilePausing = (bool) value
		);
		mapping.Add (
			member: "RotationAnimation",
			attributeName: "rotationAnimation",
			getter: self => self.RotationAnimation,
			setter: (self, value) => self.RotationAnimation = (Android.Views.WindowRotationAnimation) value
		);
		mapping.Add (
			member: "RoundIcon",
			attributeName: "roundIcon",
			getter: self => self.RoundIcon,
			setter: (self, value) => self.RoundIcon = (string?) value
		);
		mapping.Add (
			member: "ScreenOrientation",
			attributeName: "screenOrientation",
			getter: self => self.ScreenOrientation,
			setter: (self, value) => self.ScreenOrientation = (Android.Content.PM.ScreenOrientation) value
		);
		mapping.Add (
			member: "ShowForAllUsers",
			attributeName: "showForAllUsers",
			getter: self => self.ShowForAllUsers,
			setter: (self, value) => self.ShowForAllUsers = (bool) value
		);
		mapping.Add (
			member: "ShowOnLockScreen",
			attributeName: "showOnLockScreen",
#pragma warning disable CS0618 // Type or member is obsolete
			getter: self => self.ShowOnLockScreen,
			setter: (self, value) => self.ShowOnLockScreen = (bool) value
#pragma warning restore CS0618 // Type or member is obsolete
		);
		mapping.Add (
			member: "ShowWhenLocked",
			attributeName: "showWhenLocked",
			getter: self => self.ShowWhenLocked,
			setter: (self, value) => self.ShowWhenLocked = (bool) value
		);
		mapping.Add (
			member: "SingleUser",
			attributeName: "singleUser",
			getter: self => self.SingleUser,
			setter: (self, value) => self.SingleUser = (bool) value
		);
		mapping.Add (
			member: "StateNotNeeded",
			attributeName: "stateNotNeeded",
			getter: self => self.StateNotNeeded,
			setter: (self, value) => self.StateNotNeeded = (bool) value
		);
		mapping.Add (
			member: "SupportsPictureInPicture",
			attributeName: "supportsPictureInPicture",
			getter: self => self.SupportsPictureInPicture,
			setter: (self, value) => self.SupportsPictureInPicture = (bool) value
		);
		mapping.Add (
			member: "TaskAffinity",
			attributeName: "taskAffinity",
			getter: self => self.TaskAffinity,
			setter: (self, value) => self.TaskAffinity = (string?) value
		);
		mapping.Add (
			member: "Theme",
			attributeName: "theme",
			getter: self => self.Theme,
			setter: (self, value) => self.Theme = (string?) value
		);
		mapping.Add (
			member: "TurnScreenOn",
			attributeName: "turnScreenOn",
			getter: self => self.TurnScreenOn,
			setter: (self, value) => self.TurnScreenOn = (bool) value
		);
		mapping.Add (
			member: "UiOptions",
			attributeName: "uiOptions",
			getter: self => self.UiOptions,
			setter: (self, value) => self.UiOptions = (Android.Content.PM.UiOptions) value
		);
		mapping.Add (
			member: "VisibleToInstantApps",
			attributeName: "visibleToInstantApps",
			getter: self => self.VisibleToInstantApps,
			setter: (self, value) => self.VisibleToInstantApps = (bool) value
		);
		mapping.Add (
			member: "WindowSoftInputMode",
			attributeName: "windowSoftInputMode",
			getter: self => self.WindowSoftInputMode,
			setter: (self, value) => self.WindowSoftInputMode = (Android.Views.SoftInput) value
		);

		AddManualMapping ();
	}

	static partial void AddManualMapping ();
#endif // XABT_MANIFEST_EXTENSIONS
}
