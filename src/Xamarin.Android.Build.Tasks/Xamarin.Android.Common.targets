<!--
***********************************************************************************************
Xamarin.Android.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
  created a backup copy.  Incorrect changes to this file will make it
  impossible to load or build your projects from the command-line or the IDE.

This file imports the version- and platform-specific targets for the project importing
this file. This file also defines targets to produce an error if the specified targets
file does not exist, but the project is built anyway (command-line or IDE build).

Copyright (C) 2010-2011 Novell. All rights reserved.
Copyright (C) 2011-2012 Xamarin. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<UsingTask TaskName="Xamarin.Android.Tasks.RemoveUnknownFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AdjustJavacVersionArguments" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AndroidComputeResPaths" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AndroidSignPackage" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AndroidCreateDebugKey" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AndroidZipAlign" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.AndroidApkSigner" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetAndroidPackageName" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ResolveSdks" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Aapt" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Aapt2Compile" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Aapt2Link" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Aot" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CilStrip" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.BuildApk" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CalculateAdditionalResourceCacheDirectories" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CalculateLayoutCodeBehind" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CalculateProjectDependencies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CheckForRemovedItems" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CheckTargetFrameworks" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CheckForInvalidResourceFileNames" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CompileToDalvik" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CollectPdbFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CollectNonEmptyDirectories" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ConvertDebuggingFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ConvertResourcesCases" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyIfChanged" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyResource" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyAndConvertResources" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateManagedLibraryResourceArchive" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateNativeLibraryArchive" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateResgenManifest" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateTemporaryDirectory" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateAdditionalLibraryResourceCache" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateMsymManifest" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Crunch" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.FindLayoutsToBind" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GenerateLayoutBindings" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GenerateManagedAidlProxies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GenerateResourceDesigner" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GenerateJavaStubs" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GeneratePackageManagerJava" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetAddOnPlatformLibraries" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetAndroidDefineConstants" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetAdditionalResourcesFromAssemblies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetAppSettingsDirectory" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetConvertedJavaLibraries" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetFilesThatExist" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetJavaPlatformJar" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetImportedLibraries" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetMonoPlatformJar" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Javac" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Desugar" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Dx" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.KeyTool" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.LinkAssemblies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Lint" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.LogErrorsForFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.LogWarningsForFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.MakeBundleNativeCodeExternal" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.MergeResources" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ReadAdditionalResourcesFromAssemblyCache" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.RemoveDirFixed" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.RemoveRegisterAttribute" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ResolveAssemblies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ReadImportedLibrariesCache" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.GetExtraPackages" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyGeneratedJavaResourceClasses" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ResolveLibraryProjectImports" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ReadLibraryProjectImportsCache" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ScanAssemblies" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.StripEmbeddedLibraries" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CheckProjectItems" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CheckDuplicateJavaLibraries" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyConfigFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CopyMdbFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateAndroidResourceStamp" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CollectLibraryAssets" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.ParseAndroidWearProjectAndManifest" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.PrepareWearApplicationFiles" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.Proguard" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.DetermineJavaLibrariesToCompile" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
<UsingTask TaskName="Xamarin.Android.Tasks.CreateMultiDexMainDexClassList" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />

<!--
*******************************************
  Extensibility hook that allows VS to
  provide extra behavior without modifying 
  the core targets.
*******************************************
-->
<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets" 
        Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>



<!--
*******************************************
          Code Analysis Setup
*******************************************
-->

<PropertyGroup>
	<XamarinAnalysisTargetsFile Condition="Exists ('$(MSBuildThisFileDirectory)Xamarin.Android.Analysis.targets')">$(MSBuildThisFileDirectory)Xamarin.Android.Analysis.targets</XamarinAnalysisTargetsFile>
</PropertyGroup>

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Analysis.targets"
	Condition="Exists('$(MSBuildThisFileDirectory)Xamarin.Analysis.targets')" />

<!--
*******************************************
          Common Properties
*******************************************
-->

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Android.Common.props"
	Condition="Exists('$(MSBuildThisFileDirectory)Xamarin.Android.Common.props')" />


<!--
*******************************************
          Debugging Properties
*******************************************
-->

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Android.Common.Debugging.props"
	Condition="Exists('$(MSBuildThisFileDirectory)Xamarin.Android.Common.Debugging.props')" />
<!--
*******************************************
          Framework Setup
*******************************************
-->

<PropertyGroup>
	<ResolveNuGetPackageAssetsDependsOn>
		_SetLatestTargetFrameworkVersion;
		$(ResolveNuGetPackageAssetsDependsOn)
	</ResolveNuGetPackageAssetsDependsOn>
	<GetReferenceAssemblyPathsDependsOn>
		_SetLatestTargetFrameworkVersion;
		$(GetReferenceAssemblyPathsDependsOn)
	</GetReferenceAssemblyPathsDependsOn>
</PropertyGroup>

<!-- Get our Build Action to show up in VS -->
<ItemGroup>
  <AvailableItemName Include="AndroidAarLibrary" />
  <AvailableItemName Include="AndroidAsset" />
  <AvailableItemName Include="AndroidEnvironment" />
  <AvailableItemName Include="AndroidExternalJavaLibrary" />
  <AvailableItemName Include="AndroidInterfaceDescription" />
  <AvailableItemName Include="AndroidJavaLibrary" />
  <AvailableItemName Include="AndroidJavaSource" />
  <AvailableItemName Include="AndroidLintConfig" />
  <AvailableItemName Include="AndroidNativeLibrary" />
  <AvailableItemName Include="AndroidResource" />
  <AvailableItemName Include="AndroidBoundLayout" />
  <AvailableItemName Include="EmbeddedNativeLibrary" />
  <AvailableItemName Include="LinkDescription" />
  <AvailableItemName Include="MultiDexMainDexList" />
  <AvailableItemName Include="ProguardConfiguration" />
  <AvailableItemName Include="ProjectReference" />
</ItemGroup>

<!-- Version/fx properties -->
<PropertyGroup>
	<_XAMajorVersionNumber>1</_XAMajorVersionNumber>
	<_XASupportsFastDev Condition=" Exists ('$(MSBuildThisFileDirectory)Xamarin.Android.Common.Debugging.targets') ">True</_XASupportsFastDev>
	<_XASupportsFastDev Condition=" '$(_XASupportsFastDev)' == '' ">False</_XASupportsFastDev>
	<AndroidApplication Condition="'$(AndroidApplication)' == ''">false</AndroidApplication>
	<AndroidUseSharedRuntime Condition=" '$(AndroidUseSharedRuntime)' == '' Or '$(_XASupportsFastDev)' == 'False' ">False</AndroidUseSharedRuntime>
	<AndroidNeedsInternetPermission Condition="'$(AndroidNeedsInternetPermission)' == '' And '$(AndroidEmbedProfilers)' == ''">False</AndroidNeedsInternetPermission>
	<AndroidNeedsInternetPermission Condition="'$(AndroidNeedsInternetPermission)' == '' And '$(AndroidEmbedProfilers)' != ''">True</AndroidNeedsInternetPermission>
	<AndroidUseLatestPlatformSdk Condition="'$(AndroidUseLatestPlatformSdk)' == ''">False</AndroidUseLatestPlatformSdk>
	<TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == ''">MonoAndroid</TargetFrameworkIdentifier>
	<MonoAndroidVersion>v$(_XAMajorVersionNumber).0</MonoAndroidVersion>
	<AndroidUpdateResourceReferences Condition="'$(AndroidUpdateResourceReferences)' == ''">True</AndroidUpdateResourceReferences>
	<EmbedAssembliesIntoApk Condition=" '$(EmbedAssembliesIntoApk)' == '' And '$(Optimize)' != 'True' And '$(_XASupportsFastDev)' == 'True' ">False</EmbedAssembliesIntoApk>
	<EmbedAssembliesIntoApk Condition=" '$(_XASupportsFastDev)' == 'False' ">True</EmbedAssembliesIntoApk>
	<EmbedAssembliesIntoApk Condition=" '$(EmbedAssembliesIntoApk)' == '' ">True</EmbedAssembliesIntoApk>
	<AndroidPreferNativeLibrariesWithDebugSymbols Condition=" '$(AndroidPreferNativeLibrariesWithDebugSymbols)' == '' ">False</AndroidPreferNativeLibrariesWithDebugSymbols>
	<AndroidSkipJavacVersionCheck Condition="'$(AndroidSkipJavacVersionCheck)' == ''">False</AndroidSkipJavacVersionCheck>
	<AndroidBuildApplicationPackage Condition=" '$(AndroidBuildApplicationPackage)' == ''">False</AndroidBuildApplicationPackage>
	<AndroidGenerateLayoutBindings Condition=" '$(AndroidGenerateLayoutBindings)' == '' ">False</AndroidGenerateLayoutBindings>
	<AndroidFragmentType Condition=" '$(AndroidFragmentType)' == '' ">Android.App.Fragment</AndroidFragmentType>

	<!-- Currently only C# is supported -->
	<AndroidGenerateLayoutBindings Condition=" '$(Language)' != 'C#' ">False</AndroidGenerateLayoutBindings>

	<AndroidErrorOnCustomJavaObject Condition=" '$(AndroidErrorOnCustomJavaObject)' == '' ">True</AndroidErrorOnCustomJavaObject>

	<!-- Ahead-of-time compilation properties -->
	<AndroidAotMode Condition=" '$(AndroidAotMode)' == '' And '$(AotAssemblies)' == 'True' ">Normal</AndroidAotMode>
	<AotAssemblies Condition=" '$(AndroidAotMode)' != '' ">True</AotAssemblies>
	<AotAssemblies Condition=" '$(AotAssemblies)' == '' ">False</AotAssemblies>

	<AndroidExplicitCrunch Condition=" '$(AndroidExplicitCrunch)' == '' ">False</AndroidExplicitCrunch>
	<AndroidUseDebugRuntime
			Condition="'$(AndroidUseDebugRuntime)' == '' And '$(EmbedAssembliesIntoApk)' == 'True' And '$(Optimize)' == 'True' "
	>False</AndroidUseDebugRuntime>
	<AndroidUseDebugRuntime Condition="'$(AndroidUseDebugRuntime)' == ''" >True</AndroidUseDebugRuntime>

	<MonoSymbolArchive Condition=" '$(MonoSymbolArchive)' == '' And '$(AndroidUseSharedRuntime)' == 'False' And '$(EmbedAssembliesIntoApk)' == 'True' And '$(DebugSymbols)' == 'True' And '$(Optimize)' == 'True'" >True</MonoSymbolArchive>  
	<MonoSymbolArchive Condition=" '$(MonoSymbolArchive)' == '' ">False</MonoSymbolArchive>

	<BundleAssemblies Condition="'$(BundleAssemblies)' == ''">False</BundleAssemblies>
	<DeployExternal Condition="'$(DeployExternal)' == ''">False</DeployExternal>
	<UseShortFileNames Condition="'$(UseShortFileNames)' == ''">True</UseShortFileNames>

	<!-- Obsolete build property: should be removed in the future releases -->
	<AndroidMultiDexSupportJar></AndroidMultiDexSupportJar>
		
	<AndroidSupportedAbis Condition=" '$(AndroidSupportedAbis)' == '' ">armeabi-v7a</AndroidSupportedAbis>

	<!--- Default Lint Enabled and Disabled Checks -->
	<AndroidLintEnabledIssues Condition=" '$(AndroidLintEnabledIssues)' == '' "></AndroidLintEnabledIssues>
	<AndroidLintDisabledIssues Condition=" '$(AndroidLintDisabledIssues)' == ''"></AndroidLintDisabledIssues>
	<AndroidLintChecks Condition=" '$(AndroidLintChecks)' == ''"></AndroidLintChecks>
	<AndroidLintEnabled Condition=" '$(AndroidLintEnabled)' == ''">False</AndroidLintEnabled>
	<AndroidUseIntermediateDesignerFile Condition=" '$(AndroidUseIntermediateDesignerFile)' == '' ">False</AndroidUseIntermediateDesignerFile>

	<!-- Prevent warnings about assembly version conflicts -->
	<AutoUnifyAssemblyReferences Condition="'$(AutoUnifyAssemblyReferences)' == ''">True</AutoUnifyAssemblyReferences>
	<AutoGenerateBindingRedirects Condition="'$(AutoGenerateBindingRedirects)' == ''">False</AutoGenerateBindingRedirects>

	<!-- The .NET SGEN tool cannot process Xamarin.Android assemblies because
	     our mscorlib.dll isn't properly signed, as far as its concerned.
	     Disable generation to avoid "bizarre" build errors. -->
	<GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>

	<AndroidSdkBuildToolsVersion Condition="'$(AndroidSdkBuildToolsVersion)' == ''">27.0.3</AndroidSdkBuildToolsVersion>
	<AndroidSdkPlatformToolsVersion Condition="'$(AndroidSdkPlatformToolsVersion)' == ''">27.0.1</AndroidSdkPlatformToolsVersion>
	<AndroidSdkToolsVersion Condition="'$(AndroidSdkToolsVersion)' == ''">26.1.1</AndroidSdkToolsVersion>
	<AndroidNdkVersion Condition="'$(AndroidNdkVersion)' == ''">16.1</AndroidNdkVersion>

	<AndroidDebugKeyAlgorithm Condition=" '$(AndroidDebugKeyAlgorithm)' == '' ">RSA</AndroidDebugKeyAlgorithm>
	<AndroidDebugKeyValidity Condition=" '$(AndroidDebugKeyValidity)' == '' ">10950</AndroidDebugKeyValidity>

	<!-- Obsolete -->
	<AndroidGdbDebugServer>None</AndroidGdbDebugServer>

	<_LibraryProjectImportsDirectoryName Condition=" '$(_LibraryProjectImportsDirectoryName)'=='' And '$(UseShortFileNames)' == 'True' ">jl</_LibraryProjectImportsDirectoryName>
	<_NativeLibraryImportsDirectoryName Condition=" '$(_NativeLibraryImportsDirectoryName)'=='' And '$(UseShortFileNames)' == 'True' ">nl</_NativeLibraryImportsDirectoryName>

	<_LibraryProjectImportsDirectoryName Condition=" '$(_LibraryProjectImportsDirectoryName)'==''">library_project_imports</_LibraryProjectImportsDirectoryName>
	<_NativeLibraryImportsDirectoryName Condition=" '$(_NativeLibraryImportsDirectoryName)'==''">native_library_imports</_NativeLibraryImportsDirectoryName>
	<_AndroidLayoutBindingsDependencyCache>$(IntermediateOutputPath)layout-binding-deps.cache</_AndroidLayoutBindingsDependencyCache>
	<_AndroidResourcePathsCache>$(IntermediateOutputPath)resourcepaths.cache</_AndroidResourcePathsCache>
	<_AndroidLibraryImportsCache>$(IntermediateOutputPath)libraryimports.cache</_AndroidLibraryImportsCache>
	<_AndroidLibraryProjectImportsCache>$(IntermediateOutputPath)libraryprojectimports.cache</_AndroidLibraryProjectImportsCache>
	<_AndroidLibrayProjectIntermediatePath Condition=" '$(_AndroidLibrayProjectIntermediatePath)' == '' And '$(UseShortFileNames)' == 'True' ">$(IntermediateOutputPath)lp\</_AndroidLibrayProjectIntermediatePath>
	<_AndroidLibrayProjectIntermediatePath Condition=" '$(_AndroidLibrayProjectIntermediatePath)' == '' ">$(IntermediateOutputPath)__library_projects__\</_AndroidLibrayProjectIntermediatePath>
	<_AndroidLibrayProjectAssemblyMapFile>$(_AndroidLibrayProjectIntermediatePath)map.cache</_AndroidLibrayProjectAssemblyMapFile>
	<_AndroidProguardInputJarFilter>(!META-INF/MANIFEST.MF)</_AndroidProguardInputJarFilter>
	<_AndroidAapt2VersionFile>$(IntermediateOutputPath)aapt2.version</_AndroidAapt2VersionFile>

	<!-- $(EnableProguard) is an obsolete property that should be removed at some stage. -->
	<AndroidEnableProguard Condition="'$(AndroidEnableProguard)'==''">$(EnableProguard)</AndroidEnableProguard>
	<AndroidEnableMultiDex Condition="'$(AndroidEnableMultiDex)'==''">False</AndroidEnableMultiDex>
	<AndroidEnableDesugar Condition="'$(AndroidEnableDesugar)'==''">False</AndroidEnableDesugar>

	<!-- Default Java heap size to 1GB (-Xmx1G) if not specified-->
	<JavaMaximumHeapSize Condition=" '$(JavaMaximumHeapSize)' == '' ">1G</JavaMaximumHeapSize>

	<ProguardConfigFiles Condition="'$(ProguardConfigFiles)' == ''">
		{sdk.dir}tools\proguard\proguard-android.txt;
		{intermediate.common.xamarin};
		{intermediate.references};
		{intermediate.application};
		@(ProguardConfiguration);
	</ProguardConfigFiles>
	
	<_AndroidMainDexListFile>$(IntermediateOutputPath)multidex.keep</_AndroidMainDexListFile>
	
	<AndroidManifestPlaceholders Condition="'$(AndroidManifestPlaceholders)' == ''"></AndroidManifestPlaceholders>
		
	<_PackagedResources>$(IntermediateOutputPath)android\bin\packaged_resources</_PackagedResources>

	<_Android32bitArchitectures>armeabi-v7a;armeabi;x86;mips</_Android32bitArchitectures>
	<_Android64bitArchitectures>arm64-v8a;x86_64;mips64</_Android64bitArchitectures>

	<_AndroidSequencePointsMode Condition=" '$(MonoSymbolArchive)' == 'True' And '$(AndroidUseDebugRuntime)' == 'False' And '$(AotAssemblies)' == 'True' And '$(DebugSymbols)' == 'True' And ('$(DebugType)' == 'PdbOnly' Or '$(DebugType)' == 'Portable')">Offline</_AndroidSequencePointsMode>
	<_AndroidSequencePointsMode Condition=" '$(MonoSymbolArchive)' == 'True' And '$(AndroidUseDebugRuntime)' == 'False' And '$(_AndroidSequencePointsMode)' == ''">Normal</_AndroidSequencePointsMode>
	<_AndroidSequencePointsMode Condition=" '$(_AndroidSequencePointsMode)' == ''">None</_AndroidSequencePointsMode>
	<_InstantRunEnabled Condition=" '$(_InstantRunEnabled)' == '' ">False</_InstantRunEnabled>
	<_AndroidBuildPropertiesCache>$(IntermediateOutputPath)build.props</_AndroidBuildPropertiesCache>

	<AndroidGenerateJniMarshalMethods Condition=" '$(AndroidGenerateJniMarshalMethods)' == '' ">False</AndroidGenerateJniMarshalMethods>

</PropertyGroup>

<Choose>
	<When Condition=" '$(DebugSymbols)' == 'True' And '$(DebugType)' != '' And ('$(EmbedAssembliesIntoApk)' == 'False' Or '$(Optimize)' != 'True') ">
		<PropertyGroup>
			<AndroidIncludeDebugSymbols>True</AndroidIncludeDebugSymbols>
		</PropertyGroup>
	</When>
	<When Condition=" '$(DebugSymbols)' != '' And $(DebugSymbols) And '$(DebugType)' == '' ">
		<PropertyGroup>
			<AndroidIncludeDebugSymbols>True</AndroidIncludeDebugSymbols>
		</PropertyGroup>
	</When>
	<When Condition=" '$(EmbedAssembliesIntoApk)' == 'False' ">
		<PropertyGroup>
			<AndroidIncludeDebugSymbols>True</AndroidIncludeDebugSymbols>
		</PropertyGroup>
	</When>
	<Otherwise>
		<PropertyGroup>
			<AndroidIncludeDebugSymbols>False</AndroidIncludeDebugSymbols>
		</PropertyGroup>
	</Otherwise>
</Choose>

<!-- Do not resolve from the GAC under any circumstances in Mobile -->
<PropertyGroup>
	<AssemblySearchPaths>$([System.String]::Copy('$(AssemblySearchPaths)').Replace('{GAC}',''))</AssemblySearchPaths>
	<AssemblySearchPaths Condition="'$(MSBuildRuntimeVersion)' != ''">$(AssemblySearchPaths.Split(';'))</AssemblySearchPaths>
</PropertyGroup>

<Target Name="_SeparateAppExtensionReferences">
	<CreateItem Include="@(ProjectReference)" PreserveExistingMetadata="true" Condition="'%(Identity)' != '' AND '%(ProjectReference.IsAppExtension)' == 'true'">
		<Output ItemName="_AppExtensionReference" TaskParameter="Include" />
	</CreateItem>

	<ItemGroup>
		<ProjectReference Remove="@(_AppExtensionReference)" />
	</ItemGroup>
</Target>

<PropertyGroup>
	<WearAppTarget>SignAndroidPackage</WearAppTarget>
</PropertyGroup>

<Target Name="_PrepareWearApplication" DependsOnTargets="_ValidateAndroidPackageProperties"
	Condition="$(AndroidApplication) And '@(_AppExtensionReference)' != ''">
	<ParseAndroidWearProjectAndManifest ProjectFiles="@(_AppExtensionReference)">
		<Output TaskParameter="ApplicationManifestFile" PropertyName="BundledWearApplicationManifestFile" />
		<Output TaskParameter="ApplicationPackageName" PropertyName="BundledWearApplicationPackageName" />
	</ParseAndroidWearProjectAndManifest>
	<!-- we don't have ConvertToAbsolutePath in xbuild, so create item instead -->
	<CreateItem Include="$(AndroidSigningKeyStore)"
		Condition="$(WearAppTarget) == 'SignAndroidPackage' And '$(AndroidKeyStore)'=='True'">
		<Output TaskParameter="Include" ItemName="_AndroidSigningKeyStoreFile" />
	</CreateItem>
	<CreateProperty
		Condition="$(WearAppTarget) == 'SignAndroidPackage' And '$(AndroidKeyStore)'=='True'"
		Value="AndroidKeyStore=True;AndroidSigningKeyStore=%(_AndroidSigningKeyStoreFile.FullPath);AndroidSigningStorePass=$(AndroidSigningStorePass);AndroidSigningKeyAlias=$(AndroidSigningKeyAlias);AndroidSigningKeyPass=$(AndroidSigningKeyPass)">
		<Output TaskParameter="Value" PropertyName="_AdditionaEmbeddedWearAppProperties" />
	</CreateProperty>
	<MSBuild Projects="@(_AppExtensionReference)" Properties="Configuration=$(Configuration);AndroidUseSharedRuntime=False;EmbedAssembliesIntoApk=True;$(_AdditionaEmbeddedWearAppProperties)" Targets="Build;SignAndroidPackage"/>
	<CreateProperty
		Condition="$(BundledWearApplicationApkPath) == '' And ($(WearAppTarget) == 'SignAndroidPackage' Or !Exists('%(_AppExtensionReference.RootDir)%(_AppExtensionReference.Directory)$(_AndroidDebugKeyStoreFlag)'))"
		Value="%(_AppExtensionReference.RootDir)%(_AppExtensionReference.Directory)bin\$(Configuration)\$(BundledWearApplicationPackageName)-Signed.apk">
		<Output TaskParameter="Value" PropertyName="BundledWearApplicationApkPath" />
	</CreateProperty>
	<CreateProperty
		Condition="$(BundledWearApplicationApkPath) == '' And $(WearAppTarget) == 'PackageForAndroid' And Exists('%(_AppExtensionReference.RootDir)%(_AppExtensionReference.Directory)$(_AndroidDebugKeyStoreFlag)')"
		Value="%(_AppExtensionReference.RootDir)%(_AppExtensionReference.Directory)bin\$(Configuration)\$(BundledWearApplicationPackageName).apk">
		<Output TaskParameter="Value" PropertyName="BundledWearApplicationApkPath" />
	</CreateProperty>
	<PrepareWearApplicationFiles
		PackageName="$(_AndroidPackage)"
		IntermediateOutputPath="$(IntermediateOutputPath)"
		WearAndroidManifestFile="$(BundledWearApplicationManifestFile)"
		WearApplicationApkPath="$(BundledWearApplicationApkPath)">
		<Output TaskParameter="WearableApplicationDescriptionFile" ItemName="_WearableApplicationDescriptionFile" />
		<Output TaskParameter="BundledWearApplicationApkResourceFile" ItemName="_BundledWearApplicationApkResourceFile" />
	</PrepareWearApplicationFiles>
	<CreateItem Include="@(_WearableApplicationDescriptionFile)"
		Condition="'@(_WearableApplicationDescriptionFile)' != ''">
		<Output TaskParameter="Include" ItemName="AndroidResource" />
	</CreateItem>
	<CreateItem Include="@(_BundledWearApplicationApkResourceFile)"
		Condition="'@(_BundledWearApplicationApkResourceFile)' != ''">
		<Output TaskParameter="Include" ItemName="AndroidResource" />
	</CreateItem>
	<!-- in case there is no actual wear apk to be bundled, we don't generate wear_app_desc.xml and we shouldn't modify AndroidManifest.xml as if it had the apk -->
	<CreateProperty Value=""
		Condition="'@(_WearableApplicationDescriptionFile)' == ''">
		<Output TaskParameter="Value" PropertyName="BundledWearApplicationPackageName" />
	</CreateProperty>
</Target>

<!-- When looking for related files to copy, look for Mono debugging files as well -->
<PropertyGroup>
	<AllowedReferenceRelatedFileExtensions>
		$(AllowedReferenceRelatedFileExtensions);
		.dll.mdb;
		.exe.mdb
	</AllowedReferenceRelatedFileExtensions>
</PropertyGroup>

<Target Name="_SetupDesignTimeBuildForBuild">
	<PropertyGroup>
		<DesignTimeBuild Condition=" '$(DesignTimeBuild)' == '' ">false</DesignTimeBuild>
	</PropertyGroup>
</Target>
  
<Target Name="_SetupDesignTimeBuildForCompile">
	<PropertyGroup>
		<DesignTimeBuild Condition=" '$(DesignTimeBuild)' == '' ">true</DesignTimeBuild>
		<ManagedDesignTimeBuild Condition=" '$(AndroidUseManagedDesignTimeResourceGenerator)' == 'True' And '$(DesignTimeBuild)' == 'True' And '$(BuildingInsideVisualStudio)' == 'True' ">True</ManagedDesignTimeBuild>
		<ManagedDesignTimeBuild Condition=" '$(ManagedDesignTimeBuild)' == '' ">False</ManagedDesignTimeBuild>
		<_AndroidResourcePathsCache Condition=" '$(DesignTimeBuild)' == 'true' And !Exists ('$(_AndroidResourcePathsCache)') ">$(_AndroidResourcePathsDesignTimeCache)</_AndroidResourcePathsCache>
		<_AndroidLibraryImportsCache Condition=" '$(DesignTimeBuild)' == 'true' And !Exists ('$(_AndroidLibraryImportsCache)') ">$(_AndroidLibraryImportsDesignTimeCache)</_AndroidLibraryImportsCache>
		<_AndroidLibraryProjectImportsCache Condition=" '$(DesignTimeBuild)' == 'true' And !Exists ('$(_AndroidLibraryProjectImportsCache)') ">$(_AndroidLibraryProjectImportsDesignTimeCache)</_AndroidLibraryProjectImportsCache>
	</PropertyGroup>
	<MakeDir Directories="$(_AndroidDesignTimeResDirIntermediate)" Condition=" '$(DesignTimeBuild)' == 'true' " />
</Target>

<PropertyGroup>
	<_BeforeBuildAdditionalResourcesCache>
		_CreatePropertiesCache;
	</_BeforeBuildAdditionalResourcesCache>
</PropertyGroup>

<Target Name="_BuildAdditionalResourcesCache"
	Inputs="@(ReferencePath);@(ReferenceDependencyPaths);$(MSBuildProjectFullPath);$(NugetPackagesConfig);$(_AndroidBuildPropertiesCache)"
	Outputs="$(_AndroidResourcePathsCache)"
	DependsOnTargets="$(_BeforeBuildAdditionalResourcesCache)"
	>
 <GetAdditionalResourcesFromAssemblies
   AndroidSdkDirectory="$(_AndroidSdkDirectory)"
   AndroidNdkDirectory="$(_AndroidNdkDirectory)"
   Assemblies="@(ReferencePath);@(ReferenceDependencyPaths)"
   CacheFile="$(_AndroidResourcePathsCache)"
   YieldDuringToolExecution="$(YieldDuringToolExecution)"
   DesignTimeBuild="$(DesignTimeBuild)"
   ContinueOnError="$(DesignTimeBuild)"
   Condition=" '$(DesignTimeBuild)' == '' Or '$(DesignTimeBuild)' == 'false' "
  />
  <Message Text="Skipping GetAdditionalResourcesFromAssemblies in DesignTime build" Condition=" '$(DesignTimeBuild)' == 'true' " />
</Target>

<Target Name="_ValidateResourceCache">
	<ReadAdditionalResourcesFromAssemblyCache
			Condition="Exists('$(_AndroidResourcePathsCache)')"
			CacheFile="$(_AndroidResourcePathsCache)"
	>
		<Output TaskParameter="IsResourceCacheValid" PropertyName="_IsResourceCacheValid" />
	</ReadAdditionalResourcesFromAssemblyCache>
	<Delete Files="$(_AndroidResourcePathsCache)" Condition=" '$(_IsResourceCacheValid)' == 'False' " />
	<PropertyGroup>
		<NugetPackagesConfig Condition="Exists('$(MSBuildProjectDirectory)\packages.config')">$(MSBuildProjectDirectory)\packages.config</NugetPackagesConfig>
	</PropertyGroup>
</Target>

<Target Name="_GetAdditionalResourcesFromAssemblies"
		DependsOnTargets="_ValidateResourceCache;_BuildAdditionalResourcesCache">
	<ReadAdditionalResourcesFromAssemblyCache
			Condition="Exists('$(_AndroidResourcePathsCache)')"
			CacheFile="$(_AndroidResourcePathsCache)"
	>
		<Output TaskParameter="AdditionalAndroidResourcePaths"  ItemName="_AdditionalAndroidResourcePaths" />
		<Output TaskParameter="AdditionalJavaLibraryReferences" ItemName="_AdditionalJavaLibraryReferences" />
		<Output TaskParameter="AdditionalNativeLibraryReferences" ItemName="_AdditionalNativeLibraryReferences" />
	</ReadAdditionalResourcesFromAssemblyCache>
 <CreateItem
   Include="%(_AdditionalAndroidResourcePaths.Identity)\AndroidManifest.xml"
   Condition="Exists ('%(_AdditionalAndroidResourcePaths.Identity)\AndroidManifest.xml')">
  <Output TaskParameter="Include" ItemName="_AdditionalAndroidResourceManifests"/>
 </CreateItem>
</Target>

<Target Name="_CheckTargetFrameworks"
		DependsOnTargets="_ResolveAssemblies">
	<CheckTargetFrameworks
		ResolvedAssemblies="@(ResolvedAssemblies)"
		ProjectFile="$(MSBuildProjectFullPath)"
		TargetFrameworkVersion="$(TargetFrameworkVersion)" />
</Target>

<Target Name="_StripEmbeddedLibraries"
  Inputs="@(ResolvedAssemblies)" 
  Outputs="$(_AndroidStripFlag)"
  DependsOnTargets="_CopyIntermediateAssemblies;_CopyPdbFiles;_CopyMdbFiles">
    <StripEmbeddedLibraries
      Condition="'$(AndroidLinkMode)' != 'None' AND '$(AndroidUseSharedRuntime)' != 'true'"
      Assemblies="@(ResolvedAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')" />
    <Touch Files="$(_AndroidStripFlag)" AlwaysCreate="true" />
</Target>



<!--
*******************************************
          Application Build
*******************************************
-->

<PropertyGroup Condition="'$(AndroidBuildApplicationPackage)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)">
  <_PostBuildTargets>
    _CopyPackage;
    _Sign
  </_PostBuildTargets>
</PropertyGroup>

<PropertyGroup Condition="'$(AndroidApplication)' != '' And $(AndroidApplication)">
  <BuildDependsOn>
    _ValidateLinkMode;
    _SetupDesignTimeBuildForBuild;
    _CreatePropertiesCache;
    _CheckProjectItems;
    _CheckForContent;
    _CheckTargetFramework;
    _RemoveLegacyDesigner;
    _ValidateAndroidPackageProperties;
    $(BuildDependsOn);
    _CompileDex;
    $(_PostBuildTargets)
  </BuildDependsOn>
</PropertyGroup>

<PropertyGroup Condition="'$(AndroidApplication)' == '' Or !($(AndroidApplication))">
  <BuildDependsOn>
    _ValidateLinkMode;
     _SetupDesignTimeBuildForBuild;
     _CreatePropertiesCache;
    _AddAndroidDefines;
    _AddNativeLibraryArchiveToCompile;
    _AddAndroidEnvironmentToCompile;
    _CheckForContent;
    _CheckTargetFramework;
    _RemoveLegacyDesigner;
    _ValidateAndroidPackageProperties;
    $(BuildDependsOn);
  </BuildDependsOn>
</PropertyGroup>
  
 <PropertyGroup>
   <CompileDependsOn>
     _SetupDesignTimeBuildForCompile;
     _AddAndroidDefines;
     _IncludeLayoutBindingSources;
     $(CompileDependsOn);
   </CompileDependsOn>
 </PropertyGroup>

<PropertyGroup >
  <CoreCompileDependsOn>UpdateGeneratedFiles;$(CoreCompileDependsOn)</CoreCompileDependsOn>
</PropertyGroup>

<PropertyGroup>
    <!-- no need to add those wear resources into C#, hence this order... -->
	<CoreResolveReferencesDependsOn>
		_SeparateAppExtensionReferences;
		_PrepareWearApplication;
		$(ResolveReferencesDependsOn);
	</CoreResolveReferencesDependsOn>
	<ResolveReferencesDependsOn>
		$(CoreResolveReferencesDependsOn);
		UpdateAndroidInterfaceProxies;
		UpdateAndroidResources;
		$(ApplicationResolveReferencesDependsOn);
	</ResolveReferencesDependsOn>
</PropertyGroup>

<PropertyGroup Condition="'$(AndroidApplication)' != '' And $(AndroidApplication)">
	<PrepareForRunDependsOn>
		$(PrepareForRunDependsOn);
	</PrepareForRunDependsOn>
</PropertyGroup>

<PropertyGroup>
  <PrepareForRunDependsOn>
    $(PrepareForRunDependsOn);
    _CollectMonoAndroidOutputs;
  </PrepareForRunDependsOn>
</PropertyGroup>

<PropertyGroup>
	<CleanDependsOn>
		$(CleanDependsOn);
		_CleanMonoAndroidIntermediateDir;
	</CleanDependsOn>
</PropertyGroup>

<Target Name="_ValidateLinkMode">
	<CreateProperty Value="None" Condition="'$(AndroidLinkMode)' == 'SdkOnly' And '$(AndroidUseSharedRuntime)' == 'true'">
		<Output TaskParameter="Value" PropertyName="AndroidLinkMode" />
	</CreateProperty>
</Target>

<Target Name="UpdateGeneratedFiles"
		DependsOnTargets="_RemoveLegacyDesigner;UpdateAndroidResources"
	>
</Target>

<Target Name="_RemoveLegacyDesigner" Condition="'$(AndroidUseIntermediateDesignerFile)' == 'True'">
	<ItemGroup>
		<CorrectCasedItem Include="%(Compile.Identity)" Condition="'%(Compile.Identity)' == '$(AndroidResgenFile)'"/>
		<Compile Remove="@(CorrectCasedItem)" Condition=" '$(AndroidResgenFile)' != '' "/>
		<Compile Include="$(_AndroidResourceDesignerFile)" />
	</ItemGroup>
</Target>

<Target Name="_ValidateAndroidPackageProperties">
	<CreateProperty Value="$(ProjectDir)$(AndroidManifest)" Condition="'$(AndroidManifest)' != ''">
		<Output TaskParameter="Value" PropertyName="_AndroidManifestAbs"/>
	</CreateProperty>
	<Error Text="AndroidManifest file does not exist" Condition="'$(_AndroidManifestAbs)'!='' And !Exists ('$(_AndroidManifestAbs)')"/>

	<GetAndroidPackageName ManifestFile="$(_AndroidManifestAbs)" AssemblyName="$(AssemblyName)">
		<Output TaskParameter="PackageName" PropertyName="_AndroidPackage" />
	</GetAndroidPackageName>
	<Error Text="Could not determine package name." Condition="'$(_AndroidPackage)' == ''" />

	<GetJavaPlatformJar
		AndroidSdkDirectory="$(AndroidSdkDirectory)"
		AndroidSdkPlatform="$(_AndroidApiLevel)"
		AndroidManifest="$(_AndroidManifestAbs)">
			<Output TaskParameter="JavaPlatformJarPath" PropertyName="JavaPlatformJarPath" />
			<Output TaskParameter="TargetSdkVersion"    PropertyName="_AndroidTargetSdkVersion" />
	</GetJavaPlatformJar>

	<CreateProperty Value="$(MonoAndroidIntermediate)android\bin\$(_AndroidPackage).apk">
		<Output TaskParameter="Value" PropertyName="ApkFileIntermediate"/>
	</CreateProperty>
	<CreateProperty Value="$(OutDir)$(_AndroidPackage).apk">
		<Output TaskParameter="Value" PropertyName="ApkFile"/>
	</CreateProperty>
	<CreateProperty Value="$(OutDir)$(_AndroidPackage)-Signed.apk">
		<Output TaskParameter="Value" PropertyName="ApkFileSigned"/>
	</CreateProperty>
</Target>

<Target Name="_ResolveMonoAndroidFramework" DependsOnTargets="GetReferenceAssemblyPaths" >
</Target>

<Target Name="_AddAndroidDefines"
		DependsOnTargets="$(_OnResolveMonoAndroidSdks)">
</Target>

<Target Name="_GetReferenceAssemblyPaths">
	<GetReferenceAssemblyPaths
			TargetFrameworkMoniker="$(TargetFrameworkIdentifier),Version=v1.0"
			RootPath="$(TargetFrameworkRootPath)">
		<Output TaskParameter="ReferenceAssemblyPaths" PropertyName="_XATargetFrameworkDirectories" />
	</GetReferenceAssemblyPaths>
</Target>

<Target Name="_SetLatestTargetFrameworkVersionForPackageReference" BeforeTargets="_GetRestoreTargetFrameworksOutput" DependsOnTargets="_SetLatestTargetFrameworkVersion">
</Target>

<Target Name="_SetLatestTargetFrameworkVersion" DependsOnTargets="_GetReferenceAssemblyPaths">
	<ResolveSdks
			AndroidApiLevel="$(AndroidApiLevel)"
			AndroidSdkBuildToolsVersion="$(AndroidSdkBuildToolsVersion)"
			AndroidSdkPath="$(AndroidSdkDirectory)"
			AndroidNdkPath="$(AndroidNdkDirectory)"
			AndroidUseAapt2="$(AndroidUseAapt2)"
			AotAssemblies="$(AotAssemblies)"
			SequencePointsMode="$(_AndroidSequencePointsMode)"
			BuildingInsideVisualStudio="$(BuildingInsideVisualStudio)"
			JavaSdkPath="$(JavaSdkDirectory)"
			ProjectFilePath="$(MSBuildProjectFullPath)"
			ReferenceAssemblyPaths="$(_XATargetFrameworkDirectories)"
			TargetFrameworkVersion="$(TargetFrameworkVersion)"
			UseLatestAndroidPlatformSdk="$(AndroidUseLatestPlatformSdk)"
			JavaToolExe="$(JavaToolExe)"
			JavacToolExe="$(JavacToolExe)"
			LatestSupportedJavaVersion="$(LatestSupportedJavaVersion)"
			MinimumSupportedJavaVersion="$(MinimumSupportedJavaVersion)"
			LintToolPath="$(LintToolPath)"
			ZipAlignPath="$(ZipAlignToolPath)">
		<Output TaskParameter="AndroidApiLevel"           PropertyName="_AndroidApiLevel"           Condition="'$(_AndroidApiLevel)' == ''" />
		<Output TaskParameter="AndroidApiLevelName"       PropertyName="_AndroidApiLevelName" />
		<Output TaskParameter="SupportedApiLevel"         PropertyName="_SupportedApiLevel"	/>
		<Output TaskParameter="TargetFrameworkVersion"    PropertyName="_TargetFrameworkVersion" />
		<Output TaskParameter="ReferenceAssemblyPaths"    PropertyName="_XATargetFrameworkDirectories" />
		<Output TaskParameter="TargetFrameworkVersion"    PropertyName="TargetFrameworkVersion" />
		<Output TaskParameter="AndroidNdkPath"            PropertyName="AndroidNdkDirectory"        Condition="'$(AndroidNdkDirectory)' == ''" />
		<Output TaskParameter="AndroidSdkPath"            PropertyName="AndroidSdkDirectory"        Condition="'$(AndroidSdkDirectory)' == ''" />
		<Output TaskParameter="AndroidSdkBuildToolsPath"  PropertyName="AndroidSdkBuildToolsPath"   Condition="'$(AndroidSdkBuildToolsPath)' == ''" />
		<Output TaskParameter="JavaSdkPath"               PropertyName="JavaSdkDirectory"           Condition="'$(JavaSdkDirectory)' == ''" />
		<Output TaskParameter="MonoAndroidToolsPath"      PropertyName="MonoAndroidToolsDirectory" />
		<Output TaskParameter="MonoAndroidBinPath"        PropertyName="MonoAndroidBinDirectory" />
		<Output TaskParameter="ZipAlignPath"              PropertyName="ZipAlignToolPath"           Condition="'$(ZipAlignToolPath)' == ''" />
		<Output TaskParameter="AndroidSdkBuildToolsBinPath" PropertyName="AndroidSdkBuildToolsBinPath" Condition="'$(AndroidSdkBuildToolsBinPath)' == ''" />
		<Output TaskParameter="AndroidSequencePointsMode"   PropertyName="_SequencePointsMode"         Condition="'$(_SequencePointsMode)' == ''" />
		<Output TaskParameter="LintToolPath"              PropertyName="LintToolPath"               Condition="'$(LintToolPath)' == ''" />
		<Output TaskParameter="ApkSignerJar"              PropertyName="ApkSignerJar"               Condition="'$(ApkSignerJar)' == ''" />
		<Output TaskParameter="AndroidUseApkSigner"       PropertyName="AndroidUseApkSigner"        Condition="'$(AndroidUseApkSigner)' == ''" />
		<Output TaskParameter="AndroidUseAapt2"           PropertyName="_AndroidUseAapt2" />
		<Output TaskParameter="Aapt2Version"              PropertyName="_Aapt2Version" />
		<Output TaskParameter="JdkVersion"                PropertyName="_JdkVersion" />
		<Output TaskParameter="MinimumRequiredJdkVersion" PropertyName="_DefaultJdkVersion" />
	</ResolveSdks>
	<CreateProperty Value="$(TargetFrameworkIdentifier),Version=$(_TargetFrameworkVersion),Profile=$(TargetFrameworkProfile)">
		<Output TaskParameter="Value" PropertyName="TargetFrameworkMoniker"
				Condition="'$(TargetFrameworkProfile)' != ''"
		/>
		<Output TaskParameter="Value" PropertyName="NuGetTargetMoniker"
				Condition="'$(TargetFrameworkProfile)' != ''"
		/>
	</CreateProperty>
	<CreateProperty Value="$(TargetFrameworkIdentifier),Version=$(_TargetFrameworkVersion)">
		<Output TaskParameter="Value" PropertyName="TargetFrameworkMoniker"
				Condition="'$(TargetFrameworkProfile)' == ''"
		/>
		<Output TaskParameter="Value" PropertyName="NuGetTargetMoniker"
				Condition="'$(TargetFrameworkProfile)' == ''"
		/>
	</CreateProperty>
	<CreateItem Include="$(_JavaInteropReferences)">
		<Output TaskParameter="Include" ItemName="Reference" />
	</CreateItem>
	<Warning Code="XA0110"
		Text="Disabling $(AndroidExplicitCrunch) as it is not supported by `aapt2`. If you wish to use $(AndroidExplicitCrunch) please set $(AndroidUseAapt2) to false."
		Condition="  '$(_AndroidUseAapt2)' == 'True' And '$(AndroidExplicitCrunch)' == 'True' "
	/>
	<PropertyGroup>
		<AndroidExplicitCrunch Condition=" '$(_AndroidUseAapt2)' == 'True' ">false</AndroidExplicitCrunch>
	</PropertyGroup>
</Target>

<Target Name="_ReadAapt2VersionCache">
	<ReadLinesFromFile File="$(_AndroidAapt2VersionFile)"
			Condition="Exists('$(_AndroidAapt2VersionFile)')">
		<Output TaskParameter="Lines" ItemName="_Aapt2VersionCache"/>
	</ReadLinesFromFile>
</Target>

<Target Name="_CreateAapt2VersionCache"
		DependsOnTargets="_ReadAapt2VersionCache"
		AfterTargets="_SetLatestTargetFrameworkVersion"
		Condition="'$(_AndroidUseAapt2)' == 'True'"
	>
	<MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />
	<WriteLinesToFile
			Condition="'$(_Aapt2Version)' != '@(_Aapt2VersionCache)'" 
			File="$(_AndroidAapt2VersionFile)"
			Lines="$(_Aapt2Version)"
			Overwrite="true"
	/>
	<ItemGroup>
		<_CompiledFlataArchive Include="$(IntermediateOutputPath)\**\*.flata"/>
		<_CompiledFlataStamp Include="$(IntermediateOutputPath)\**\compiled.stamp"/>
	</ItemGroup>
	<Delete Files="@(_CompiledFlataArchive);@(_CompiledFlataStamp)" Condition="'$(_Aapt2Version)' != '@(_Aapt2VersionCache)'" />
</Target>

<Target Name="_SetupApplicationJavaClass" AfterTargets="_ResolveMonoAndroidSdks" DependsOnTargets="$(_BeforeSetupApplicationJavaClass)">
	<PropertyGroup>
		<AndroidApplicationJavaClass Condition="'$(AndroidApplicationJavaClass)' == '' And $(AndroidEnableMultiDex)">android.support.multidex.MultiDexApplication</AndroidApplicationJavaClass>
		<AndroidApplicationJavaClass Condition="'$(AndroidApplicationJavaClass)' == ''">android.app.Application</AndroidApplicationJavaClass>
	</PropertyGroup>
	<Message Text="Application Java class: $(AndroidApplicationJavaClass)" />
</Target>


<PropertyGroup>
	<_OnResolveMonoAndroidSdks>
		_ResolveMonoAndroidSdks
		;_ValidateAndroidPackageProperties
		;$(_AfterResolveMonoAndroidSdks)
	</_OnResolveMonoAndroidSdks>
</PropertyGroup>

<!--
Resolves tools paths and SDK paths, and verifies everything is installed.
If the framework directories haven't been resolved, it takes care of those too,
because xbuild doesn't support framework reference assemblies.
 -->
<Target Name="_ResolveMonoAndroidSdks" DependsOnTargets="_ResolveMonoAndroidFramework">

	<Error Text="Could not locate MonoAndroid SDK." Condition="'$(MonoAndroidToolsDirectory)'==''" />
	<Error Text="Could not locate Android SDK. Please set via /p:AndroidSdkDirectory." Condition="'$(AndroidSdkDirectory)'==''" />
	<Error Text="Could not locate Java 6 or 7 SDK.  (Download from http://www.oracle.com/technetwork/java/javase/downloads.)" Condition="'$(JavaSdkDirectory)'==''" />

	<!-- AppData for Mono for Android-->
	<GetAppSettingsDirectory>
		<Output TaskParameter="AppSettingsDirectory" PropertyName="AppSettingsDirectory" Condition="'$(AppSettingsDirectory)'==''" />
	</GetAppSettingsDirectory>

	<!-- ensure a version of paths with trailing slashes even if overridden by /p:foo=bar -->
	<CreateProperty Value="$(AppSettingsDirectory)">
		<Output TaskParameter="Value" PropertyName="_AppSettingsDirectory"/>
	</CreateProperty>
	<CreateProperty Value="$(_AppSettingsDirectory)\">
		<Output TaskParameter="Value" PropertyName="_AppSettingsDirectory"
			Condition="!HasTrailingSlash('$(_AppSettingsDirectory)')" />
	</CreateProperty>

	<CreateProperty Value="$(_AppSettingsDirectory)debug.keystore">
		<Output TaskParameter="Value" PropertyName="_ApkDebugKeyStore"
			Condition="'$(_ApkDebugKeyStore)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(MonoAndroidToolsDirectory)">
		<Output TaskParameter="Value" PropertyName="_MonoAndroidToolsDirectory"/>
	</CreateProperty>
	<CreateProperty Value="$(_MonoAndroidToolsDirectory)\">
		<Output TaskParameter="Value" PropertyName="_MonoAndroidToolsDirectory"
			Condition="!HasTrailingSlash('$(_MonoAndroidToolsDirectory)')" />
	</CreateProperty>
	
	<CreateProperty Value="$(AndroidNdkDirectory)">
		<Output TaskParameter="Value" PropertyName="_AndroidNdkDirectory"/>
	</CreateProperty>
	<CreateProperty Value="$(_AndroidNdkDirectory)\">
		<Output TaskParameter="Value" PropertyName="_AndroidNdkDirectory"
			Condition="!HasTrailingSlash('$(_AndroidNdkDirectory)')" />
	</CreateProperty>
	
	<CreateProperty Value="$(AndroidSdkDirectory)">
		<Output TaskParameter="Value" PropertyName="_AndroidSdkDirectory"/>
	</CreateProperty>
	<CreateProperty Value="$(_AndroidSdkDirectory)\">
		<Output TaskParameter="Value" PropertyName="_AndroidSdkDirectory"
			Condition="!HasTrailingSlash('$(_AndroidSdkDirectory)')" />
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsPath)\">
		<Output TaskParameter="Value" PropertyName="AndroidSdkBuildToolsPath"
				Condition="!HasTrailingSlash('$(AndroidSdkBuildToolsPath)')"
		/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsBinPath)\">
		<Output TaskParameter="Value" PropertyName="AndroidSdkBuildToolsBinPath"
				Condition="!HasTrailingSlash('$(AndroidSdkBuildToolsBinPath)')"
		/>
	</CreateProperty>
	
	<CreateProperty Value="$(JavaSdkDirectory)">
		<Output TaskParameter="Value" PropertyName="_JavaSdkDirectory"/>
	</CreateProperty>
	<CreateProperty Value="$(_JavaSdkDirectory)\">
		<Output TaskParameter="Value" PropertyName="_JavaSdkDirectory"
			Condition="!HasTrailingSlash('$(_JavaSdkDirectory)')" />
	</CreateProperty>
	
	<Message Text="MonoAndroid Tools: $(_MonoAndroidToolsDirectory)"/>
	<Message Text="Android Platform API level: $(_AndroidApiLevel)"/>
	<Message Text="TargetFrameworkVersion: $(_TargetFrameworkVersion)"/>
	<Message Text="Android NDK: $(_AndroidNdkDirectory)"/>
	<Message Text="Android SDK: $(_AndroidSdkDirectory)"/>
	<Message Text="Android SDK Build Tools: $(AndroidSdkBuildToolsPath)"/>
	<Message Text="Java SDK: $(_JavaSdkDirectory)"/>
	
	<!-- Misc paths -->

	<CreateProperty Value="$(_AndroidSdkDirectory)tools\">
		<Output TaskParameter="Value" PropertyName="_AndroidToolsDirectory"/>
	</CreateProperty>

	<CreateProperty Value="$(_AndroidSdkDirectory)platform-tools\">
		<Output TaskParameter="Value" PropertyName="_AndroidPlatformToolsDirectory"/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsBinPath)">
		<Output TaskParameter="Value" PropertyName="AaptToolPath"
				Condition="'$(AaptToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsBinPath)">
		<Output TaskParameter="Value" PropertyName="Aapt2ToolPath"
				Condition="'$(Aapt2ToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsBinPath)">
		<Output TaskParameter="Value" PropertyName="ZipAlignToolPath"
				Condition="'$(ZipAlignToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_AndroidToolsDirectory)" Condition="Exists ('$(_AndroidToolsDirectory)')">
		<Output TaskParameter="Value" PropertyName="LintToolPath"
				Condition="'$(LintToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(MonoAndroidToolsDirectory)\proguard\">
		<Output TaskParameter="Value" PropertyName="ProguardToolPath"
				Condition="'$(ProguardToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(ProguardToolPath)lib\proguard.jar">
		<Output TaskParameter="Value" PropertyName="ProguardJarPath"
				Condition="'$(ProguardJarPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsPath)\lib\dx.jar">
		<Output TaskParameter="Value" PropertyName="DxJarPath"
				Condition="'$(DxJarPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(MonoAndroidToolsDirectory)\desugar_deploy.jar">
		<Output TaskParameter="Value" PropertyName="DesugarJarPath"
				Condition="'$(DesugarJarPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="--dex --no-strict">
		<Output TaskParameter="Value" PropertyName="DxExtraArguments"
			Condition="'$(DxExtraArguments)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(AndroidSdkBuildToolsPath)\">
		<Output TaskParameter="Value" PropertyName="DxToolPath"
				Condition="'$(UseDx)' == 'True' And '$(DxToolPath)' == ''"
		/>
	</CreateProperty>
	<CreateProperty Value="$(AndroidSdkBuildToolsPath)\">
		<Output TaskParameter="Value" PropertyName="MainDexClassesToolPath"
				Condition="'$(MainDexClassesToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_JavaSdkDirectory)\bin">
		<Output TaskParameter="Value" PropertyName="JarsignerToolPath"
				Condition="'$(JarsignerToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_JavaSdkDirectory)\bin">
		<Output TaskParameter="Value" PropertyName="JavaToolPath"
				Condition="'$(JavaToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_JavaSdkDirectory)\bin">
		<Output TaskParameter="Value" PropertyName="JavacToolPath"
				Condition="'$(JavacToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_JavaSdkDirectory)\bin">
		<Output TaskParameter="Value" PropertyName="KeytoolToolPath"
				Condition="'$(KeytoolToolPath)' == ''"
		/>
	</CreateProperty>

	<CreateProperty Value="$(_AndroidPlatformToolsDirectory)">
		<Output TaskParameter="Value" PropertyName="AdbToolPath"
				Condition="'$(AdbToolPath)' == ''"
		/>
	</CreateProperty>

	<!-- Get the defined constants for this API Level -->
	<GetAndroidDefineConstants AndroidApiLevel="$(_SupportedApiLevel)" ProductVersion="$(MonoAndroidVersion)">
		<Output TaskParameter="AndroidDefineConstants" ItemName="AndroidDefineConstants" />
	</GetAndroidDefineConstants>

	<PropertyGroup>
		<DefineConstants>$(DefineConstants);@(AndroidDefineConstants)</DefineConstants>
	</PropertyGroup>
</Target>

<Target Name="AndroidPrepareForBuild" DependsOnTargets="$(_OnResolveMonoAndroidSdks)" />

<!-- uploadflags.txt
	- This file says which devices this package has been deployed to.
	- Need to delete on rebuild so package will get redeployed. -->
<PropertyGroup>
	<_UploadFlagFile>$(IntermediateOutputPath)uploadflags.txt</_UploadFlagFile>
</PropertyGroup>

<!-- project item consistency check -->
<Target Name="_CheckProjectItems"
    DependsOnTargets="_SetLatestTargetFrameworkVersion">
  <CheckProjectItems
      IsApplication="$(AndroidApplication)"
      JavaSourceFiles="@(AndroidJavaSource)"
      JavaLibraries="@(AndroidJavaLibrary)"
      NativeLibraries="@(AndroidNativeLibrary)"
      EmbeddedNativeLibraries="@(EmbeddedNativeLibrary)" />
</Target>

<Target Name="_CheckTargetFramework">
	<Warning Code="XA0109" Text="Unsupported or invalid %24(TargetFrameworkVersion) value of 'v4.5'. Please update your Project Options." Condition=" '$(TargetFrameworkVersion)' == 'v4.5' "/> 
</Target>

<Target Name="_CheckForContent">
	<LogWarningsForFiles
		Files="@(Content)"
		Code="XA0101"
		Text="%40(Content) build action is not supported"
		Condition=" '@(Content)' != '' "
	/>
</Target>

<Target Name="_CheckDuplicateJavaLibraries" DependsOnTargets="_GetLibraryImports">
  <CheckDuplicateJavaLibraries
    JavaSourceFiles="@(AndroidJavaSource)"
    JavaLibraries="@(AndroidJavaLibrary)"
    LibraryProjectJars="@(ExtractedJarImports)" />
</Target>

<Target Name="_LintChecks" Condition=" '$(AndroidLintEnabled)' == 'True' ">
	<Lint
		TargetDirectory="$(IntermediateOutputPath)"
		EnabledIssues="$(AndroidLintEnabledIssues)"
		DisabledIssues="$(AndroidLintDisabledIssues)"
		CheckIssues="$(AndroidLintCheckIssues)"
		ConfigFiles="@(AndroidLintConfig)"
		ResourceDirectories="$(MonoAndroidResDirIntermediate);$(LibraryResourceDirectories)"
		IntermediateOutputPath="$(IntermediateOutputPath)"
		ToolPath="$(LintToolPath)"
		ToolExe="$(LintToolExe)"
		JavaSdkPath="$(JavaSdkDirectory)"
	/>
</Target>

<!-- Assets build properties -->
<PropertyGroup>
	<MonoAndroidAssetsDirIntermediate>$(IntermediateOutputPath)assets\</MonoAndroidAssetsDirIntermediate>
	<MonoAndroidAssetsPrefix Condition="'$(MonoAndroidAssetsPrefix)' == ''">Assets</MonoAndroidAssetsPrefix>
</PropertyGroup>

<!-- Assets Build -->

<Target Name="_CalculateAdditionalResourceCacheDirectories">
	<CalculateAdditionalResourceCacheDirectories
			AdditionalAndroidResourcePaths="@(_AdditionalAndroidResourcePaths)"
			CacheDirectory="$(MonoAndroidIntermediateResourceCache)">
		<Output TaskParameter="AdditionalResourceCachePaths" ItemName="_AdditonalAndroidResourceCachePaths"/>
	</CalculateAdditionalResourceCacheDirectories>

	<ItemGroup>
		<_AdditionalAndroidResourceCachePaths Include="@(_AdditionalAndroidResourcePaths)" />
	</ItemGroup>
</Target>

<Target Name="_CreateAdditionalResourceCache"
		Inputs="@(_AdditionalAndroidResourcePaths->'%(Identity)\AndroidManifest.xml');$(_AndroidBuildPropertiesCache)"
		Outputs="@(_AdditonalAndroidResourceCachePaths->'%(Identity)\cache.stamp')"
		DependsOnTargets="_CalculateAdditionalResourceCacheDirectories;_GetAdditionalResourcesFromAssemblies"
	>
	<CreateAdditionalLibraryResourceCache
			AdditionalAndroidResourcePaths="@(_AdditionalAndroidResourcePaths)"
			AdditionalAndroidResourceCachePaths="@(_AdditonalAndroidResourceCachePaths)">
		<Output TaskParameter="CopiedResources" ItemName="_AdditionalResourceCache"/>
	</CreateAdditionalLibraryResourceCache>
	<Crunch
			SourceFiles="@(_AdditionalResourceCache)"
			ToolPath="$(AaptToolPath)"
			ToolExe="$(AaptToolExe)" 
			YieldDuringToolExecution="$(YieldDuringToolExecution)"
			Condition=" '$(AndroidExplicitCrunch)' == 'True' "
	/>
	<Touch Files="@(_AdditonalAndroidResourceCachePaths->'%(Identity)\cache.stamp')" AlwaysCreate="True" />
</Target>

<Target Name="UpdateAndroidAssets"
	DependsOnTargets="$(CoreResolveReferencesDependsOn);_ComputeAndroidAssetsPaths;_GenerateAndroidAssetsDir" />

<Target Name="_ComputeAndroidAssetsPaths">
	<AndroidComputeResPaths ResourceFiles="@(AndroidAsset)" IntermediateDir="$(MonoAndroidAssetsDirIntermediate)" Prefixes="$(MonoAndroidAssetsPrefix)" ProjectDir="$(ProjectDir)">
		<Output ItemName="_AndroidAssetsDest" TaskParameter="IntermediateFiles" />
		<Output ItemName="_AndroidResolvedAssets" TaskParameter="ResolvedResourceFiles" />
	</AndroidComputeResPaths>
</Target>

<Target Name="_GenerateAndroidAssetsDir"
	Inputs="$(MSBuildAllProjects);@(_AndroidResolvedAssets)"
	Outputs="@(_AndroidAssetsDest)">
	<MakeDir Directories="$(MonoAndroidAssetsDirIntermediate)" />
	<Copy SourceFiles="@(_AndroidResolvedAssets)" DestinationFiles="@(_AndroidAssetsDest)" SkipUnchangedFiles="true" />
	<RemoveUnknownFiles Files="@(_AndroidAssetsDest)" Directory="$(MonoAndroidAssetsDirIntermediate)" RemoveDirectories="true" />
	<Touch Files="@(_AndroidAssetsDest)" />
</Target>

<!-- Resource build properties -->
<PropertyGroup>
	<MonoAndroidResDirIntermediate>$(IntermediateOutputPath)res\</MonoAndroidResDirIntermediate>
	<MonoAndroidIntermediateAssetsDir>$(IntermediateOutputPath)android\assets\</MonoAndroidIntermediateAssetsDir>
	<MonoAndroidLinkerInputDir>$(IntermediateOutputPath)linksrc\</MonoAndroidLinkerInputDir>
	<MonoAndroidIntermediateAssemblyDir>$(IntermediateOutputPath)android\assets\</MonoAndroidIntermediateAssemblyDir>
	<MonoAndroidIntermediateAssemblyTempDir>$(IntermediateOutputPath)linkdst\</MonoAndroidIntermediateAssemblyTempDir>
	<MonoAndroidResourcePrefix Condition="'$(MonoAndroidResourcePrefix)' == ''">Resources</MonoAndroidResourcePrefix>
	<MonoAndroidIntermediate>$(IntermediateOutputPath)</MonoAndroidIntermediate>
	<MonoAndroidCodeBehindDir>$(MonoAndroidIntermediate)generated</MonoAndroidCodeBehindDir>
	<MonoAndroidIntermediateResourceCache>$(IntermediateOutputPath)resourcecache</MonoAndroidIntermediateResourceCache>
	<_AndroidAotBinDirectory>$(IntermediateOutputPath)aot</_AndroidAotBinDirectory>
	<_AndroidResgenFlagFile>$(IntermediateOutputPath)R.cs.flag</_AndroidResgenFlagFile>
	<_AndroidResFlagFile>$(IntermediateOutputPath)res.flag</_AndroidResFlagFile>
	<_AndroidComponentResgenFlagFile>$(IntermediateOutputPath)Component.R.cs.flag</_AndroidComponentResgenFlagFile>
	<_AndroidStripFlag>$(IntermediateOutputPath)strip.flag</_AndroidStripFlag>
	<_AndroidLinkFlag>$(IntermediateOutputPath)link.flag</_AndroidLinkFlag>
	<_AndroidApkPerAbiFlagFile>$(IntermediateOutputPath)android\bin\apk_per_abi.flag</_AndroidApkPerAbiFlagFile>
	<_AndroidDebugKeyStoreFlag>$(IntermediateOutputPath)android_debug_keystore.flag</_AndroidDebugKeyStoreFlag>
	<_RemoveRegisterFlag>$(MonoAndroidIntermediateAssetsDir)shrunk\shrunk.flag</_RemoveRegisterFlag>
	<_AcwMapFile>$(IntermediateOutputPath)acw-map.txt</_AcwMapFile>
	<_AndroidTypeMappingJavaToManaged>$(IntermediateOutputPath)android\typemap.jm</_AndroidTypeMappingJavaToManaged>
	<_AndroidTypeMappingManagedToJava>$(IntermediateOutputPath)android\typemap.mj</_AndroidTypeMappingManagedToJava>
	<AndroidResgenNamespace Condition="'$(AndroidResgenNamespace)'==''" >$(RootNamespace)</AndroidResgenNamespace>
	<_AndroidLintConfigFile>$(IntermediateOutputPath)lint.xml</_AndroidLintConfigFile>
	<_AndroidResourceDesignerFile Condition=" '$(AndroidUseIntermediateDesignerFile)' == 'True' ">$(IntermediateOutputPath)$(_AndroidResourceDesigner)</_AndroidResourceDesignerFile>
	<_AndroidResourceDesignerFile Condition=" '$(AndroidUseIntermediateDesignerFile)' != 'True' ">$(AndroidResgenFile)</_AndroidResourceDesignerFile>
	<_AndroidStaticResourcesFlag>$(IntermediateOutputPath)static.flag</_AndroidStaticResourcesFlag>
	<_AndroidResourcesCacheFile>$(IntermediateOutputPath)mergeresources.cache</_AndroidResourcesCacheFile>
	<AndroidUseManagedDesignTimeResourceGenerator Condition=" '$(AndroidUseManagedDesignTimeResourceGenerator)' == '' " >True</AndroidUseManagedDesignTimeResourceGenerator>
	<_AndroidDesignTimeResDirIntermediate>$(IntermediateOutputPath)designtime\</_AndroidDesignTimeResDirIntermediate>
	<_AndroidResourcePathsDesignTimeCache>$(_AndroidDesignTimeResDirIntermediate)resourcepaths.cache</_AndroidResourcePathsDesignTimeCache>
	<_AndroidLibraryImportsDesignTimeCache>$(_AndroidDesignTimeResDirIntermediate)libraryimports.cache</_AndroidLibraryImportsDesignTimeCache>
	<_AndroidLibraryProjectImportsDesignTimeCache>$(_AndroidDesignTimeResDirIntermediate)libraryprojectimports.cache</_AndroidLibraryProjectImportsDesignTimeCache>
	<_AndroidManagedResourceDesignerFile>$(_AndroidDesignTimeResDirIntermediate)$(_AndroidResourceDesigner)</_AndroidManagedResourceDesignerFile>
</PropertyGroup>

<ItemGroup>
	<!--- List of items we want to trigger a build if changed -->
	<_PropertyCacheItems Include="BundleAssemblies=$(BundleAssemblies)" />
	<_PropertyCacheItems Include="AotAssemblies=$(AotAssemblies)" />
	<_PropertyCacheItems Include="AndroidAotMode=$(AndroidAotMode)" />
	<_PropertyCacheItems Include="ExplicitCrunch=$(AndroidExplicitCrunch)" />
	<_PropertyCacheItems Include="EnableProguard=$(AndroidEnableProguard)" />
	<_PropertyCacheItems Include="UseSharedRuntime=$(AndroidUseSharedRuntime)" />
	<_PropertyCacheItems Include="EmbedAssembliesIntoApk=$(EmbedAssembliesIntoApk)" />
	<_PropertyCacheItems Include="AndroidLinkMode=$(AndroidLinkMode)" />
	<_PropertyCacheItems Include="AndroidLinkSkip=$(AndroidLinkSkip)" />
	<_PropertyCacheItems Include="AndroidSdkBuildToolsVersion=$(AndroidSdkBuildToolsVersion)" />
	<_PropertyCacheItems Include="AndroidSdkPath=$(AndroidSdkDirectory)" />
	<_PropertyCacheItems Include="AndroidNdkPath=$(AndroidNdkDirectory)" />
	<_PropertyCacheItems Include="JavaSdkPath=$(JavaSdkDirectory)" />
	<_PropertyCacheItems Include="AndroidSequencePointsMode=$(_AndroidSequencePointsMode)" />
	<_PropertyCacheItems Include="XamarinAndroidVersion=$(XamarinAndroidVersion)" />
	<_PropertyCacheItems Include="MonoSymbolArchive=$(MonoSymbolArchive)" />
	<_PropertyCacheItems Include="AndroidUseLatestPlatformSdk=$(AndroidUseLatestPlatformSdk)" />
	<_PropertyCacheItems Include="TargetFrameworkVersion=$(TargetFrameworkVersion)" />
	<_PropertyCacheItems Include="AndroidCreatePackagePerAbi=$(AndroidCreatePackagePerAbi)" />
	<_PropertyCacheItems Include="OS=$(OS)" />
	<_PropertyCacheItems Include="DesignTimeBuild=$(DesignTimeBuild)" />
	<_PropertyCacheItems Include="AndroidIncludeDebugSymbols=$(AndroidIncludeDebugSymbols)" />
	<_PropertyCacheItems Include="AdbTarget=$(AdbTarget)" />
	<_PropertyCacheItems Include="AdbOptions=$(AdbOptions)" />
</ItemGroup>

<Target Name="_ReadPropertiesCache">
	<ReadLinesFromFile File="$(_AndroidBuildPropertiesCache)"
			Condition="Exists('$(_AndroidBuildPropertiesCache)')">
		<Output TaskParameter="Lines" ItemName="_PropertiesCache"/>
	</ReadLinesFromFile>
</Target>

<Target Name="_CreatePropertiesCache" DependsOnTargets="_SetupDesignTimeBuildForBuild;_ReadPropertiesCache">
	<MakeDir Directories="$(IntermediateOutputPath)" Condition="!Exists('$(IntermediateOutputPath)')" />
	<WriteLinesToFile
		Condition="'@(_PropertiesCache)' != '@(_PropertyCacheItems)'" 
		File="$(_AndroidBuildPropertiesCache)"
		Lines="@(_PropertyCacheItems)"
		Overwrite="true"/>
</Target>

<PropertyGroup>
	<_ManagedUpdateAndroidResgenInputs>
		$(MSBuildAllProjects);
		@(AndroidResource);
		@(AndroidBoundLayout);
		@(ReferencePath);
		@(_LibraryResourceDirectoryStamps);
		@(_AdditonalAndroidResourceCachePaths->'%(Identity)\cache.stamp');
		$(_AndroidBuildPropertiesCache);
		$(ProjectAssetsFile);
	</_ManagedUpdateAndroidResgenInputs>
</PropertyGroup>

<!-- Managed DesignTime Resource Generation -->
<Target Name="_ManagedUpdateAndroidResgen" Condition=" '$(ManagedDesignTimeBuild)' == 'True' "
		Inputs="$(_ManagedUpdateAndroidResgenInputs);$(_AndroidResourcePathsCache);$(_AndroidLibraryProjectImportsCache);$(_AndroidLibraryImportsCache);"
		Outputs="$(_AndroidManagedResourceDesignerFile)"
		DependsOnTargets="_CreatePropertiesCache;_ExtractLibraryProjectImports;_CreateAdditionalResourceCache">
	<MakeDir Directories="$(_AndroidDesignTimeResDirIntermediate)" />
	<!-- Parse primary R.java and create Resources.Designer.cs -->
	<GenerateResourceDesigner
		ContinueOnError="$(DesignTimeBuild)"
		NetResgenOutputFile="$(_AndroidManagedResourceDesignerFile)"
		JavaResgenInputFile="$(_GeneratedPrimaryJavaResgenFile)"
		Namespace="$(AndroidResgenNamespace)"
		ProjectDir="$(ProjectDir)"
		Resources="@(AndroidResource);@(AndroidBoundLayout)"
		ResourceDirectory="$(MonoAndroidResourcePrefix)"
		AdditionalResourceDirectories="@(LibraryResourceDirectories);@(_AdditionalAndroidResourcePaths->'%(Identity)\res')"
		IsApplication="$(AndroidApplication)"
		References="@(ReferencePath)"
		UseManagedResourceGenerator="True"
		DesignTimeBuild="$(DesignTimeBuild)"
		Condition="Exists ('$(MonoAndroidResourcePrefix)')"
	/>
	<ItemGroup>
		<CorrectCasedItem Include="%(Compile.Identity)" Condition="'%(Compile.Identity)' == '$(AndroidResgenFile)'"/>
		<CorrectCasedItem Include="%(Compile.Identity)" Condition="'%(Compile.Identity)' == 'Resources\Resource.designer.cs'"/>
		<Compile Remove="@(CorrectCasedItem)" Condition=" '$(ManagedDesignTimeBuild)' == 'True' And '%(CorrectCasedItem.Identity)' != '' "/>
		<Compile Include="$(_AndroidManagedResourceDesignerFile)" Condition=" '$(ManagedDesignTimeBuild)' == 'True' And Exists ('$(_AndroidManagedResourceDesignerFile)')" />
	</ItemGroup>
</Target>
	
<!-- Resource Build -->

<Target Name="_UpdateAndroidResources" Condition=" '$(ManagedDesignTimeBuild)' == 'False' "
	DependsOnTargets="$(CoreResolveReferencesDependsOn);_CreatePropertiesCache;_CheckForDeletedResourceFile;_ComputeAndroidResourcePaths;_UpdateAndroidResgen;_AddLibraryProjectsEmbeddedResourceToProject;_GenerateJavaDesignerForComponent"> 
</Target>

<Target Name="UpdateAndroidResources" DependsOnTargets="_SetupDesignTimeBuildForCompile;_ManagedUpdateAndroidResgen;_UpdateAndroidResources" />
		
<!-- Handle a case where the designer file has been deleted, but the flag file still exists -->
<Target Name="_CheckForDeletedResourceFile">
	<Delete Files="$(_AndroidResgenFlagFile)"
		Condition="Exists ('$(_AndroidResgenFlagFile)') AND '$(_AndroidResourceDesignerFile)' != '' AND !Exists('$(_AndroidResourceDesignerFile)')" />
</Target>
  
<Target Name="_ComputeAndroidResourcePaths">
	<AndroidComputeResPaths ResourceFiles="@(AndroidResource);@(AndroidBoundLayout)" IntermediateDir="$(MonoAndroidResDirIntermediate)" Prefixes="$(MonoAndroidResourcePrefix)" LowercaseFilenames="True" ProjectDir="$(ProjectDir)">
		<Output ItemName="_AndroidResourceDest" TaskParameter="IntermediateFiles" />
		<Output PropertyName="_AndroidResourceNameCaseMap" TaskParameter="ResourceNameCaseMap" />
		<Output ItemName="_AndroidResolvedResources" TaskParameter="ResolvedResourceFiles" />
	</AndroidComputeResPaths>
  
	<MakeDir Directories="$(MonoAndroidResDirIntermediate)" />
</Target>

<Target Name="_GenerateAndroidResourceDir"
	Inputs="$(MSBuildProjectFullPath);$(MSBuildAllProjects);@(_AndroidResolvedResources);$(_AndroidBuildPropertiesCache)"
	Outputs="$(_AndroidResFlagFile)"
	DependsOnTargets="$(_OnResolveMonoAndroidSdks)">
	<CheckForInvalidResourceFileNames
		Condition=" '$(_AndroidUseAapt2)' == 'True' "
		Resources="@(_AndroidResolvedResources)"
	/>
	<CopyAndConvertResources SourceFiles="@(_AndroidResolvedResources)"
			DestinationFiles="@(_AndroidResourceDest)"
			AcwMapFile="$(_AcwMapFile)"
			CacheFile="$(_AndroidResourcesCacheFile)"
			Condition="  '$(AndroidExplicitCrunch)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)">
		<Output ItemName="_ModifiedResources" TaskParameter="ModifiedFiles"/>
	</CopyAndConvertResources>
	<Crunch SourceFiles="@(_ModifiedResources)" ToolPath="$(AaptToolPath)" ToolExe="$(AaptToolExe)"
			Condition=" '$(AndroidExplicitCrunch)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)" />
	<CopyIfChanged SourceFiles="@(_AndroidResolvedResources)"
		DestinationFiles="@(_AndroidResourceDest)"
		Condition=" '$(AndroidExplicitCrunch)' != 'True' Or '$(AndroidApplication)' == '' Or !($(AndroidApplication))"
	>
		<Output ItemName="_ModifiedResources" TaskParameter="ModifiedFiles"/>
	</CopyIfChanged>
	<RemoveUnknownFiles Files="@(_AndroidResourceDest)" Directory="$(MonoAndroidResDirIntermediate)" RemoveDirectories="true">
		<Output ItemName="_AndroidResourceDestRemovedFiles" TaskParameter="RemovedFiles" />
	</RemoveUnknownFiles>
	<Touch Files="$(_AndroidResFlagFile)" AlwaysCreate="True" Condition=" !Exists ('$(_AndroidResFlagFile)') Or  '@(_ModifiedResources)' != '' Or '@(_AndroidResourceDestRemovedFiles)' != '' " />
	<ItemGroup>
		<FileWrites Include="$(_AndroidResFlagFile)" />
	</ItemGroup>
</Target>

<Target Name="_ResolveLibraryProjectImports"
		Inputs="$(ProjectAssetsFile);$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)"
		Outputs="$(_AndroidLibraryProjectImportsCache)">
	<ResolveLibraryProjectImports
		ContinueOnError="$(DesignTimeBuild)"
		CacheFile="$(_AndroidLibraryProjectImportsCache)"
		DesignTimeBuild="$(DesignTimeBuild)"
		Assemblies="@(ReferencePath);@(ReferenceDependencyPaths)"
		AarLibraries="@(AndroidAarLibrary)"
		ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
		UseShortFileNames="$(UseShortFileNames)"
		OutputDirectory="$(IntermediateOutputPath)"
		AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
		OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)">
	</ResolveLibraryProjectImports>
</Target>

<Target Name="_CollectLibraryResourceDirectories">
	<CollectNonEmptyDirectories Directories="@(LibraryResourceDirectories);@(_AdditonalAndroidResourceCachePaths->'%(Identity)\res')">
		<Output TaskParameter="Output" ItemName="_LibraryResourceDirectories" />
	</CollectNonEmptyDirectories>
</Target>

<Target Name="_CompileAndroidLibraryResources" DependsOnTargets="_CollectLibraryResourceDirectories"
		Condition="'$(_AndroidUseAapt2)' == 'True' And '$(DesignTimeBuild)' != 'True' "
		Inputs="%(_LibraryResourceDirectories.FileFound)"
		Outputs="%(_LibraryResourceDirectories.Identity)\..\compiled.stamp"
	>
	<ConvertResourcesCases
		Condition=" '@(_LibraryResourceDirectories)' != '' "
		ContinueOnError="$(DesignTimeBuild)"
		ResourceDirectories="@(_LibraryResourceDirectories)"
		AcwMapFile="$(_AcwMapFile)"
		AndroidConversionFlagFile="%(_LibraryResourceDirectories.Identity)\..\compiled.flata"
	/>
	<Aapt2Compile
		Condition=" '@(_LibraryResourceDirectories)' != '' "
		ContinueOnError="$(DesignTimeBuild)"
		ResourceDirectories="@(_LibraryResourceDirectories)"
		ExplicitCrunch="$(AndroidExplicitCrunch)"
		ToolPath="$(Aapt2ToolPath)"
		ToolExe="$(Aapt2ToolExe)"
	/>
	<Touch
			Files="@(_LibraryResourceDirectories->'%(Identity)\..\compiled.stamp')"
			AlwaysCreate="True"
	/>
	<ItemGroup>
		<FileWrites Include="@(_LibraryResourceDirectories.Identity->'%(Identity)\..\compiled.flata')"
				Condition="Exists ('@(_LibraryResourceDirectories.Identity->'%(Identity)\..\compiled.flata')')"
		/>
		<FileWrites Include="@(_LibraryResourceDirectories.Identity->'%(Identity)\..\compiled.stamp')"
				Condition="Exists ('@(_LibraryResourceDirectories.Identity->'%(Identity)\..\compiled.stamp')')"
		/>
	</ItemGroup>
</Target>

<Target Name="_CompileResources"
		Condition="'$(_AndroidUseAapt2)' == 'True'"
		Inputs="@(AndroidResource)"
		Outputs="$(IntermediateOutputPath)\compiled.flata"
	>
	<!-- Change cases so we support mixed case resource names -->
	<ConvertResourcesCases
		ContinueOnError="$(DesignTimeBuild)"
		ResourceDirectories="$(MonoAndroidResDirIntermediate)"
		AcwMapFile="$(_AcwMapFile)"
		AndroidConversionFlagFile="$(IntermediateOutputPath)\compiled.flata"
	/>
	<Aapt2Compile
		ContinueOnError="$(DesignTimeBuild)"
		ResourceDirectories="$(MonoAndroidResDirIntermediate)"
		ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
		ExplicitCrunch="$(AndroidExplicitCrunch)"
		ToolPath="$(Aapt2ToolPath)"
		ToolExe="$(Aapt2ToolExe)"
	/>
	<ItemGroup>
		<FileWrites Include="$(IntermediateOutputPath)\compiled.flata" />
	</ItemGroup>
</Target>

<Target Name="_ExtractLibraryProjectImports" DependsOnTargets="_ResolveLibraryProjectImports">
	<ReadLibraryProjectImportsCache
		CacheFile="$(_AndroidLibraryProjectImportsCache)">
		<Output TaskParameter="ResolvedResourceDirectories" ItemName="LibraryResourceDirectories" />
		<Output TaskParameter="ResolvedAssetDirectories" ItemName="LibraryAssetDirectories" />
		<Output TaskParameter="ResolvedEnvironmentFiles" ItemName="LibraryEnvironments" />
		<Output TaskParameter="ResolvedResourceDirectoryStamps" ItemName="_LibraryResourceDirectoryStamps" />
	</ReadLibraryProjectImportsCache>
</Target>

<Target Name="_GetLibraryResourceImages"
		Condition=" '$(AndroidExplicitCrunch)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)">
	<ItemGroup>
		<_LibraryResourceDirs Include="@(LibraryResourceDirectories)"/>
	</ItemGroup>
	<CreateItem Include="@(_LibraryResourceDirs->'%(Identity)\\**\*.png')">
		<Output TaskParameter="Include" ItemName="_Images" />
	</CreateItem> 
	<RemoveDuplicates Inputs="@(_Images)">
		<Output TaskParameter="Filtered" ItemName="_LibraryProjectResourceImages"/>
	</RemoveDuplicates>
</Target>

<Target Name="_CrunchLibraryProjectImports"
		Inputs="@(_LibraryProjectResourceImages->'%(Identity)');$(_AndroidBuildPropertiesCache)"
		Outputs="@(_LibraryResourceDirs->'%(Identity)\..\crunch.stamp')"
		DependsOnTargets="_GetLibraryResourceImages"
		Condition=" '$(AndroidExplicitCrunch)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)">
	<Crunch SourceFiles="@(_LibraryProjectResourceImages->'%(Identity)')" ToolPath="$(AaptToolPath)" ToolExe="$(AaptToolExe)"
			Condition=" '$(AndroidExplicitCrunch)' == 'True' And '$(AndroidApplication)' != '' And $(AndroidApplication)" />
	<Touch Files="@(_LibraryResourceDirs->'%(Identity)\..\crunch.stamp')" AlwaysCreate="True" />
</Target>

<Target Name="_AddMultiDexDependencyJars">
	<CreateItem Include="$(AndroidSdkDirectory)\$(AndroidMultiDexSupportJar)"
		Condition="'$(AndroidEnableMultiDex)' == 'True' AND '$(AndroidMultiDexSupportJar)' != ''">
      <Output TaskParameter="Include" ItemName="AndroidJavaLibrary" />
	</CreateItem>
	<CreateItem Include="$(MonoAndroidToolsDirectory)\android-support-multidex.jar"
		Condition="'$(AndroidEnableMultiDex)' == 'True' AND '$(AndroidMultiDexSupportJar)' == ''">
      <Output TaskParameter="Include" ItemName="AndroidJavaLibrary" />
	</CreateItem>
</Target>

<PropertyGroup>
	<_GetLibraryImportsDependsOnTargets>
		_ExtractLibraryProjectImports;
		_CrunchLibraryProjectImports;
		_AddMultiDexDependencyJars
		;_BuildLibraryImportsCache
	</_GetLibraryImportsDependsOnTargets>
</PropertyGroup>

<Target Name="_BuildLibraryImportsCache"
		Inputs="$(MSBuildProjectFullPath);@(ReferencePath);@(ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache)"
		Outputs="$(_AndroidLibraryImportsCache)">
	<GetImportedLibraries TargetDirectory="$(_AndroidLibrayProjectIntermediatePath)"
			CacheFile="$(_AndroidLibraryImportsCache)">
	</GetImportedLibraries>
</Target>

<Target Name="_GetLibraryImports" DependsOnTargets="$(_GetLibraryImportsDependsOnTargets)">
	<ReadImportedLibrariesCache
			CacheFile="$(_AndroidLibraryImportsCache)">
		<Output TaskParameter="Jars" ItemName="ExtractedJarImports" />
		<Output TaskParameter="NativeLibraries" ItemName="ExtractedNativeLibraryImports" />
		<Output TaskParameter="ManifestDocuments" ItemName="ExtractedManifestDocuments" />
	</ReadImportedLibrariesCache>
	
    <CreateItem Include="@(ExtractedNativeLibraryImports)"
        Condition="'@(ExtractedNativeLibraryImports)' != ''">
      <Output TaskParameter="Include" ItemName="AndroidNativeLibrary" />
    </CreateItem>
</Target>
  
<Target Name="_CreateNativeLibraryArchive"
        Condition="@(EmbeddedNativeLibrary) != ''" 
        DependsOnTargets="ResolveReferences"
        Inputs="@(EmbeddedNativeLibrary)"
        Outputs="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip">
    <CreateNativeLibraryArchive
      OutputDirectory="$(IntermediateOutputPath)$(_NativeLibraryImportsDirectoryName)"
      EmbeddedNativeLibraries="@(EmbeddedNativeLibrary)" />
</Target>

<Target Name="_AddNativeLibraryArchiveToCompile" DependsOnTargets="_CreateNativeLibraryArchive">
    <CreateItem Include="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip"
        Condition="Exists ('$(IntermediateOutputPath)__AndroidNativeLibraries__.zip')"
        AdditionalMetadata="LogicalName=__AndroidNativeLibraries__.zip">
      <Output TaskParameter="Include" ItemName="EmbeddedResource" />
    </CreateItem>
</Target>

<Target Name="_AddAndroidEnvironmentToCompile">
    <CreateItem Include="@(AndroidEnvironment)"
        Condition="@(AndroidEnvironment) !=''"
        AdditionalMetadata="@(AndroidEnvironment->'LogicalName=__AndroidEnvironment__%(filename)%(extension)')">
      <Output TaskParameter="Include" ItemName="EmbeddedResource" />
    </CreateItem>
</Target>

<Target Name="_CollectAdditionalResourceFiles" Condition="'@(_AdditonalAndroidResourceCachePaths)' != ''">
	<CreateItem Include="@(_AdditonalAndroidResourceCachePaths->'%(Identity)\res\**\*.*')">
		<Output TaskParameter="Include" ItemName="_AdditonalAndroidResourceCacheFiles" />
	</CreateItem>
</Target>

<PropertyGroup>
	<_GenerateJavaDesignerForComponentDependsOnTargets>
		_GetAdditionalResourcesFromAssemblies
		;_CreateAdditionalResourceCache
		;_CollectAdditionalResourceFiles
		;_CompileAndroidLibraryResources
		;_CompileResources
	</_GenerateJavaDesignerForComponentDependsOnTargets>
</PropertyGroup>

<Target Name="_GenerateJavaDesignerForComponent"
  Inputs="@(_AdditonalAndroidResourceCacheFiles);@(_LibraryResourceDirectoryStamps)"
  Outputs="$(_AndroidComponentResgenFlagFile)"
  DependsOnTargets="$(_GenerateJavaDesignerForComponentDependsOnTargets)">

 <!-- Run aapt to generate R.java for additional Android resources-->
 <Aapt
   Condition="'$(_AndroidUseAapt2)' != 'True'"
   ContinueOnError="$(DesignTimeBuild)"
   ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
   OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
   UseShortFileNames="$(UseShortFileNames)"
   ManifestFiles="@(_AdditonalAndroidResourceCachePaths->'%(Identity)\AndroidManifest.xml');@(LibraryResourceDirectories->'%(Identity)\..\AndroidManifest.xml')"
   ApplicationName="$(_AndroidPackage)"
   JavaPlatformJarPath="$(JavaPlatformJarPath)"
   NonConstantId="true"
   JavaDesignerOutputDirectory="$(IntermediateOutputPath)android\src"
   ResourceDirectory="$(MonoAndroidResDirIntermediate)"
   AdditionalResourceDirectories="@(LibraryResourceDirectories)"
   AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
   AndroidComponentResgenFlagFile="$(_AndroidComponentResgenFlagFile)"
   ToolPath="$(AaptToolPath)"
   ToolExe="$(AaptToolExe)"
   ApiLevel="$(_AndroidTargetSdkVersion)"
   AndroidUseLatestPlatformSdk="$(AndroidUseLatestPlatformSdk)"
   ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
   AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
   YieldDuringToolExecution="$(YieldDuringToolExecution)"
   ExplicitCrunch="$(AndroidExplicitCrunch)"
 />
 <Aapt2Link
   Condition="'$(_AndroidUseAapt2)' == 'True'"
   ContinueOnError="$(DesignTimeBuild)"
   AndroidComponentResgenFlagFile="$(_AndroidComponentResgenFlagFile)"
   UseShortFileNames="$(UseShortFileNames)"
   ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
   OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
   AdditionalResourceDirectories="@(LibraryResourceDirectories)"
   AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
   ApplicationName="$(_AndroidPackage)"
   JavaPlatformJarPath="$(JavaPlatformJarPath)"
   JavaDesignerOutputDirectory="$(IntermediateOutputPath)android\src"
   ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
   ResourceDirectories="$(MonoAndroidResDirIntermediate)"
   AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
   ManifestFiles="@(_AdditonalAndroidResourceCachePaths->'%(Identity)\AndroidManifest.xml');@(LibraryResourceDirectories->'%(Identity)\..\AndroidManifest.xml')"
   YieldDuringToolExecution="$(YieldDuringToolExecution)"
   ToolPath="$(Aapt2ToolPath)"
   ToolExe="$(Aapt2ToolExe)"
 />
 <Touch Files="$(_AndroidComponentResgenFlagFile)" AlwaysCreate="True" />
</Target>

<Target Name="_FindLayoutsForBinding" Condition=" '$(Language)' == 'C#' ">
  <FindLayoutsToBind
      GenerateLayoutBindings="$(AndroidGenerateLayoutBindings)"
      BoundLayouts="@(AndroidBoundLayout)"
      BindingDependenciesCacheFile="$(_AndroidLayoutBindingsDependencyCache)"
      ResourceFiles="@(AndroidResource)">
    <Output ItemName="_AndroidBoundLayout" TaskParameter="LayoutsToBind" />
  </FindLayoutsToBind>
  <CalculateLayoutCodeBehind
      BoundLayouts="@(_AndroidBoundLayout);@(AndroidBoundLayout)"
      BaseNamespace="Binding"
      OutputLanguage="$(Language)"
      OutputFileExtension="$(DefaultLanguageSourceExtension)"
      BindingDependenciesCacheFile="$(_AndroidLayoutBindingsDependencyCache)">
    <Output ItemName="_LayoutForBinding" TaskParameter="LayoutBindingFiles" />
    <Output ItemName="_LayoutPartialClass" TaskParameter="LayoutPartialClassFiles" />
  </CalculateLayoutCodeBehind>
</Target>

<Target Name="_GenerateLayoutBindings" Condition=" '$(Language)' == 'C#' "
    Inputs="@(_LayoutForBinding);@(_LayoutPartialClass)"
    Outputs="@(_LayoutForBinding->'$(MonoAndroidCodeBehindDir)\%(LayoutBindingFileName)');@(_LayoutPartialClass->'$(MonoAndroidCodeBehindDir)\%(LayoutPartialClassFileName)')"
    DependsOnTargets="_FindLayoutsForBinding">
  <MakeDir Directories="$(MonoAndroidCodeBehindDir)" Condition="!Exists('$(MonoAndroidCodeBehindDir)')"/>
  <GenerateLayoutBindings
      AndroidFragmentType="$(AndroidFragmentType)"
      ResourceFiles="@(_LayoutForBinding)"
      PartialClassFiles="@(_LayoutPartialClass)"
      MonoAndroidCodeBehindDir="$(MonoAndroidCodeBehindDir)"
      AppNamespace="$(AndroidResgenNamespace)"
      OutputLanguage="$(Language)">
	<Output ItemName="_GeneratedCodeBehindFiles" TaskParameter="GeneratedFiles"/>
  </GenerateLayoutBindings>
</Target>

<Target Name="_IncludeLayoutBindingSources" DependsOnTargets="_GenerateLayoutBindings" Condition=" '$(Language)' == 'C#' ">
	<ItemGroup Condition=" '@(_LayoutForBinding)' != '' ">
		<Compile Include="$(MSBuildThisFileDirectory)\LayoutBinding$(DefaultLanguageSourceExtension)" />
	</ItemGroup>

	<ItemGroup Condition=" '@(_LayoutForBinding)' != '' ">
		<Compile Include="$(MonoAndroidCodeBehindDir)\%(_LayoutForBinding.LayoutBindingFileName)"
			Condition="Exists ('$(MonoAndroidCodeBehindDir)\%(_LayoutForBinding.LayoutBindingFileName)')"/>
		<FileWrites Include="$(MonoAndroidCodeBehindDir)\%(_LayoutForBinding.LayoutBindingFileName)"
			    Condition="Exists ('$(MonoAndroidCodeBehindDir)\%(_LayoutForBinding.LayoutBindingFileName)')"/>
	</ItemGroup>

	<ItemGroup Condition=" '@(_LayoutPartialClass)' != '' ">
	        <Compile Include="$(MonoAndroidCodeBehindDir)\%(_LayoutPartialClass.LayoutPartialClassFileName)"
			Condition="Exists ('$(MonoAndroidCodeBehindDir)\%(_LayoutPartialClass.LayoutPartialClassFileName)')"/>
		<FileWrites Include="$(MonoAndroidCodeBehindDir)\%(_LayoutPartialClass.LayoutPartialClassFileName)"
		            Condition="Exists ('$(MonoAndroidCodeBehindDir)\%(_LayoutPartialClass.LayoutPartialClassFileName)')"/>
	</ItemGroup>
</Target>

<PropertyGroup>
	<_UpdateAndroidResgenDependsOnTargets>
		_CheckForDeletedResourceFile;
		$(_OnResolveMonoAndroidSdks);
		_GetLibraryImports;
		_CheckDuplicateJavaLibraries;
		_GetAdditionalResourcesFromAssemblies;
		_CreateAdditionalResourceCache;
		_GenerateAndroidResourceDir;
		_IncludeLayoutBindingSources;
		_DefineBuildTargetAbis;
		_CompileAndroidLibraryResources;
		_CompileResources;
	</_UpdateAndroidResgenDependsOnTargets>
	<_UpdateAndroidResgenInputs>
		$(MSBuildAllProjects);
		@(_AndroidResourceDest);
		@(_LibraryResourceDirectoryStamps);
		@(_AdditonalAndroidResourceCachePaths->'%(Identity)\cache.stamp');
		$(_AndroidBuildPropertiesCache);
		$(ProjectAssetsFile);
		$(_AndroidResourcePathsCache);
		$(_AndroidLibraryProjectImportsCache);
		$(_AndroidLibraryImportsCache);
	</_UpdateAndroidResgenInputs>
</PropertyGroup>

<Target Name="_UpdateAndroidResgen"
	Inputs="$(_UpdateAndroidResgenInputs)"
	Outputs="$(_AndroidResgenFlagFile)"
	DependsOnTargets="$(_UpdateAndroidResgenDependsOnTargets)">

	<!-- Create a temporary directory to work in -->
	<CreateTemporaryDirectory>
		<Output TaskParameter="TemporaryDirectory" PropertyName="ResgenTemporaryDirectory" />
	</CreateTemporaryDirectory>

	<!-- Create a dummy manifest file for aapt to work with -->
	<CreateResgenManifest
		ManifestOutputFile="$(ResgenTemporaryDirectory)\AndroidManifest.xml"
		PackageName="$(_AndroidPackage)"
	/>

	<!-- Change cases so we support mixed case resource names -->
	<ConvertResourcesCases
		Condition="'$(_AndroidUseAapt2)' != 'True'"
		ResourceDirectories="$(MonoAndroidResDirIntermediate);@(LibraryResourceDirectories)"
		AcwMapFile="$(_AcwMapFile)"
		AndroidConversionFlagFile="$(_AndroidResgenFlagFile)"
	/>

	<GetExtraPackages
		IntermediateOutputPath="$(IntermediateOutputPath)"
		LibraryProjectImportsDirectoryName="$(_LibraryProjectImportsDirectoryName)">
		<Output TaskParameter="ExtraPackages" PropertyName="AaptExtraPackages" />
	</GetExtraPackages>
  
	<!-- Run aapt to generate R.java -->
	<Aapt Condition="'$(_AndroidResourceDesignerFile)' != '' And '$(_AndroidUseAapt2)' != 'True'"
		ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
		OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
		UseShortFileNames="$(UseShortFileNames)"
		JavaPlatformJarPath="$(JavaPlatformJarPath)"
		ManifestFiles="$(ResgenTemporaryDirectory)\AndroidManifest.xml"
		PackageName="$(_AndroidPackage)"
		ApplicationName="$(_AndroidPackage)"
		ResourceDirectory="$(MonoAndroidResDirIntermediate)"
		JavaDesignerOutputDirectory="$(ResgenTemporaryDirectory)"
		ResourceOutputFile="$(ResgenTemporaryDirectory)\resources.apk"
		ExtraPackages="$(AaptExtraPackages)"
		AdditionalResourceDirectories="@(LibraryResourceDirectories)"
		LibraryProjectJars="@(ExtractedJarImports)"
		ExtraArgs="$(AndroidResgenExtraArgs)"
		ToolPath="$(AaptToolPath)"
		ToolExe="$(AaptToolExe)"
		AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
		ApiLevel="$(_AndroidTargetSdkVersion)"
		AndroidUseLatestPlatformSdk="$(AndroidUseLatestPlatformSdk)"
		ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
		AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
		YieldDuringToolExecution="$(YieldDuringToolExecution)"
		ExplicitCrunch="$(AndroidExplicitCrunch)"
		SupportedAbis="$(_BuildTargetAbis)"
		ResourceSymbolsTextFileDirectory="$(IntermediateOutputPath)"
		ContinueOnError="$(DesignTimeBuild)"
	/>

	<Aapt2Link
		Condition="'$(_AndroidResourceDesignerFile)' != '' And '$(_AndroidUseAapt2)' == 'True' And Exists ('$(IntermediateOutputPath)\compiled.flata')"
		ContinueOnError="$(DesignTimeBuild)"
		ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
		AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
		ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
		UseShortFileNames="$(UseShortFileNames)"
		OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
		OutputFile="$(ResgenTemporaryDirectory)\resources.apk"
		PackageName="$(_AndroidPackage)"
		ApplicationName="$(_AndroidPackage)"
		JavaPlatformJarPath="$(JavaPlatformJarPath)"
		JavaDesignerOutputDirectory="$(ResgenTemporaryDirectory)"
		CompiledResourceFlatArchive="$(IntermediateOutputPath)\compiled.flata"
		ManifestFiles="$(ResgenTemporaryDirectory)\AndroidManifest.xml"
		AdditionalResourceDirectories="@(LibraryResourceDirectories)"
		AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
		YieldDuringToolExecution="$(YieldDuringToolExecution)"
		ResourceSymbolsTextFile="$(IntermediateOutputPath)R.txt"
		ResourceDirectories="$(MonoAndroidResDirIntermediate)"
		ExtraArgs="$(AndroidResgenExtraArgs)"
		ToolPath="$(Aapt2ToolPath)"
		ToolExe="$(Aapt2ToolExe)"
	/>
	<ItemGroup>
		<FileWrites Include="$(IntermediateOutputPath)R.txt" Condition=" '$(_AndroidUseAapt2)' == 'True' And Exists ('$(IntermediateOutputPath)R.txt') " />
	</ItemGroup>
	
	<CopyGeneratedJavaResourceClasses
		SourceTopDirectory="$(ResgenTemporaryDirectory)"
		DestinationTopDirectory="$(IntermediateOutputPath)android"
		PrimaryPackageName="$(_AndroidPackage)"
		ExtraPackages="$(AaptExtraPackages)">
		<Output TaskParameter="PrimaryJavaResgenFile" PropertyName="_GeneratedPrimaryJavaResgenFile" />
	</CopyGeneratedJavaResourceClasses>

  <!-- We need to strip out just filename from request Designer file location -->
  <CreateItem Include="$(_AndroidResourceDesignerFile)">
    <Output TaskParameter="Include" ItemName="_AndroidResgenFilenameItems" />
  </CreateItem>

  <CreateProperty Value="@(_AndroidResgenFilenameItems->'%(Filename)%(Extension)')">
    <Output TaskParameter="Value" PropertyName="AndroidResgenFilename"/>
  </CreateProperty>

  <PropertyGroup>
    <_UseManagedResourceGenerator Condition=" '$(_AndroidUseAapt2)' == 'True' ">True</_UseManagedResourceGenerator>
    <_UseManagedResourceGenerator Condition=" '$(_UseManagedResourceGenerator)' == '' ">False</_UseManagedResourceGenerator>
  </PropertyGroup>

  <!-- Parse primary R.java and create Resources.Designer.cs -->
	<GenerateResourceDesigner
		Condition="'$(_AndroidResourceDesignerFile)' != ''"
		ContinueOnError="$(DesignTimeBuild)"
		NetResgenOutputFile="$(ResgenTemporaryDirectory)\$(AndroidResgenFilename)"
		JavaResgenInputFile="$(_GeneratedPrimaryJavaResgenFile)"
		Namespace="$(AndroidResgenNamespace)"
		ProjectDir="$(ProjectDir)"
		Resources="@(_AndroidResourceDest)"
		ResourceDirectory="$(MonoAndroidResDirIntermediate)"
		AdditionalResourceDirectories="@(LibraryResourceDirectories)"
		IsApplication="$(AndroidApplication)"
		References="@(ReferencePath)"
		UseManagedResourceGenerator="$(_UseManagedResourceGenerator)"
		DesignTimeBuild="$(DesignTimeBuild)"
	/>

	<!-- Only copy if the file contents changed, so users only get Reload? dialog for real changes -->
	<CopyIfChanged
		SourceFiles="$(ResgenTemporaryDirectory)\$(AndroidResgenFilename)"
		DestinationFiles="$(_AndroidResourceDesignerFile)"
		Condition="'$(_AndroidResourceDesignerFile)' != '' And Exists ('$(ResgenTemporaryDirectory)\$(AndroidResgenFilename)')"
	/>

	<!-- Delete our temporary directory -->
	<RemoveDirFixed Directories="$(ResgenTemporaryDirectory)" />
	
	<!-- If there are no _AndroidResource items, create a blank file -->
	<CreateAndroidResourceStamp
		Condition="'$(_AndroidResourceDesignerFile)' != ''"
		AndroidResgenFile="$(_AndroidResourceDesignerFile)"
		AndroidResourceDest="@(_AndroidResourceDest)"
		MonoAndroidResDirIntermediate="$(MonoAndroidResDirIntermediate)"
		AndroidResgenFlagFile="$(_AndroidResgenFlagFile)" />
</Target>

<Target Name="_CreateManagedLibraryResourceArchive"
		Inputs="@(_AndroidResourceDest);@(AndroidAsset);@(AndroidJavaLibrary);@(AndroidJavaSource);@(_AndroidResourceDestRemovedFiles)"
		Outputs="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip"
		Condition=" '$(AndroidApplication)' != 'True' "
	>
	<!-- embed managed resources into dll as a zip archive, like AndroidLibraryProjectZip -->
	<CreateManagedLibraryResourceArchive
		OutputDirectory="$(IntermediateOutputPath)$(_LibraryProjectImportsDirectoryName)"
		ResourceDirectory="$(MonoAndroidResDirIntermediate)"
		AndroidAssets="@(AndroidAsset)"
		MonoAndroidAssetsPrefix="$(MonoAndroidAssetsPrefix)"
		AndroidJavaSources="@(AndroidJavaSource)"
		AndroidJavaLibraries="@(AndroidJavaLibrary)"
		IsApplication="$(AndroidApplication)"
		AndroidResourcesInThisExactProject="@(_AndroidResourceDest)"
		RemovedAndroidResourceFiles="@(_AndroidResourceDestRemovedFiles)"
	/>
</Target>

<Target Name="_AddLibraryProjectsEmbeddedResourceToProject"
		DependsOnTargets="_CreateManagedLibraryResourceArchive"
		Condition=" '$(AndroidApplication)' != 'True' "
	>
	<CreateItem
		Include="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip"
        Condition="Exists ('$(IntermediateOutputPath)__AndroidLibraryProjects__.zip')"
        AdditionalMetadata="LogicalName=__AndroidLibraryProjects__.zip">
		<Output TaskParameter="Include" ItemName="EmbeddedResource" />
	</CreateItem>
</Target>

<!-- AIDL Build -->

<!-- AIDL Build Properties -->
<PropertyGroup>
	<ManagedAidlNamespace Condition="$(UseRootNamespaceForManagedAidl) == 'true'" >$(RootNamespace)</ManagedAidlNamespace>
</PropertyGroup>

<Target Name="UpdateAndroidInterfaceProxies"
	Condition="@(AndroidInterfaceDescription) != ''"
	DependsOnTargets="$(CoreResolveReferencesDependsOn);_RunManagedAidlTool;_AddManagedAidlOutputsToCompile" />

<Target Name="_RunManagedAidlTool">
  <GenerateManagedAidlProxies
    SourceAidlFiles="@(AndroidInterfaceDescription)"
    References="@(ReferencePath);@(ReferenceDependencyPaths)"
    IntermediateOutputDirectory="$(MonoAndroidIntermediate)"
    ParcelableHandlingOption="$(ManagedAidlParcelableHandling)"
    OutputNamespace="$(ManagedAidlNamespace)" />
</Target>

<Target Name="_AddManagedAidlOutputsToCompile" DependsOnTargets="_RunManagedAidlTool">
  <!-- Add the files to list of things to be compiled -->
  <CreateItem Include="$(MonoAndroidIntermediate)aidl\\**\*.cs">
    <Output TaskParameter="Include" ItemName="Compile" />
  </CreateItem>
</Target>


<Target Name="SetWearAppTargetToPackageForAndroid">
	<CreateProperty Value="PackageForAndroid">
		<Output TaskParameter="Value" PropertyName="WearAppTarget" />
	</CreateProperty>
</Target>

<!-- Package Build -->
<Target Name="PackageForAndroid"
	DependsOnTargets="SetWearAppTargetToPackageForAndroid;Build;_CopyPackage" />
	
<Target Name="_ResolveAssemblies">
	<!--- Remove the ImplicitlyExpandDesignTimeFacades assemblies. We have already build the app there are not required for packaging  -->
	<ItemGroup>
		<FilteredAssemblies Include="$(OutDir)$(TargetFileName)"
				Condition="Exists ('$(OutDir)$(TargetFileName)')" />
		<FilteredAssemblies Include="%(ReferenceCopyLocalPaths.Identity)"
				Condition="'%(ReferenceCopyLocalPaths.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And '%(ReferenceCopyLocalPaths.Extension)' == '.dll' And '%(ReferenceCopyLocalPaths.RelativeDir)' == '' "/>
		<FilteredAssemblies Include="%(ReferencePath.Identity)"
				Condition="'%(ReferencePath.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' "/>
	</ItemGroup>
	<!-- Find all the assemblies this app requires -->
	<ResolveAssemblies
		Assemblies="@(FilteredAssemblies)"
		I18nAssemblies="$(MandroidI18n)"
		LinkMode="$(AndroidLinkMode)"
		ProjectAssetFile="$(ProjectLockFile)"
		TargetMoniker="$(NuGetTargetMoniker)"
		ReferenceAssembliesDirectory="$(TargetFrameworkDirectory)">
      <Output TaskParameter="ResolvedAssemblies" ItemName="ResolvedAssemblies" />
      <Output TaskParameter="ResolvedUserAssemblies" ItemName="ResolvedUserAssemblies" />
      <Output TaskParameter="ResolvedFrameworkAssemblies" ItemName="ResolvedFrameworkAssemblies" />
      <Output TaskParameter="ResolvedSymbols" ItemName="ResolvedSymbols" />
      <Output TaskParameter="ResolvedDoNotPackageAttributes" ItemName="_ResolvedDoNotPackageAttributes" />
  </ResolveAssemblies>
</Target>

<Target Name="_CreatePackageWorkspace">
  <!-- Create our intermediate directory -->
  <MakeDir Directories="$(MonoAndroidResDirIntermediate)" />

  <!-- Create directory to package from -->
  <MakeDir Directories="$(MonoAndroidIntermediateAssetsDir)" />
</Target>
  
<Target Name="_GetMonoPlatformJarPath">
  <GetMonoPlatformJar TargetFrameworkDirectory="$(TargetFrameworkDirectory)">
    <Output TaskParameter="MonoPlatformJarPath" PropertyName="MonoPlatformJarPath" />
    <Output TaskParameter="MonoPlatformDexPath" PropertyName="MonoPlatformDexPath" />
  </GetMonoPlatformJar>
</Target>

<Target Name="_AddStaticResources"
		Inputs="$(MonoPlatformJarPath);$(_AndroidBuildPropertiesCache)"
		Outputs="$(_AndroidStaticResourcesFlag)"
		DependsOnTargets="$(_BeforeAddStaticResources);_GetMonoPlatformJarPath">
	<CopyResource ResourceName="machine.config" OutputPath="$(MonoAndroidIntermediateAssetsDir)machine.config" />
  <CopyResource
    ResourceName="MonoRuntimeProvider.Bundled.java"
    OutputPath="$(MonoAndroidIntermediate)android\src\mono\MonoRuntimeProvider.java"
    Condition="'$(AndroidUseSharedRuntime)' != 'true'" />

  <CopyResource
    ResourceName="NotifyTimeZoneChanges.java"
    OutputPath="$(MonoAndroidIntermediate)android\src\mono\android\app\NotifyTimeZoneChanges.java"
    Condition="'$(AndroidIncludeDebugSymbols)' == 'True'" />

  <CopyResource
    ResourceName="Seppuku.java"
    OutputPath="$(MonoAndroidIntermediate)android\src\mono\android\Seppuku.java"
    Condition="'$(AndroidIncludeDebugSymbols)' == 'True'" />
  
  <Copy
    SourceFiles="$(MonoPlatformJarPath)"
    DestinationFiles="$(IntermediateOutputPath)android\bin\mono.android.jar"
    SkipUnchangedFiles="true" />
  <Touch Files="$(IntermediateOutputPath)android\bin\mono.android.jar" />
  
  <Touch Files="$(_AndroidStaticResourcesFlag)" AlwaysCreate="true" />
</Target>

<Target Name="_CreateIntermediateAssembliesDir"
    Inputs="@(ResolvedUserAssemblies->'%(Identity)')"
    Outputs="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" >

  <!-- Create our intermediate directory -->
  <MakeDir Directories="$(MonoAndroidIntermediateAssemblyDir)" Condition="!Exists ('$(MonoAndroidIntermediateAssemblyDir)')" />
</Target>

<Target Name="_CopyIntermediateAssemblies"
	Inputs="@(ResolvedUserAssemblies)"
	Outputs="@(ResolvedUserAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
	DependsOnTargets="_ResolveAssemblies;_ResolveSatellitePaths;_CreatePackageWorkspace;_CreateIntermediateAssembliesDir;_CopyConfigFiles">
	<!-- Make a copy of every assembly we need in assemblies -->
	<Copy
		SourceFiles="@(ResolvedAssemblies)"
		DestinationFiles="@(ResolvedAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
		SkipUnchangedFiles="true" />
	<Copy
		SourceFiles="@(_AndroidResolvedSatellitePaths)"
		DestinationFiles="@(_AndroidResolvedSatellitePaths->'$(MonoAndroidLinkerInputDir)%(DestinationSubDirectory)%(Filename)%(Extension)')"
		SkipUnchangedFiles="true"
	/>
	<Touch Files="@(ResolvedAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')" />
	<Touch Files="@(_AndroidResolvedSatellitePaths->'$(MonoAndroidLinkerInputDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" />
	<Delete Files="@(ResolvedAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension).mdb')" />
</Target>

<Target Name="_CollectConfigFiles"
		Inputs="@(ResolvedAssemblies)"
		Outputs="@(ResolvedAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" >
	<GetFilesThatExist
			Files="@(ResolvedAssemblies->'%(identity).config')">
		<Output TaskParameter="FilesThatExist" ItemName="_ResolvedConfigFiles" />
	</GetFilesThatExist>
</Target>

<Target Name="_CopyConfigFiles"
		Inputs="@(_ResolvedConfigFiles)"
		Outputs="@(_ResolvedConfigFiles->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
		DependsOnTargets="_CollectConfigFiles" >
	<CopyConfigFiles
			SourceFiles="@(_ResolvedConfigFiles)"
			DestinationFiles="@(_ResolvedConfigFiles->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
	/>
</Target>

<Target Name="_CollectMdbFiles"
		Inputs="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename)%(Extension)')"
		Outputs="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename)%(Extension).mdb')"
		DependsOnTargets="_CollectPdbFiles">
	<GetFilesThatExist
			Files="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename)%(Extension).mdb')"
			IgnoreFiles="@(_ResolvedPortablePdbFiles->'%(RootDir)%(Directory)%(Filename).dll.mdb')"
	>
		<Output TaskParameter="FilesThatExist" ItemName="_ResolvedMdbFiles" />
	</GetFilesThatExist>
</Target>

<Target Name="_CollectPdbFiles"
		Inputs="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename).pdb')"
		Outputs="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename)%(Extension).mdb')">
	<CollectPdbFiles
			ResolvedAssemblies="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename).pdb')">
		<Output TaskParameter="PdbFiles" ItemName="_ResolvedPdbFiles" />
		<Output TaskParameter="PortablePdbFiles" ItemName="_ResolvedPortablePdbFiles" />
	</CollectPdbFiles>
</Target>

<Target Name="_ConvertPdbFiles"
		Inputs="@(_ResolvedPdbFiles)"
		Outputs="@(_ResolvedPdbFiles->'%(RootDir)%(Directory)%(Filename).dll.mdb')"
		DependsOnTargets="_CollectPdbFiles">
	<ConvertDebuggingFiles Files="@(_ResolvedPdbFiles)">
		<Output TaskParameter="ConvertedFiles" ItemName="_ConvertedDebuggingFiles" />
	</ConvertDebuggingFiles>
	<WriteLinesToFile
		File="$(IntermediateOutputPath)$(CleanFile)"
		Lines="@(_ConvertedDebuggingFiles)"
		Overwrite="false" />
</Target>

<Target Name="_CopyPdbFiles"
		Inputs="@(_ResolvedPortablePdbFiles)"
		Outputs="@(_ResolvedPortablePdbFiles->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
		DependsOnTargets="_ConvertPdbFiles">
	<CopyMdbFiles
			SourceFiles="@(_ResolvedPortablePdbFiles)"
			DestinationFiles="@(_ResolvedPortablePdbFiles->'$(OutputPath)%(Filename)%(Extension)')">
		<Output TaskParameter="CopiedFiles" ItemName="_PdbFilesCopied" />
		<Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
	</CopyMdbFiles>
	<Copy
			SourceFiles="@(_ResolvedPortablePdbFiles->'$(OutputPath)%(Filename)%(Extension)')"
			DestinationFiles="@(_ResolvedPortablePdbFiles->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
			SkipUnchangedFiles="true">
		<Output TaskParameter="CopiedFiles" ItemName="_PdbDebugFilesCopiedToLinkerSrc" />
		<Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
	</Copy>
	<Touch Files="@(_DebugFilesCopiedToLinkerSrc)" />
	<WriteLinesToFile
		File="$(IntermediateOutputPath)$(CleanFile)"
		Lines="@(_PdbFilesCopied->'%(FullPath)');@(_PdbDebugFilesCopiedToLinkerSrc->'%(FullPath)')"
		Overwrite="false" />
</Target>

<Target Name="_CopyMdbFiles"
		Inputs="@(_ResolvedMdbFiles)"
		Outputs="@(_ResolvedMdbFiles->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
		DependsOnTargets="_CollectMdbFiles" >
	<CopyMdbFiles
			SourceFiles="@(_ResolvedMdbFiles)"
			DestinationFiles="@(_ResolvedMdbFiles->'$(OutputPath)%(Filename)%(Extension)')">
		<Output TaskParameter="CopiedFiles" ItemName="_MdbFilesCopied" />
	</CopyMdbFiles>
	<Copy
			SourceFiles="@(_ResolvedMdbFiles->'$(OutputPath)%(Filename)%(Extension)')"
			DestinationFiles="@(_ResolvedMdbFiles->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
			SkipUnchangedFiles="true">
		<Output TaskParameter="CopiedFiles" ItemName="_MdbDebugFilesCopiedToLinkerSrc" />
	</Copy>
	<Touch Files="@(_DebugFilesCopiedToLinkerSrc)" />
	<WriteLinesToFile
		File="$(IntermediateOutputPath)$(CleanFile)"
		Lines="@(_MdbFilesCopied->'%(FullPath)');@(_MdbDebugFilesCopiedToLinkerSrc->'%(FullPath)')"
		Overwrite="false" />
</Target>
	
<Target Name="_LinkAssemblies"
  DependsOnTargets="_ResolveAssemblies;_CreatePackageWorkspace;_LinkAssembliesNoShrink;_LinkAssembliesShrink" />

<Target Name="_LinkAssembliesNoShrink"
  Condition="'$(AndroidLinkMode)' == 'None'"
  Inputs="@(ResolvedUserAssemblies)"
  Outputs="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')">

    <LinkAssemblies
      UseSharedRuntime="$(AndroidUseSharedRuntime)"
      MainAssembly="$(MonoAndroidIntermediateAssemblyDir)$(TargetFileName)"
      OutputDirectory="$(MonoAndroidIntermediateAssemblyTempDir)"
      OptionalDestinationDirectory="$(MonoAndroidIntermediateAssemblyDir)"
      I18nAssemblies="$(MandroidI18n)"
      LinkMode="$(AndroidLinkMode)"
      LinkDescriptions="@(LinkDescription)"
      DumpDependencies="$(LinkerDumpDependencies)"
      LinkOnlyNewerThan="$(_AndroidLinkFlag)"
      ResolvedAssemblies="@(ResolvedAssemblies)" />

	<!-- We don't have to depend on flag file for NoShrink, but it is used to check timestamp -->
    <Touch Files="$(_AndroidLinkFlag)" AlwaysCreate="true" />
</Target>
	
<Target Name="_LinkAssembliesShrink"
  Condition="'$(AndroidLinkMode)' != 'None'"
  Inputs="@(ResolvedUserAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)');$(_AndroidBuildPropertiesCache)"
  Outputs="$(_AndroidLinkFlag)">

    <CreateProperty
    	Condition="'$(AndroidEnableProguard)' == 'True'"
    	Value="$(IntermediateOutputPath)proguard\proguard_project_references.cfg">
    	<Output TaskParameter="Value" PropertyName="_ProguardProjectConfiguration" />
    </CreateProperty>

    <MakeDir Condition="'$(AndroidEnableProguard)' == 'True'" Directories="$(IntermediateOutputPath)proguard" />

    <LinkAssemblies
      UseSharedRuntime="$(AndroidUseSharedRuntime)"
      MainAssembly="$(MonoAndroidLinkerInputDir)$(TargetFileName)"
      OutputDirectory="$(MonoAndroidIntermediateAssetsDir)"
      I18nAssemblies="$(MandroidI18n)"
      LinkMode="$(AndroidLinkMode)"
      LinkSkip="$(AndroidLinkSkip)"
      LinkDescriptions="@(LinkDescription)"
      ProguardConfiguration="$(_ProguardProjectConfiguration)"
      PreserveJniMarshalMethods="$(AndroidGenerateJniMarshalMethods)"
      EnableProguard="$(AndroidEnableProguard)"
      DumpDependencies="$(LinkerDumpDependencies)"
      ResolvedAssemblies="@(ResolvedAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
      HttpClientHandlerType="$(AndroidHttpClientHandlerType)"
      TlsProvider="$(AndroidTlsProvider)" />

    <!-- We have to use a flag instead of normal outputs because linking can delete unused assemblies -->
    <Touch Files="$(_AndroidLinkFlag)" AlwaysCreate="true" />
</Target>

<PropertyGroup>
	<_PrepareAssembliesDependsOnTargets>
		_ResolveAssemblies
		;_ResolveSatellitePaths
		;_CheckTargetFrameworks
		;_CreatePackageWorkspace
		;_StripEmbeddedLibraries
		;_LinkAssemblies
	</_PrepareAssembliesDependsOnTargets>
</PropertyGroup>
  
<Target Name="_PrepareAssemblies" DependsOnTargets="$(_PrepareAssembliesDependsOnTargets)">
  <!-- Update our assembly lists to the copies for linking.  We also need to verify
       they still exist cause linking will delete them if they aren't used -->
  <GetFilesThatExist
    Condition="'$(AndroidLinkMode)' != 'None'"
    Files="@(ResolvedAssemblies->'$(MonoAndroidIntermediateAssetsDir)%(Filename)%(Extension)')">
    <Output TaskParameter="FilesThatExist" ItemName="_ResolvedAssemblies" />
  </GetFilesThatExist>

  <GetFilesThatExist
    Condition="'$(AndroidLinkMode)' != 'None'"
    Files="@(ResolvedSymbols->'$(MonoAndroidIntermediateAssetsDir)%(Filename)%(Extension)')">
    <Output TaskParameter="FilesThatExist" ItemName="_ResolvedSymbols" />
  </GetFilesThatExist>

  <GetFilesThatExist
    Condition="'$(AndroidLinkMode)' != 'None'"
    Files="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssetsDir)%(Filename)%(Extension)')">
    <Output TaskParameter="FilesThatExist" ItemName="_ResolvedUserAssemblies" />
  </GetFilesThatExist>

  <GetFilesThatExist
    Condition="'$(AndroidLinkMode)' != 'None'"
    Files="@(ResolvedFrameworkAssemblies->'$(MonoAndroidIntermediateAssetsDir)%(Filename)%(Extension)')">
    <Output TaskParameter="FilesThatExist" ItemName="_ResolvedFrameworkAssemblies" />
  </GetFilesThatExist>

  <CreateItem
    Include="@(ResolvedAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
    Condition="'$(AndroidLinkMode)' == 'None'">
    <Output TaskParameter="Include" ItemName="_ResolvedAssemblies" />
  </CreateItem>

  <CreateItem
    Include="@(ResolvedSymbols->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
    Condition="'$(AndroidLinkMode)' == 'None'">
    <Output TaskParameter="Include" ItemName="_ResolvedSymbols" />
  </CreateItem>

  <CreateItem
    Include="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
    Condition="'$(AndroidLinkMode)' == 'None'">
    <Output TaskParameter="Include" ItemName="_ResolvedUserAssemblies" />
  </CreateItem>

  <CreateItem
    Include="@(ResolvedFrameworkAssemblies)"
    Condition="'$(AndroidLinkMode)' == 'None'">
    <Output TaskParameter="Include" ItemName="_ResolvedFrameworkAssemblies" />
  </CreateItem>

  <CreateItem
    Include="@(_ResolvedFrameworkAssemblies)"
    Condition="'$(AndroidLinkMode)' == 'None' OR '$(AndroidUseSharedRuntime)' == 'true'">
    <Output TaskParameter="Include" ItemName="_ShrunkFrameworkAssemblies" />
  </CreateItem>

  <CreateItem
    Include="@(_ResolvedFrameworkAssemblies->'$(MonoAndroidIntermediateAssetsDir)shrunk\%(Filename)%(Extension)')"
    Condition="'$(AndroidLinkMode)' != 'None' AND '$(AndroidUseSharedRuntime)' != 'true'">
    <Output TaskParameter="Include" ItemName="_ShrunkFrameworkAssemblies" />
  </CreateItem>
</Target>

<Target Name="_GenerateJavaStubs"
  DependsOnTargets="_SetLatestTargetFrameworkVersion;_PrepareAssemblies;$(_AfterPrepareAssemblies)"
  Inputs="$(MSBuildAllProjects);@(_ResolvedAssemblies);$(_AndroidManifestAbs);$(_AndroidBuildPropertiesCache);@(_AndroidResourceDest)"
  Outputs="$(IntermediateOutputPath)android\AndroidManifest.xml;$(_AcwMapFile);$(_AndroidTypeMappingJavaToManaged);$(_AndroidTypeMappingManagedToJava)">
  <GenerateJavaStubs
    ResolvedAssemblies="@(_ResolvedAssemblies)"
    ResolvedUserAssemblies="@(_ResolvedUserAssemblies)"
    ErrorOnCustomJavaObject="$(AndroidErrorOnCustomJavaObject)"
	ManifestTemplate="$(_AndroidManifestAbs)"
	MergedManifestDocuments="@(ExtractedManifestDocuments)"
	Debug="$(AndroidIncludeDebugSymbols)"
	NeedsInternet="$(AndroidNeedsInternetPermission)"
	AndroidSdkPlatform="$(_AndroidApiLevel)"
	AndroidSdkDir="$(_AndroidSdkDirectory)"
	PackageName="$(_AndroidPackage)"
	ManifestPlaceholders="$(AndroidManifestPlaceholders)"
	OutputDirectory="$(IntermediateOutputPath)android"
	MergedAndroidManifestOutput="$(IntermediateOutputPath)android\AndroidManifest.xml"
    UseSharedRuntime="$(AndroidUseSharedRuntime)"
	EmbedAssemblies="$(EmbedAssembliesIntoApk)"
	ResourceDirectory="$(MonoAndroidResDirIntermediate)"
	BundledWearApplicationName="$(BundledWearApplicationPackageName)"
	PackageNamingPolicy="$(AndroidPackageNamingPolicy)"
	ApplicationJavaClass="$(AndroidApplicationJavaClass)"
	AcwMapFile="$(_AcwMapFile)">
  </GenerateJavaStubs>
  <ConvertResourcesCases 
	ResourceDirectories="$(MonoAndroidResDirIntermediate);@(LibraryResourceDirectories)"
	AcwMapFile="$(_AcwMapFile)" />
</Target>

<Target Name="_GetAddOnPlatformLibraries" DependsOnTargets="_GenerateJavaStubs">
  <GetAddOnPlatformLibraries
	AndroidSdkPlatform="$(_AndroidApiLevel)"
	AndroidSdkDir="$(_AndroidSdkDirectory)"
	Manifest="$(IntermediateOutputPath)android\AndroidManifest.xml">
	<Output TaskParameter="AddOnPlatformLibraries" ItemName="AddOnPlatformLibraries" />
  </GetAddOnPlatformLibraries>
</Target>

<Target Name="_GeneratePackageManagerJava"
  DependsOnTargets="_GetAddOnPlatformLibraries;_AddStaticResources;_PrepareAssemblies"
  Inputs="$(MSBuildAllProjects);@(_ResolvedAssemblies);@(_ResolvedUserAssemblies);$(MSBuildProjectFile);$(_AndroidBuildPropertiesCache)"
  Outputs="$(IntermediateOutputPath)android\src\mono\MonoPackageManager.java">
  <!-- Create java needed for Mono runtime -->
  <GeneratePackageManagerJava
    ResolvedAssemblies="@(_ResolvedAssemblies)"
    ResolvedUserAssemblies="@(_ResolvedUserAssemblies)"
    MainAssembly="$(MonoAndroidLinkerInputDir)$(TargetFileName)"
    OutputDirectory="$(IntermediateOutputPath)android\src\mono" 
    UseSharedRuntime="$(AndroidUseSharedRuntime)"
    TargetFrameworkVersion="$(_TargetFrameworkVersion)" 
    Manifest="$(IntermediateOutputPath)android\AndroidManifest.xml" />
</Target>

<PropertyGroup>
	<_CreateBaseApkDependsOnTargets>
		_GetAddOnPlatformLibraries;
		_GetLibraryImports;
		_CheckDuplicateJavaLibraries;
		_GetAdditionalResourcesFromAssemblies;
		_CreateAdditionalResourceCache;
		UpdateAndroidAssets;
		$(_AfterCreateBaseApkDependsOnTargets);
	</_CreateBaseApkDependsOnTargets>
	<_CreateBaseApkInputs>
		$(MSBuildAllProjects)
		;$(IntermediateOutputPath)android\AndroidManifest.xml
		;@(_AndroidResourceDest)
		;@(_AndroidAssetsDest)
		;$(_AcwMapFile)
		;@(_LibraryResourceDirectoryStamps)
		;$(_AndroidBuildPropertiesCache)
	</_CreateBaseApkInputs>
</PropertyGroup>

<Target Name="_CreateBaseApk"
  DependsOnTargets="$(_CreateBaseApkDependsOnTargets)"
  Inputs="$(_CreateBaseApkInputs)"
  Outputs="$(_PackagedResources)">
  <!-- Create a temporary directory to work in, or else R.java will always get updated -->
  <CreateTemporaryDirectory>
    <Output TaskParameter="TemporaryDirectory" PropertyName="AaptTemporaryDirectory" />
  </CreateTemporaryDirectory>

  <GetExtraPackages
  	IntermediateOutputPath="$(IntermediateOutputPath)"
  	LibraryProjectImportsDirectoryName="$(_LibraryProjectImportsDirectoryName)">
    <Output TaskParameter="ExtraPackages" PropertyName="AaptExtraPackages" />
  </GetExtraPackages>
  
  <CollectLibraryAssets
    AdditionalAssetDirectories="@(LibraryAssetDirectories)"
    AssetDirectory="$(MonoAndroidAssetsDirIntermediate)" />

  <!-- Create the base .apk with resources and assets -->
  <Aapt
	Condition="'$(_AndroidUseAapt2)' != 'True'"
	ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
	OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
	UseShortFileNames="$(UseShortFileNames)"
    JavaPlatformJarPath="$(JavaPlatformJarPath)"
    ManifestFiles="$(IntermediateOutputPath)android\AndroidManifest.xml"
    ResourceDirectory="$(MonoAndroidResDirIntermediate)"
    JavaDesignerOutputDirectory="$(AaptTemporaryDirectory)"
    ResourceOutputFile="$(_PackagedResources)"
    ExtraPackages="$(AaptExtraPackages)"
    AdditionalResourceDirectories="@(LibraryResourceDirectories)"
    ExtraArgs="$(AndroidResgenExtraArgs)"
    PackageName="$(_AndroidPackage)"
    ApplicationName="$(_AndroidPackage)"
    UncompressedFileExtensions="$(AndroidStoreUncompressedFileExtensions)"
    AssetDirectory="$(MonoAndroidAssetsDirIntermediate)"
    ToolPath="$(AaptToolPath)"
    ToolExe="$(AaptToolExe)"
    AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
    ApiLevel="$(_AndroidTargetSdkVersion)"
    AndroidUseLatestPlatformSdk="$(AndroidUseLatestPlatformSdk)"
	ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
    AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
    SupportedAbis="$(_BuildTargetAbis)"
    CreatePackagePerAbi="$(AndroidCreatePackagePerAbi)"
    YieldDuringToolExecution="$(YieldDuringToolExecution)"
    ExplicitCrunch="$(AndroidExplicitCrunch)"
    VersionCodePattern="$(AndroidVersionCodePattern)"
    VersionCodeProperties="$(AndroidVersionCodeProperties)"
    AndroidSdkPlatform="$(_AndroidApiLevel)"
  />
  <Aapt2Link
    Condition="'$(_AndroidUseAapt2)' == 'True'"
    CompiledResourceFlatArchive="$(IntermediateOutputPath)\compiled.flata"
    ResourceNameCaseMap="$(_AndroidResourceNameCaseMap)"
    ResourceDirectories="$(MonoAndroidResDirIntermediate)"
    AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
    UseShortFileNames="$(UseShortFileNames)"
    ImportsDirectory="$(_LibraryProjectImportsDirectoryName)"
    OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
    OutputFile="$(_PackagedResources)"
    AdditionalResourceDirectories="@(LibraryResourceDirectories)"
    AdditionalAndroidResourcePaths="@(_AdditonalAndroidResourceCachePaths)"
    YieldDuringToolExecution="$(YieldDuringToolExecution)"
    PackageName="$(_AndroidPackage)"
    ApplicationName="$(_AndroidPackage)"
    JavaPlatformJarPath="$(JavaPlatformJarPath)"
    VersionCodePattern="$(AndroidVersionCodePattern)"
    VersionCodeProperties="$(AndroidVersionCodeProperties)"
    SupportedAbis="$(_BuildTargetAbis)"
    CreatePackagePerAbi="$(AndroidCreatePackagePerAbi)"
    AssetsDirectory="$(MonoAndroidAssetsDirIntermediate)"
    AndroidSdkPlatform="$(_AndroidApiLevel)"
    JavaDesignerOutputDirectory="$(AaptTemporaryDirectory)"
    ManifestFiles="$(IntermediateOutputPath)android\AndroidManifest.xml"
    ToolPath="$(Aapt2ToolPath)"
    ToolExe="$(Aapt2ToolExe)"
  />
  <Touch Files="$(_PackagedResources)" />
  <!-- LibraryProjectJars must not be used for aapt in BuildApk*, or it will *bundle* the jar! -->

  <!-- Only copy if the file contents changed, so users only get Reload? dialog for real changes -->
  <CopyGeneratedJavaResourceClasses
    SourceTopDirectory="$(AaptTemporaryDirectory)"
    DestinationTopDirectory="$(IntermediateOutputPath)android\src"
    PrimaryPackageName="$(_AndroidPackage)"
    ExtraPackages="$(AaptExtraPackages)">
    <Output TaskParameter="PrimaryJavaResgenFile" PropertyName="_GeneratedPrimaryJavaResgenFile" />
  </CopyGeneratedJavaResourceClasses>

  <!-- Delete our temporary directory -->
  <RemoveDirFixed Directories="$(AaptTemporaryDirectory)" />
</Target>

<Target Name="_FindJavaStubFiles" DependsOnTargets="_GetAddOnPlatformLibraries">
  <CreateItem
    Include="$(IntermediateOutputPath)android\src\\**\*.java">
    <Output TaskParameter="Include" ItemName="_JavaStubFiles" />
  </CreateItem>
</Target>

<Target Name="_AdjustJavacVersionArguments">

	<AdjustJavacVersionArguments
			Condition=" '$(JavacTargetVersion)' == '' or '$(JavacSourceVersion)' == '' "
			JdkVersion="$(_JdkVersion)"
			DefaultJdkVersion="$(_DefaultJdkVersion)"
			SkipJavacVersionCheck="$(AndroidSkipJavacVersionCheck)"
			EnableProguard="$(AndroidEnableProguard)"
			EnableMultiDex="$(AndroidEnableMultiDex)">
	    <Output TaskParameter="TargetVersion" PropertyName="JavacTargetVersion" />
	    <Output TaskParameter="SourceVersion" PropertyName="JavacSourceVersion" />
	</AdjustJavacVersionArguments>
</Target>

<PropertyGroup>
    <_CompileJavaDependsOnTargets>
		_AdjustJavacVersionArguments;
		_GeneratePackageManagerJava;
		_FindJavaStubFiles;
		_AddStaticResources;
		_GetMonoPlatformJarPath;
		$(_OnResolveMonoAndroidSdks);
		_GetLibraryImports;
		_CheckDuplicateJavaLibraries;
		_CreateBaseApk;
		_GetAdditionalResourcesFromAssemblies;
		_CreateAdditionalResourceCache;
		_DetermineJavaLibrariesToCompile;
		$(_CompileJavaDependsOnTargets)
	</_CompileJavaDependsOnTargets>
</PropertyGroup>

<Target Name="_CompileJava"
  DependsOnTargets="$(_CompileJavaDependsOnTargets)"
  Inputs="$(MSBuildAllProjects);$(MonoPlatformJarPath);@(_JavaStubFiles);@(AndroidJavaSource);@(AddOnPlatformLibraries)"
  Outputs="$(IntermediateOutputPath)_javac.stamp">

  <!-- Compile java code -->
  <Javac
    JavaPlatformJarPath="$(JavaPlatformJarPath)"
    ClassesOutputDirectory="$(IntermediateOutputPath)android\bin\classes"
    TargetFrameworkDirectory="$(TargetFrameworkDirectory)"
    StubSourceDirectory="$(IntermediateOutputPath)android\src"
    JavaSourceFiles="@(AndroidJavaSource)"
    ToolPath="$(JavacToolPath)"
    ToolExe="$(JavacToolExe)"
    Jars="@(_JavaLibrariesToCompile);@(_InstantRunJavaReference);@(_ReferenceJavaLibs)"
    JavacTargetVersion="$(JavacTargetVersion)"
    JavacSourceVersion="$(JavacSourceVersion)"
  />

  <Touch Files="$(IntermediateOutputPath)_javac.stamp" AlwaysCreate="true" />
</Target>


<Target Name="_DetermineJavaLibrariesToCompile">

  <DetermineJavaLibrariesToCompile
    MonoPlatformJarPath="$(MonoPlatformJarPath)"
    JavaSourceFiles="@(AndroidJavaSource)" 
    JavaLibraries="@(AndroidJavaLibrary)"
    ExternalJavaLibraries="@(AndroidExternalJavaLibrary)"
    LibraryProjectJars="@(ExtractedJarImports)"
    DoNotPackageJavaLibraries="@(_ResolvedDoNotPackageAttributes)"
    EnableInstantRun="$(_InstantRunEnabled)"
    AdditionalJavaLibraryReferences="@(_AdditionalJavaLibraryReferences)"
    >
    <Output TaskParameter="JavaLibrariesToCompile" ItemName="_JavaLibrariesToCompile" />
    <Output TaskParameter="ReferenceJavaLibraries" ItemName="_ReferenceJavaLibs" />
  </DetermineJavaLibrariesToCompile>
  
  <CreateItem Include="@(_JavaLibrariesToCompile)" Condition="'$(_InstantRunEnabled)' != 'True'">
    <Output TaskParameter="Include" ItemName="_JavaLibrariesToCompileForAppDx" />
  </CreateItem>
</Target>

<Target Name="_FindCompiledJavaFiles" DependsOnTargets="_CompileJava">
  <CreateItem
    Include="$(IntermediateOutputPath)android\bin\classes\\**\*.class">
    <Output TaskParameter="Include" ItemName="_CompiledJavaFiles" />
  </CreateItem>
</Target>

<PropertyGroup>
	<_CompileToDalvikDependsOnTargets>
		_FindCompiledJavaFiles;
		_GetMonoPlatformJarPath;
		_GetAdditionalResourcesFromAssemblies;
		_CreateAdditionalResourceCache;
		_GetLibraryImports
	</_CompileToDalvikDependsOnTargets>
	<_CompileToDalvikInputs>
		$(MSBuildAllProjects)
		;@(_JavaLibrariesToCompileForAppDx)
		;@(AndroidExternalJavaLibrary)
		;@(_CompiledJavaFiles)
		;@(ProguardConfiguration)
		;@(MultiDexMainDexList)
		;$(_AndroidBuildPropertiesCache)
	</_CompileToDalvikInputs>
</PropertyGroup>

<Target Name="_CompileToDalvikWithDx"
  DependsOnTargets="$(_CompileToDalvikDependsOnTargets)"
  Inputs="$(_CompileToDalvikInputs)"
  Outputs="$(IntermediateOutputPath)_dex_stamp">

  <!-- Desugar if exists -->
  <Error
    Condition="'$(AndroidEnableDesugar)' == 'True' And !Exists('$(DesugarJarPath)')"
    Text="'desugar' tool is not found. The specified DesugarJarPath '$(DesugarJarPath)' does not exist." />
  <Desugar
    Condition="'$(AndroidEnableDesugar)' == 'True'"
    DesugarExtraArguments="$(DesugarExtraArguments)"
    JavaPlatformJarPath="$(JavaPlatformJarPath)"
    DesugarJarPath="$(DesugarJarPath)"
    ToolPath="$(JavaToolPath)"
    JavaMaximumHeapSize="$(JavaMaximumHeapSize)"
    JavaOptions="$(JavaOptions)"
    InputClassesDirectory="$(IntermediateOutputPath)android\bin\classes"
    InputJars="@(_JavaLibrariesToCompileForAppDx)"
    ManifestFile="$(IntermediateOutputPath)android\AndroidManifest.xml"
    OutputDirectory="$(IntermediateOutputPath)android\bin\desugared">
    <Output TaskParameter="OutputJars" ItemName="_DesugaredJars" />
  </Desugar>

  <CreateItem Include="@(_DesugaredJars)"
    Condition="'$(AndroidEnableDesugar)' == 'True'">
    <Output TaskParameter="Include" ItemName="_JarsToProguard" />
  </CreateItem>
  <CreateItem Include="@(_JavaLibrariesToCompile)"
    Condition="'$(AndroidEnableDesugar)' != 'True'">
    <Output TaskParameter="Include" ItemName="_JarsToProguard" />
  </CreateItem>
  
  <MakeDir Directories="$(IntermediateOutputPath)proguard" />

  <Proguard
    Condition="'$(AndroidEnableProguard)' == 'True' and '$(_ProguardProjectConfiguration)' != ''"
    ProguardJarPath="$(ProguardJarPath)"
    AndroidSdkDirectory="$(_AndroidSdkDirectory)"
    JavaToolPath="$(JavaToolPath)"
    ProguardToolPath="$(ProguardToolPath)"
    ToolExe="$(ProguardToolExe)"
    UseProguard="$(UseProguard)"
    JavaPlatformJarPath="$(JavaPlatformJarPath)"
    ClassesOutputDirectory="$(IntermediateOutputPath)android\bin\classes"
    AcwMapFile="$(_AcwMapFile)"
    ProguardCommonXamarinConfiguration="$(IntermediateOutputPath)proguard\proguard_xamarin.cfg"
    ProguardGeneratedReferenceConfiguration="$(_ProguardProjectConfiguration)"
    ProguardGeneratedApplicationConfiguration="$(IntermediateOutputPath)proguard\proguard_project_primary.cfg"
    ProguardConfigurationFiles="$(ProguardConfigFiles)"
    JavaLibrariesToEmbed="@(_JarsToProguard);@(_InstantRunJavaReference)"
    ExternalJavaLibraries="@(AndroidExternalJavaLibrary)"
    DoNotPackageJavaLibraries="@(_ResolvedDoNotPackageAttributes)"
    ProguardJarOutput="$(IntermediateOutputPath)proguard\__proguard_output__.jar"
    EnableLogging="$(ProguardEnableLogging)"
    DumpOutput="$(IntermediateOutputPath)proguard\dump.txt"
    PrintSeedsOutput="$(IntermediateOutputPath)proguard\seeds.txt"
    PrintUsageOutput="$(IntermediateOutputPath)proguard\usage.txt"
    PrintMappingOutput="$(IntermediateOutputPath)proguard\mapping.txt"
    ProguardInputJarFilter="$(_AndroidProguardInputJarFilter)"
     />

  <CreateItem 
    Include="$(IntermediateOutputPath)proguard\__proguard_output__.jar"
    Condition="'$(AndroidEnableProguard)' == 'True' and '$(_ProguardProjectConfiguration)' != ''">
    <Output TaskParameter="Include" ItemName="_AlternativeJarForAppDx" />
  </CreateItem>
  <CreateItem
    Include="@(_DesugaredJars)"
    Condition="('$(AndroidEnableProguard)' != 'True' or '$(_ProguardProjectConfiguration)' == '') and '$(AndroidEnableDesugar)' == 'True'">
    <Output TaskParameter="Include" ItemName="_AlternativeJarForAppDx" />
  </CreateItem>

  <CreateMultiDexMainDexClassList
    Condition="'$(AndroidEnableMultiDex)' == 'True' And '$(AndroidCustomMainDexListFile)' == ''"
    ToolPath="$(JavaToolPath)"
    ToolExe="$(JavaToolExe)"
    ProguardJarPath="$(ProguardJarPath)"
    AndroidSdkBuildToolsPath="$(AndroidSdkBuildToolsPath)"
    ClassesOutputDirectory="$(IntermediateOutputPath)android\bin\classes"
    JavaLibraries="@(_JarsToProguard)"
    MultiDexMainDexListFile="$(_AndroidMainDexListFile)"
    CustomMainDexListFiles="@(MultiDexMainDexList)"
    ProguardInputJarFilter="$(_AndroidProguardInputJarFilter)"
    >
  </CreateMultiDexMainDexClassList>

  <!-- remove existing dex files that may be previous multidex outputs. -->
  <Delete Files="$(IntermediateOutputPath)android\bin\classes\*.dex" />

  <!-- Compile java code to dalvik -->
  <CompileToDalvik 
    DxJarPath="$(DxJarPath)"
    DxExtraArguments="$(DxExtraArguments)"
    JavaToolPath="$(JavaToolPath)"
    JavaMaximumHeapSize="$(JavaMaximumHeapSize)"
    JavaOptions="$(JavaOptions)"
    ClassesOutputDirectory="$(IntermediateOutputPath)android\bin\classes"
    ToolPath="$(DxToolPath)"
    ToolExe="$(DxToolExe)"
    UseDx="$(UseDx)"
    MultiDexEnabled="$(AndroidEnableMultiDex)"
    MultiDexMainDexListFile="$(_AndroidMainDexListFile)"
    JavaLibrariesToCompile="@(_JavaLibrariesToCompileForAppDx)"
    AlternativeJarFiles="@(_AlternativeJarForAppDx)"
  />
  <Touch Files="$(IntermediateOutputPath)_dex_stamp" AlwaysCreate="true" />

</Target>

<Target Name="_CompileDex"
		DependsOnTargets="_CompileToDalvikWithDx">

	<ItemGroup>
		<_DexFile Include="$(IntermediateOutputPath)android\bin\dex\*.dex" />
		<_DexFile Include="$(IntermediateOutputPath)android\bin\*.dex" />
		<_AndroidNativeLibraryForFastDev Include="@(AndroidNativeLibrary)" />
	</ItemGroup>
</Target>

<Target Name="_RemoveRegisterAttribute"
  DependsOnTargets="_PrepareAssemblies"
  Inputs="@(_ResolvedFrameworkAssemblies);$(_AndroidBuildPropertiesCache)"
  Outputs="$(_RemoveRegisterFlag)"
  Condition="'$(AndroidLinkMode)' != 'None' AND '$(AndroidUseSharedRuntime)' != 'true'">

  <!-- Make a copy of every assembly into assets\shrunk -->
  <Copy
    SourceFiles="@(_ResolvedFrameworkAssemblies)"
    DestinationFiles="@(_ShrunkFrameworkAssemblies)"
    SkipUnchangedFiles="true" />

  <CopyConfigFiles
    SourceFiles="@(_ResolvedFrameworkAssemblies->'%(Identity).config')"
    DestinationFiles="@(_ShrunkFrameworkAssemblies->'%(Identity).config')" />
  
  <!-- Shrink Mono.Android.dll by removing attribute only needed for GenerateJavaStubs -->
  <RemoveRegisterAttribute
    Condition="'$(AndroidLinkMode)' != 'None' AND '$(AndroidUseSharedRuntime)' != 'true'"
    ShrunkFrameworkAssemblies="@(_ShrunkFrameworkAssemblies)" />

  <MakeDir Directories="$(MonoAndroidIntermediateAssetsDir)shrunk" />
  <Touch Files="$(_RemoveRegisterFlag)" AlwaysCreate="true" />
</Target>

<Target Name="_ResolveSatellitePaths"
    DependsOnTargets="_ResolveAssemblies"
>
  <ResolveAssemblyReference
      AllowedAssemblyExtensions="$(AllowedReferenceAssemblyFileExtensions)"
      AssemblyFiles="@(ResolvedUserAssemblies)"
      AutoUnify="$(AutoUnifyAssemblyReferences)"
      FindDependencies="True"
      FindRelatedFiles="False"
      FindSatellites="True"
      SearchPaths="$(AssemblySearchPaths)"
      TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
      TargetFrameworkMonikerDisplayName="$(TargetFrameworkMonikerDisplayName)"
      TargetFrameworkDirectories="$(TargetFrameworkDirectory)">
    <Output TaskParameter="SatelliteFiles" ItemName="_AndroidResolvedSatellitePaths"/>
  </ResolveAssemblyReference>
</Target>

<Target Name="_CheckApkPerAbiFlag">
   <Delete Files="$(ApkFileIntermediate)" Condition="Exists('$(ApkFileIntermediate)') And '$(AndroidCreatePackagePerAbi)' == 'true' And !Exists ('$(_AndroidApkPerAbiFlagFile)')" />
   <Delete Files="$(_AndroidApkPerAbiFlagFile)" Condition="'$(AndroidCreatePackagePerAbi)' != 'true'" />
   <Touch Files="$(_AndroidApkPerAbiFlagFile)" Condition="'$(AndroidCreatePackagePerAbi)' == 'true'" AlwaysCreate="True" />
</Target>

<PropertyGroup>
	<_PrepareBuildApkDependsOnTargets>
		_SetLatestTargetFrameworkVersion;
		_GetLibraryImports;
		_RemoveRegisterAttribute;
		_StripEmbeddedLibraries;
		_LinkAssemblies;
		_GetAddOnPlatformLibraries;
		_CompileDex;
		$(_AfterCompileDex);
		_CompileJava;
		_CreateBaseApk;
		_PrepareAssemblies;
		_ResolveSatellitePaths;
		_CheckApkPerAbiFlag
		;_LintChecks
	</_PrepareBuildApkDependsOnTargets>
</PropertyGroup>

<Target Name="_PrepareBuildApk"
  DependsOnTargets="$(_PrepareBuildApkDependsOnTargets)" />

<PropertyGroup>
	<_BuildApkEmbedInputs>
		$(MSBuildAllProjects)
		;$(_PackagedResources)
		;@(_ResolvedUserAssemblies)
		;@(_ShrunkFrameworkAssemblies)
		;@(AndroidNativeLibrary)
		;@(_DexFile)
		;$(_AndroidTypeMappingJavaToManaged)
		;$(_AndroidTypeMappingManagedToJava)
		;$(_AndroidBuildPropertiesCache)
	</_BuildApkEmbedInputs>
</PropertyGroup>

<Target Name="_BuildApkEmbed"
  DependsOnTargets="_PrepareBuildApk"
  Inputs="$(_BuildApkEmbedInputs)"
  Outputs="$(ApkFileIntermediate)"
  Condition="'$(EmbedAssembliesIntoApk)' == 'True'">

  <Aot
	Condition="'$(AotAssemblies)' == 'True'"
	AndroidAotMode="$(AndroidAotMode)"
	AndroidNdkDirectory="$(_AndroidNdkDirectory)"
	AndroidApiLevel="$(_AndroidApiLevel)"
	ManifestFile="$(IntermediateOutputPath)android\AndroidManifest.xml"
	SupportedAbis="$(_BuildTargetAbis)"
	AndroidSequencePointsMode="$(_SequencePointsMode)"
	AotAdditionalArguments="$(AndroidAotAdditionalArguments)"
	ResolvedAssemblies="@(_ResolvedUserAssemblies);@(_ShrunkFrameworkAssemblies)"
	AotOutputDirectory="$(_AndroidAotBinDirectory)"
	IntermediateAssemblyDir="$(MonoAndroidIntermediateAssemblyDir)"
	LinkMode="$(AndroidLinkMode)"
	AdditionalNativeLibraryReferences="@(_AdditionalNativeLibraryReferences)"
	YieldDuringToolExecution="$(YieldDuringToolExecution)"
	EnableLLVM="$(EnableLLVM)">
	   <Output TaskParameter="NativeLibrariesReferences" ItemName="_AdditionalNativeLibraryReferences" />
  </Aot>

  <!-- Strip the IL code of the resolved managed assemblies -->
   <CilStrip
	Condition=" '$(AndroidAotMode)' == 'Hybrid' And '$(AotAssemblies)' == 'True' "
	AndroidAotMode="$(AndroidAotMode)"
	ToolPath="$(_MonoAndroidToolsDirectory)"
	ResolvedAssemblies="@(_ResolvedAssemblies)">
  </CilStrip> 

  <!-- Bundle the assemblies into native libraries in the apk -->
  <MakeBundleNativeCodeExternal
		Condition="'$(BundleAssemblies)' == 'True'"
		AndroidNdkDirectory="$(_AndroidNdkDirectory)"
		Assemblies="@(_ResolvedUserAssemblies);@(_AndroidResolvedSatellitePaths);@(_ShrunkFrameworkAssemblies)"
		IncludePath="$(MonoAndroidIncludeDirectory)"
		SupportedAbis="$(_BuildTargetAbis)"
		TempOutputPath="$(IntermediateOutputPath)"
		ToolPath="$(_MonoAndroidToolsDirectory)">
 	<Output TaskParameter="OutputNativeLibraries" PropertyName="_BundleResultNativeLibraries" />
  </MakeBundleNativeCodeExternal>
  <!-- Put the assemblies and native libraries in the apk -->
  <BuildApk
    AndroidNdkDirectory="$(_AndroidNdkDirectory)"
    ApkInputPath="$(_PackagedResources)"
    ApkOutputPath="$(ApkFileIntermediate)"
    BundleAssemblies="$(BundleAssemblies)"
    BundleNativeLibraries="$(_BundleResultNativeLibraries)"
    EmbedAssemblies="$(EmbedAssembliesIntoApk)"
    Environments="@(AndroidEnvironment);@(LibraryEnvironments)"
    ResolvedUserAssemblies="@(_ResolvedUserAssemblies);@(_AndroidResolvedSatellitePaths)"
    ResolvedFrameworkAssemblies="@(_ShrunkFrameworkAssemblies)"
    NativeLibraries="@(AndroidNativeLibrary)"
    AdditionalNativeLibraryReferences="@(_AdditionalNativeLibraryReferences)"
    EmbeddedNativeLibraryAssemblies="$(OutDir)$(TargetFileName);@(ReferencePath);@(ReferenceDependencyPaths)"
    DalvikClasses="@(_DexFile)"
    SupportedAbis="$(_BuildTargetAbis)"
    CreatePackagePerAbi="$(AndroidCreatePackagePerAbi)"
    UseSharedRuntime="$(AndroidUseSharedRuntime)"
    Debug="$(AndroidIncludeDebugSymbols)"
    PreferNativeLibrariesWithDebugSymbols="$(AndroidPreferNativeLibrariesWithDebugSymbols)"
    TypeMappings="$(_AndroidTypeMappingJavaToManaged);$(_AndroidTypeMappingManagedToJava)"
    AndroidAotMode="$(AndroidAotMode)"
    EnableLLVM="$(EnableLLVM)"
    JavaSourceFiles="@(AndroidJavaSource)"
    JavaLibraries="@(AndroidJavaLibrary)"
    AndroidSequencePointsMode="$(_SequencePointsMode)"
    LibraryProjectJars="@(ExtractedJarImports)"
    AndroidEmbedProfilers="$(AndroidEmbedProfilers)"
    HttpClientHandlerType="$(AndroidHttpClientHandlerType)"
    TlsProvider="$(AndroidTlsProvider)"
    EnableSGenConcurrent="$(AndroidEnableSGenConcurrent)">
    <Output TaskParameter="BuildId" PropertyName="_XamarinBuildId" />
    <Output TaskParameter="OutputFiles" ItemName="ApkFiles" />
  </BuildApk>
</Target>

<PropertyGroup>
	<_CopyPackageInputs>
		$(MSBuildAllProjects)
		;@(ReferencePath)
		;@(ReferenceDependencyPaths)
		;$(ApkFileIntermediate)
		;$(_AndroidBuildPropertiesCache)
		;@(ApkFiles)
	</_CopyPackageInputs>
</PropertyGroup>

<Target Name="_DefineBuildTargetAbis" DependsOnTargets="$(_BeforeDefineBuildTargetAbis)">
	<CreateProperty Value="$(AndroidSupportedAbis)" Condition="'$(_BuildTargetAbis)' == ''">
		<Output TaskParameter="Value" PropertyName="_BuildTargetAbis"/>
	</CreateProperty>
	<Message Text="Build target ABI: $(_BuildTargetAbis)" />
</Target>

<PropertyGroup>
	<_CopyPackageDependsOn>
		_DefineBuildTargetAbis
		;_BuildApkEmbed
	</_CopyPackageDependsOn>
</PropertyGroup>

<Target Name="_CopyPackage"
  DependsOnTargets="$(_CopyPackageDependsOn)"
  Inputs="$(_CopyPackageInputs)"
  Outputs="$(ApkFile)">

  <Delete Files="$(ApkFile)" Condition="Exists ('$(ApkFile)')" />

  <Copy SourceFiles="%(ApkFiles.FullPath)" DestinationFolder="$(OutDir)" />

  <MakeDir Directories="$(OutDir)$(_AndroidPackage).apk.mSYM" Condition=" '$(MonoSymbolArchive)' == 'True' " />
  <Exec
    Command="&quot;$(MonoAndroidBinDirectory)mono-symbolicate&quot; store-symbols &quot;$(OutDir)$(_AndroidPackage).apk.mSYM&quot; &quot;$(MonoAndroidIntermediate)android/assets&quot;"
    Condition=" '$(MonoSymbolArchive)' == 'True' "
  />

  <ItemGroup>
    <_BuiltAbis Include="$(_BuildTargetAbis)" />
    <_SymbolicateFiles Include="$(_AndroidAotBinDirectory)\%(_BuiltAbis.Identity)\**\*.msym" />
  </ItemGroup>

  <Copy Condition=" '$(MonoSymbolArchive)' == 'True' And '%(_SymbolicateFiles.Filename)' != '' "
    SourceFiles="%(_SymbolicateFiles.Identity)"
    DestinationFolder="$(OutDir)$(_AndroidPackage).apk.mSYM\%(_SymbolicateFiles.RecursiveDir)"
    SkipUnchangedFiles="true"
  />

  <CreateMsymManifest
     Condition=" '$(_XamarinBuildId)' != '' And '$(MonoSymbolArchive)' == 'True' "
     BuildId="$(_XamarinBuildId)"
     PackageName="$(_AndroidPackage)"
     OutputDirectory="$(OutDir)$(_AndroidPackage).apk.mSYM"
   />

  <WriteLinesToFile
    Condition=" '$(MonoSymbolArchive)' == 'True' "
    File="$(IntermediateOutputPath)$(CleanFile)"
    Lines="@(_SymbolicateFiles->'$(OutDir)$(_AndroidPackage).apk.mSYM\%(Filename)%(Extension)')"
    Overwrite="false"/>

  <WriteLinesToFile
    Condition=" '$(MonoSymbolArchive)' == 'True' And '%(_SymbolicateFiles.Filename)' != '' "
    File="$(IntermediateOutputPath)$(CleanFile)"
    Lines="$(OutDir)$(_AndroidPackage).apk.mSYM\%(_SymbolicateFiles.RecursiveDir)%(_SymbolicateFiles.Filename)%(_SymbolicateFiles.Extension)"
    Overwrite="false"/>

  <Delete Files="$(_UploadFlagFile)" Condition="Exists ('$(_UploadFlagFile)')" />
</Target>

<Target Name="_CreateAndroidDebugSigningKey"
		Condition="!Exists ('$(_ApkDebugKeyStore)')"
		DependsOnTargets="$(_OnResolveMonoAndroidSdks)"
	>
	<AndroidCreateDebugKey
		KeyStore="$(_ApkDebugKeyStore)"
		KeyAlias="androiddebugkey"
		KeyPass="android"
		StorePass="android"
		KeyAlgorithm="$(AndroidDebugKeyAlgorithm)"
		Validity="$(AndroidDebugKeyValidity)"
		ToolPath="$(KeytoolToolPath)"
		ToolExe="$(KeytoolToolExe)"
		Command="-genkeypair"
	 />
</Target>

<Target Name="_ResolveAndroidSigningKey" DependsOnTargets="$(_OnResolveMonoAndroidSdks);_CreateAndroidDebugSigningKey">
	<!-- would use a PropertyGroup here but xbuild doesn't support it -->
	<CreateProperty Value="$(_ApkDebugKeyStore)" Condition="'$(AndroidKeyStore)'!='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyStore"/>
	</CreateProperty>
	<CreateProperty Value="android" Condition="'$(AndroidKeyStore)'!='True'">
		<Output TaskParameter="Value" PropertyName="_ApkStorePass"/>
	</CreateProperty>
	<CreateProperty Value="androiddebugkey" Condition="'$(AndroidKeyStore)'!='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyAlias"/>
	</CreateProperty>
	<CreateProperty Value="android" Condition="'$(AndroidKeyStore)'!='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyPass"/>
	</CreateProperty>
	
	<CreateProperty Value="$(AndroidSigningKeyStore)" Condition="'$(AndroidKeyStore)'=='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyStore"/>
	</CreateProperty>
	<CreateProperty Value="$(AndroidSigningStorePass)" Condition="'$(AndroidKeyStore)'=='True'">
		<Output TaskParameter="Value" PropertyName="_ApkStorePass"/>
	</CreateProperty>
	<CreateProperty Value="$(AndroidSigningKeyAlias)" Condition="'$(AndroidKeyStore)'=='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyAlias"/>
	</CreateProperty>
	<CreateProperty Value="$(AndroidSigningKeyPass)" Condition="'$(AndroidKeyStore)'=='True'">
		<Output TaskParameter="Value" PropertyName="_ApkKeyPass"/>
	</CreateProperty>

	<Delete Files="$(_AndroidDebugKeyStoreFlag)" Condition="'$(AndroidKeyStore)'=='True'" />
	<Touch Files="$(_AndroidDebugKeyStoreFlag)" AlwaysCreate="True" Condition="'$(AndroidKeyStore)'!='True'" />
</Target>

<Target Name="_Sign"
	Inputs="$(MSBuildAllProjects);$(ApkFileIntermediate);$(_AndroidBuildPropertiesCache)"
	Outputs="$(ApkFileSigned)"
	DependsOnTargets="_ResolveAndroidSigningKey">
	<ItemGroup>
		<ApkAbiFilesIntermediate Include="$(ApkFileIntermediate)" />
		<ApkAbiFilesIntermediate Condition="'$(AndroidCreatePackagePerAbi)' == 'true'" Include="$(MonoAndroidIntermediate)android\bin\$(_AndroidPackage)*.apk" />
	</ItemGroup>
	<KeyTool
		KeyStore="$(_ApkKeyStore)"
		KeyAlias="$(_ApkKeyAlias)"
		KeyPass="$(_ApkKeyPass)"
		StorePass="$(_ApkStorePass)"
		ToolPath="$(KeytoolToolPath)"
		ToolExe="$(KeytoolToolExe)"
		Command="-list"
		Condition="'$(AndroidKeyStore)'==''" />
	<AndroidSignPackage Condition=" '$(AndroidUseApkSigner)' != 'true' "
		UnsignedApk="%(ApkAbiFilesIntermediate.FullPath)"
		SignedApkDirectory="$(OutDir)"
		KeyStore="$(_ApkKeyStore)"
		KeyAlias="$(_ApkKeyAlias)"
		KeyPass="$(_ApkKeyPass)"
		StorePass="$(_ApkStorePass)"
		ToolPath="$(JarsignerToolPath)"
		ToolExe="$(JarsignerToolExe)"
		TimestampAuthorityUrl="$(JarsignerTimestampAuthorityUrl)"
		TimestampAuthorityCertificateAlias="$(JarsignerTimestampAuthorityCertificateAlias)"
		SigningAlgorithm="$(AndroidApkSigningAlgorithm)"
	/>
	<ItemGroup>
		<ApkAbiFilesSigned Include="$(ApkFileSigned)" Condition="'$(AndroidUseApkSigner)' == 'true'" />
		<ApkAbiFilesSigned Condition="'$(AndroidCreatePackagePerAbi)' == 'true' And '$(AndroidUseApkSigner)' == 'true' " Include="$(OutDir)$(_AndroidPackage)*-Signed.apk" />
	</ItemGroup>
	<Delete Files="%(ApkAbiFilesSigned.FullPath)" Condition=" '$(AndroidUseApkSigner)' == 'true' "/>
	<AndroidZipAlign Condition=" '$(AndroidUseApkSigner)' == 'true' "
		Source="%(ApkAbiFilesIntermediate.FullPath)"
		DestinationDirectory="$(OutDir)"
		ToolPath="$(ZipAlignToolPath)"
		ToolExe="$(ZipalignToolExe)"
	/>
	<AndroidApkSigner Condition=" '$(AndroidUseApkSigner)' == 'true' "
		ApkSignerJar="$(ApkSignerJar)"
		ApkToSign="$(ApkFileSigned)"
		KeyStore="$(_ApkKeyStore)"
		KeyAlias="$(_ApkKeyAlias)"
		KeyPass="$(_ApkKeyPass)"
		StorePass="$(_ApkStorePass)"
		ToolPath="$(JavaToolPath)"
		ToolExe="$(JavaToolExe)"
		ManifestFile="$(IntermediateOutputPath)android\AndroidManifest.xml"
		AdditionalArguments="$(AndroidApkSignerAdditionalArguments)"
	/>
	<Message Text="Signed android package '$(ApkFileSigned)'" />
	<ItemGroup>
		<ApkAbiFilesSigned Include="$(ApkFileSigned)" Condition="'$(AndroidUseApkSigner)' != 'true'" />
		<ApkAbiFilesSigned Condition="'$(AndroidCreatePackagePerAbi)' == 'true' And '$(AndroidUseApkSigner)' != 'true'" Include="$(OutDir)$(_AndroidPackage)*-Signed.apk" />
	</ItemGroup>
	<Delete Files="%(ApkAbiFilesSigned.FullPath)" Condition=" '$(AndroidUseApkSigner)' != 'true' "/>
	<ItemGroup>
		<ApkAbiFilesUnaligned Include="$(OutDir)$(_AndroidPackage)-Signed-Unaligned.apk" />
		<ApkAbiFilesUnaligned Condition="'$(AndroidCreatePackagePerAbi)' == 'true'" Include="$(OutDir)$(_AndroidPackage)*-Signed-Unaligned.apk" />
	</ItemGroup>
	<Message Text="Unaligned android package '%(ApkAbiFilesUnaligned.FullPath)'"  Condition=" '$(AndroidUseApkSigner)' != 'true' "/>
	<AndroidZipAlign Condition=" '$(AndroidUseApkSigner)' != 'true' "
		Source="%(ApkAbiFilesUnaligned.FullPath)"
		DestinationDirectory="$(OutDir)"
		ToolPath="$(ZipAlignToolPath)"
		ToolExe="$(ZipalignToolExe)"
	/>
	<Delete Files="%(ApkAbiFilesUnaligned.FullPath)" />
</Target>

<Target Name="SignAndroidPackage" DependsOnTargets="Build;Package;_Sign">
</Target>

<PropertyGroup>
	<_IntermediatePdbFile>$(IntermediateOutputPath)$(TargetName).pdb</_IntermediatePdbFile>
</PropertyGroup>

<Target Name="ConvertDebuggingFiles"
	Condition=" '$(AndroidIncludeDebugSymbols)' == 'true' And Exists ('$(_IntermediatePdbFile)') And '$(OS)' == 'Windows_NT'"
	DependsOnTargets="_ConvertDebuggingFiles">
	<CreateItem Include="$(OutDir)$(TargetFileName).mdb" Condition="Exists('$(OutDir)$(TargetFileName).mdb')">
		<Output TaskParameter="Include" ItemName="FileWrites" />
	</CreateItem>
</Target>

<Target Name="_ConvertDebuggingFiles"
	Inputs="$(OutDir)$(TargetFileName);$(_IntermediatePdbFile)"
	Outputs="$(OutDir)$(TargetFileName).mdb" 
	DependsOnTargets="_ValidateAndroidPackageProperties">
	<ConvertDebuggingFiles Files="$(OutDir)$(TargetFileName)" />
	<Touch Files="$(OutDir)$(TargetFileName).mdb" />
</Target>


<!-- Callable targets -->
<PropertyGroup>
	<_BuildApkDependsOnTargets>
		Build
		;$(_OnResolveMonoAndroidSdks)
		;_BuildApkEmbed
	</_BuildApkDependsOnTargets>
</PropertyGroup>

<Target Name="BuildApk"	DependsOnTargets="$(_BuildApkDependsOnTargets)" />
<Target Name="Package"	DependsOnTargets="Build;_CopyPackage" />
<Target Name="Sign" 	DependsOnTargets="Build;_ResolveAndroidSigningKey;_Sign" />

<!-- Cleaning -->

<Target Name="_CleanMsymArchive">
	<GetAndroidPackageName ManifestFile="$(ProjectDir)$(AndroidManifest)" AssemblyName="$(AssemblyName)">
		<Output TaskParameter="PackageName" PropertyName="_AndroidPackage" />
	</GetAndroidPackageName>
	<RemoveDirFixed Directories="$(OutDir)$(_AndroidPackage).apk.mSYM" Condition=" '$(_AndroidPackage)' != '' And Exists ('$(OutDir)$(_AndroidPackage).apk.mSYM')" />
</Target>

<Target Name="_CleanDesignTimeIntermediateDir">
	<RemoveDirFixed Directories="$(_AndroidDesignTimeResDirIntermediate)" Condition="Exists ('$(_AndroidDesignTimeResDirIntermediate)')" />
</Target>

<Target Name="_CleanGeneratedDeploymentFiles">
	<CreateItem Include="$(IntermediateOutputPath)*.deployment">
		<Output TaskParameter="Include" ItemName="_OutputDeploymentFiles" />
	</CreateItem>
	<Delete Files="@(_OutputDeploymentFiles)"/>
</Target>

<Target Name="_CleanMonoAndroidIntermediateDir" DependsOnTargets="_CleanGeneratedDeploymentFiles;_CleanMsymArchive">
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)android" Condition="Exists ('$(MonoAndroidIntermediate)android')" />
	<!-- FIXME: remove this extraneous rmdir after a few release cycles since we release the one we killed it. -->
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)assemblies" Condition="Exists ('$(MonoAndroidIntermediate)assemblies')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)linksrc" Condition="Exists ('$(MonoAndroidIntermediate)linksrc')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)linkdst" Condition="Exists ('$(MonoAndroidIntermediate)linkdst')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)res" Condition="Exists ('$(MonoAndroidIntermediate)res')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)aidl" Condition="Exists ('$(MonoAndroidIntermediate)aidl')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)bundles" Condition="Exists ('$(MonoAndroidIntermediate)bundles')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)__library_projects__" Condition="Exists ('$(MonoAndroidIntermediate)__library_projects__')" />
	<RemoveDirFixed Directories="$(_AndroidLibrayProjectIntermediatePath)" Condition="Exists ('$(_AndroidLibrayProjectIntermediatePath)')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)$(_LibraryProjectImportsDirectoryName)" Condition="Exists ('$(MonoAndroidIntermediate)$(_LibraryProjectImportsDirectoryName)')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)$(_NativeLibraryImportsDirectoryName)" Condition="Exists ('$(MonoAndroidIntermediate)$(_NativeLibraryImportsDirectoryName)')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)assets" Condition="Exists ('$(MonoAndroidIntermediate)assets')" />
 	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)java" Condition="Exists ('$(MonoAndroidIntermediate)java')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediate)proguard" Condition="Exists ('$(MonoAndroidIntermediate)proguard')" />
	<RemoveDirFixed Directories="$(MonoAndroidIntermediateResourceCache)" Condition="Exists ('$(MonoAndroidIntermediateResourceCache)')" />
	<RemoveDirFixed Directories="$(_AndroidAotBinDirectory)" Condition="Exists ('$(_AndroidAotBinDirectory)')" />
	<Delete Files="$(IntermediateOutputPath)_dex_stamp" />
 	<Delete Files="$(MonoAndroidIntermediate)R.cs.flag" />
	<Delete Files="$(MonoAndroidIntermediate)acw-map.txt" />
	<Delete Files="$(MonoAndroidIntermediate)mergeresources.cache" />
	<Delete Files="$(MonoAndroidIntermediate)jarlist.cache" />
	<Delete Files="$(MonoAndroidIntermediate)resolved_assemblies.txt" />
	<Delete Files="$(MonoAndroidIntermediate)__AndroidLibraryProjects__.zip" />
	<Delete Files="$(MonoAndroidIntermediate)__AndroidNativeLibraries__.zip" />
	<Delete Files="$(MonoAndroidIntermediate)stub_application_data.txt" />
	<Delete Files="$(IntermediateOutputPath)_javac.stamp" />
	<Delete Files="$(IntermediateOutputPath)compiled.flata" />
	<Delete Files="$(_AndroidResFlagFile)" />
	<Delete Files="$(_AndroidStripFlag)" />
	<Delete Files="$(_AndroidLinkFlag)" />
	<Delete Files="$(_AndroidComponentResgenFlagFile)" />
	<Delete Files="$(_AndroidDebugKeyStoreFlag)" />
	<Delete Files="$(_AndroidResourcePathsCache)" />
	<Delete Files="$(_AndroidLintConfigFile)" />
	<Delete Files="$(_AndroidResourceDesignerFile)" Condition=" '$(AndroidUseIntermediateDesignerFile)' == 'True' " />
	<Delete Files="$(_AndroidBuildPropertiesCache)" />
	<Delete Files="$(_AndroidLibraryImportsCache)" />
	<Delete Files="$(_AndroidStaticResourcesFlag)" />
	<Delete Files="$(_AndroidLibraryProjectImportsCache)" />
	<Delete Files="$(_AndroidLibrayProjectAssemblyMapFile)" />
	<Delete Files="$(_AndroidAapt2VersionFile)" />
	<Delete Files="$(IntermediateOutputPath)R.txt" />
</Target>

<Target Name="_CollectMonoAndroidOutputs" DependsOnTargets="_ValidateAndroidPackageProperties">
	<CreateItem Include="$(ApkFile)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="$(ApkFileIntermediate)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<!-- FIXME: check files exists -->
	<CreateItem Include="@(_AndroidResourceDest)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="$(_AndroidResgenFlagFile)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="$(IntermediateOutputPath)R.txt">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="$(ApkFileSigned)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="$(_UploadFlagFile)">
		<Output TaskParameter="Include" ItemName="FileWrites"/>
	</CreateItem>
	<CreateItem Include="@(_ModifiedResources)">
 		<Output TaskParameter="Include" ItemName="FileWrites"/>
 	</CreateItem>
</Target>

<Target Name="_lldb"
    DependsOnTargets="AndroidPrepareForBuild">
  <WriteLinesToFile File="$(_LldbConfigFile)" Lines="PKG=$(_AndroidPackage)" Overwrite="true"/>
  <WriteLinesToFile File="$(_LldbConfigFile)" Lines="MANIFEST=$(IntermediateOutputPath)android\AndroidManifest.xml"/>
</Target>

<PropertyGroup>
  <InstallDependsOnTargets>
    SignAndroidPackage;
    _Deploy
  </InstallDependsOnTargets>
</PropertyGroup>

<Target Name="_Deploy">
  <Exec Command="&quot;$(AdbToolPath)\adb&quot; $(AdbTarget) install -r &quot;$(ApkFileSigned)&quot;" />
</Target>

<Target Name="Install"
    Condition="'$(AndroidApplication)'!='' And $(AndroidApplication)"
    DependsOnTargets="$(InstallDependsOnTargets)">
</Target>


<!-- SDK Management Targets -->
<Target Name="GetAndroidDependencies" DependsOnTargets="_SetLatestTargetFrameworkVersion;$(GetAndroidDependenciesDependsOn)" Returns="@(AndroidDependency)">
  <PropertyGroup>
    <_ProjectAndroidManifest>$(ProjectDir)$(AndroidManifest)</_ProjectAndroidManifest>
    <_NdkRequired Condition="'$(BundleAssemblies)' == 'True' Or '$(AotAssemblies)' == 'True'">true</_NdkRequired>
    <_NdkRequired Condition="'$(_NdkRequired)' == ''">false</_NdkRequired>
  </PropertyGroup>
  <Error Text="AndroidManifest file does not exist" Condition="'$(_ProjectAndroidManifest)'!='' And !Exists ('$(_ProjectAndroidManifest)')"/>
  <CalculateProjectDependencies
    TargetFrameworkVersion="$(TargetFrameworkVersion)"
    ManifestFile="$(_ProjectAndroidManifest)"
    BuildToolsVersion="$(AndroidSdkBuildToolsVersion)"
    PlatformToolsVersion="$(AndroidSdkPlatformToolsVersion)"
    ToolsVersion="$(AndroidSdkToolsVersion)"
    NdkVersion="$(AndroidNdkVersion)"
    NdkRequired="$(_NdkRequired)"
  >
    <Output TaskParameter="Dependencies" ItemName="AndroidDependency" />
  </CalculateProjectDependencies>
</Target>

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Android.Common.Debugging.targets"
        Condition="Exists('$(MSBuildThisFileDirectory)Xamarin.Android.Common.Debugging.targets')"/>

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Android.PCLSupport.targets" />

<Import Project="$(MSBuildThisFileDirectory)Xamarin.Installer.Common.targets"
        Condition="Exists('$(MSBuildThisFileDirectory)Xamarin.Installer.Common.targets')"/>
<!--
*******************************************
  Extensibility hook that allows VS to
  provide extra behavior without modifying 
  the core targets.
*******************************************
-->
<Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets" 
        Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets')"/>

</Project>
