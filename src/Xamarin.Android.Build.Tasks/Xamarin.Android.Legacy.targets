<!--
***********************************************************************************************
Xamarin.Android.Legacy.targets

This file contains MSBuild targets for "legacy" Xamarin.Android
projects. .NET 5 projects will not import this file.

***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AndroidBoundExceptionType Condition=" '$(AndroidBoundExceptionType)' == '' ">Java</AndroidBoundExceptionType>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(AndroidBuildApplicationPackage)' == 'True' And '$(AndroidApplication)' == 'True' ">
    <_PostBuildTargets>
      _CopyPackage;
      _Sign
    </_PostBuildTargets>
  </PropertyGroup>

  <!-- Application projects -->

  <PropertyGroup Condition=" '$(AndroidApplication)' == 'True' And '$(_AndroidIsBindingProject)' != 'True' ">
    <BuildDependsOn>
      _ValidateLinkMode;
      _CheckNonIdealConfigurations;
      _SetupMSBuildAllProjects;
      _SetupDesignTimeBuildForBuild;
      _CategorizeAndroidLibraries;
      _CreatePropertiesCache;
      _CleanIntermediateIfNeeded;
      _CheckProjectItems;
      _CheckForContent;
      _CheckTargetFramework;
      _RemoveLegacyDesigner;
      _ValidateAndroidPackageProperties;
      $(BuildDependsOn);
      _CompileDex;
      $(_AfterCompileDex);
      $(_PostBuildTargets)
    </BuildDependsOn>
    <_BeforeIncrementalClean>
      _PrepareAssemblies;
      _CompileDex;
      $(_AfterCompileDex);
      _AddFilesToFileWrites;
    </_BeforeIncrementalClean>
    <_PackageForAndroidDependsOn>
      SetWearAppTargetToPackageForAndroid;
      Build;
      _CopyPackage;
    </_PackageForAndroidDependsOn>
  </PropertyGroup>

  <!-- Class library projects -->

  <PropertyGroup Condition=" '$(AndroidApplication)' != 'True' And '$(_AndroidIsBindingProject)' != 'True' ">
    <BuildDependsOn>
      _ValidateLinkMode;
      _SetupMSBuildAllProjects;
      _SetupDesignTimeBuildForBuild;
      _CategorizeAndroidLibraries;
      _CreatePropertiesCache;
      _CleanIntermediateIfNeeded;
      _AddAndroidDefines;
      _CreateNativeLibraryArchive;
      _AddAndroidEnvironmentToCompile;
      _CheckForContent;
      _CheckTargetFramework;
      _RemoveLegacyDesigner;
      _ValidateAndroidPackageProperties;
      $(BuildDependsOn);
    </BuildDependsOn>
    <_BeforeIncrementalClean>
      _AddFilesToFileWrites;
    </_BeforeIncrementalClean>
  </PropertyGroup>

  <!-- Application *and* Class library projects -->

  <PropertyGroup Condition=" '$(_AndroidIsBindingProject)' != 'True' ">
    <CoreBuildDependsOn>
      $([MSBuild]::Unescape($(CoreBuildDependsOn.Replace('IncrementalClean;', '$(_BeforeIncrementalClean);IncrementalClean;'))))
    </CoreBuildDependsOn>
    <CompileDependsOn>
      _SetupMSBuildAllProjects;
      _SetupDesignTimeBuildForCompile;
      _AddAndroidDefines;
      _IncludeLayoutBindingSources;
      $(CompileDependsOn);
    </CompileDependsOn>
    <CoreCompileDependsOn>
      UpdateGeneratedFiles;
      $(CoreCompileDependsOn)
    </CoreCompileDependsOn>
    <CoreResolveReferencesDependsOn>
      _SeparateAppExtensionReferences;
      _PrepareWearApplication;
      $(ResolveReferencesDependsOn);
      _AddAndroidCustomMetaData;
    </CoreResolveReferencesDependsOn>
    <ResolveReferencesDependsOn>
      $(CoreResolveReferencesDependsOn);
      UpdateAndroidInterfaceProxies;
      UpdateAndroidResources;
    </ResolveReferencesDependsOn>
    <DeferredBuildDependsOn>
      $(DeferredBuildDependsOn);
      UpdateAndroidResources;
    </DeferredBuildDependsOn>
    <PrepareForRunDependsOn>
      $(PrepareForRunDependsOn);
      _CollectMonoAndroidOutputs;
    </PrepareForRunDependsOn>
    <CleanDependsOn>
      $(CleanDependsOn);
      _CleanMonoAndroidIntermediateDir;
      _CleanAndroidBuildPropertiesCache;
    </CleanDependsOn>
    <_PrepareBuildApkDependsOnTargets>
      _SetLatestTargetFrameworkVersion;
      _GetLibraryImports;
      _RemoveRegisterAttribute;
      _ResolveAssemblies;
      _ResolveSatellitePaths;
      _CreatePackageWorkspace;
      _CopyConfigFiles;
      _ConvertPdbFiles;
      _LinkAssemblies;
      _GenerateJavaStubs;
      _ManifestMerger;
      _ConvertCustomView;
      $(_AfterConvertCustomView);
      $(AfterGenerateAndroidManifest);
      _GenerateEnvironmentFiles;
      _CompileJava;
      _CreateApplicationSharedLibraries;
      _CompileDex;
      $(_AfterCompileDex);
      _CreateBaseApk;
      _PrepareAssemblies;
      _ResolveSatellitePaths;
      _CheckApkPerAbiFlag;
      _LintChecks;
      _IncludeNativeSystemLibraries;
      _CheckGoogleSdkRequirements;
    </_PrepareBuildApkDependsOnTargets>
    <_UpdateAndroidResourcesDependsOn>
      $(CoreResolveReferencesDependsOn);
      _CreatePropertiesCache;
      _CheckForDeletedResourceFile;
      _ComputeAndroidResourcePaths;
      _UpdateAndroidResgen;
      _CreateManagedLibraryResourceArchive;
    </_UpdateAndroidResourcesDependsOn>
    <GetAndroidDependenciesDependsOn>
      _BeforeGetAndroidDependencies;
      _SetLatestTargetFrameworkVersion;
      $(GetAndroidDependenciesDependsOn);
    </GetAndroidDependenciesDependsOn>
  </PropertyGroup>

  <!-- Binding projects -->

  <PropertyGroup Condition=" '$(_AndroidIsBindingProject)' == 'True' ">
    <BuildDependsOn>
      _SetupMSBuildAllProjects;
      _SetupDesignTimeBuildForBuild;
      _CategorizeAndroidLibraries;
      AddLibraryJarsToBind;
      $(BuildDependsOn);
      BuildDocumentation;
    </BuildDependsOn>

    <CompileDependsOn>
      _SetupMSBuildAllProjects;
      _SetupDesignTimeBuildForCompile;
      AddLibraryJarsToBind;
      $(CompileDependsOn);
    </CompileDependsOn>

    <ResolveReferencesDependsOn>
      $(ResolveReferencesDependsOn);
      AddBindingsToCompile;
      AddEmbeddedJarsAsResources;
      AddEmbeddedReferenceJarsAsResources;
      _CreateNativeLibraryArchive;
    </ResolveReferencesDependsOn>

    <CleanDependsOn>
      $(CleanDependsOn);
      CleanBindingsOutput;
      CleanLibraryProjectIntermediaries;
      CleanNativeLibraryIntermediaries;
    </CleanDependsOn>

    <ExportJarToXmlDependsOnTargets>
      _ResolveMonoAndroidSdks;
      _ExtractLibraryProjectImports;
      _GetLibraryImports;
      _ExtractJavaDocJars;
      _GenerateJavaDocFromSourceJars;
      _ExportJarToXml;
    </ExportJarToXmlDependsOnTargets>

    <_ResolveLibraryProjectsDependsOn>
      _CreateBindingResourceArchive;
    </_ResolveLibraryProjectsDependsOn>

  </PropertyGroup>

  <UsingTask TaskName="Xamarin.Android.Tasks.CheckGoogleSdkRequirements"          AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.ConvertDebuggingFiles"               AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.CreateLibraryResourceArchive"        AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.CreateManagedLibraryResourceArchive" AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.CreateNativeLibraryArchive"          AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.Legacy.ValidateJavaVersion"          AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.Legacy.ResolveAndroidTooling"        AssemblyFile="Xamarin.Android.Build.Tasks.dll" />
  <UsingTask TaskName="Xamarin.Android.Tasks.LinkAssemblies"                      AssemblyFile="Xamarin.Android.Build.Tasks.dll" />

  <Target Name="_CheckTargetFramework">
    <Warning Code="XA0109" Text="Unsupported or invalid %24(TargetFrameworkVersion) value of 'v4.5'. Please update your Project Options." Condition=" '$(TargetFrameworkVersion)' == 'v4.5' "/>
  </Target>

  <Target Name="_GetReferenceAssemblyPaths">
    <GetReferenceAssemblyPaths
        TargetFrameworkMoniker="$(TargetFrameworkIdentifier),Version=v1.0"
        RootPath="$(TargetFrameworkRootPath)">
      <Output TaskParameter="ReferenceAssemblyPaths" PropertyName="_XATargetFrameworkDirectories" />
    </GetReferenceAssemblyPaths>
  </Target>

  <Target Name="_ResolveAndroidTooling">
    <ValidateJavaVersion
        Condition=" '$(DesignTimeBuild)' != 'True' Or '$(AndroidUseManagedDesignTimeResourceGenerator)' != 'True' "
        ContinueOnError="$(_AndroidAllowMissingSdkTooling)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        AndroidSdkBuildToolsVersion="$(AndroidSdkBuildToolsVersion)"
        JavaSdkPath="$(_JavaSdkDirectory)"
        JavaToolExe="$(JavaToolExe)"
        JavacToolExe="$(JavacToolExe)"
        LatestSupportedJavaVersion="$(LatestSupportedJavaVersion)"
        MinimumSupportedJavaVersion="$(MinimumSupportedJavaVersion)">
      <Output TaskParameter="JdkVersion"                PropertyName="_JdkVersion" />
      <Output TaskParameter="MinimumRequiredJdkVersion" PropertyName="_DefaultJdkVersion" />
    </ValidateJavaVersion>
    <ResolveAndroidTooling
        ContinueOnError="$(_AndroidAllowMissingSdkTooling)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        AndroidApiLevel="$(AndroidApiLevel)"
        AndroidApplication="$(AndroidApplication)"
        AndroidSdkPath="$(_AndroidSdkDirectory)"
        AndroidSdkBuildToolsVersion="$(AndroidSdkBuildToolsVersion)"
        CommandLineToolsVersion="$(AndroidCommandLineToolsVersion)"
        UseLatestAndroidPlatformSdk="$(AndroidUseLatestPlatformSdk)"
        AndroidUseAapt2="$(AndroidUseAapt2)"
        AotAssemblies="$(AotAssemblies)"
        Aapt2ToolPath="$(Aapt2ToolPath)"
        SequencePointsMode="$(_AndroidSequencePointsMode)"
        ProjectFilePath="$(MSBuildProjectFullPath)"
        LintToolPath="$(LintToolPath)"
        ZipAlignPath="$(ZipAlignToolPath)">
      <Output TaskParameter="TargetFrameworkVersion"      PropertyName="TargetFrameworkVersion" />
      <Output TaskParameter="AndroidApiLevel"             PropertyName="_AndroidApiLevel"            Condition="'$(_AndroidApiLevel)' == ''" />
      <Output TaskParameter="AndroidApiLevelName"         PropertyName="_AndroidApiLevelName" />
      <Output TaskParameter="AndroidSdkBuildToolsPath"    PropertyName="AndroidSdkBuildToolsPath"    Condition="'$(AndroidSdkBuildToolsPath)' == ''" />
      <Output TaskParameter="AndroidSdkBuildToolsBinPath" PropertyName="AndroidSdkBuildToolsBinPath" Condition="'$(AndroidSdkBuildToolsBinPath)' == ''" />
      <Output TaskParameter="ZipAlignPath"                PropertyName="ZipAlignToolPath"            Condition="'$(ZipAlignToolPath)' == ''" />
      <Output TaskParameter="AndroidSequencePointsMode"   PropertyName="_SequencePointsMode"         Condition="'$(_SequencePointsMode)' == ''" />
      <Output TaskParameter="LintToolPath"                PropertyName="LintToolPath"                Condition="'$(LintToolPath)' == ''" />
      <Output TaskParameter="Aapt2Version"                PropertyName="_Aapt2Version" />
      <Output TaskParameter="Aapt2ToolPath"               PropertyName="Aapt2ToolPath"               Condition="'$(Aapt2ToolPath)' == ''" />
    </ResolveAndroidTooling>
  </Target>

  <Target Name="_ResolveAssemblies">
    <!--- Remove the ImplicitlyExpandDesignTimeFacades assemblies. We have already build the app there are not required for packaging  -->
    <ItemGroup>
      <FilteredAssemblies
          Include="$(OutDir)$(TargetFileName)"
          Condition="Exists ('$(OutDir)$(TargetFileName)')"
      />
      <FilteredAssemblies
          Include="@(ReferenceCopyLocalPaths)"
          Condition="'%(ReferenceCopyLocalPaths.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And '%(ReferenceCopyLocalPaths.Extension)' == '.dll' And '%(ReferenceCopyLocalPaths.RelativeDir)' == '' And Exists('%(ReferenceCopyLocalPaths.Identity)') "
      />
      <FilteredAssemblies
          Include="@(_ReferenceDependencyPaths)"
          Condition="'%(_ReferenceDependencyPaths.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And Exists('%(_ReferenceDependencyPaths.Identity)') "
      />
      <FilteredAssemblies
          Include="@(_ReferencePath)"
          Condition="'%(ReferencePath.ResolvedFrom)' != 'ImplicitlyExpandDesignTimeFacades' And Exists('%(_ReferencePath.Identity)') "
      />
    </ItemGroup>
    <!-- Find all the assemblies this app requires -->
    <ResolveAssemblies
        Assemblies="@(FilteredAssemblies->Distinct())"
        I18nAssemblies="$(MandroidI18n)"
        LinkMode="$(AndroidLinkMode)"
        ProjectFile="$(MSBuildProjectFullPath)"
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        ProjectAssetFile="$(ProjectLockFile)"
        TargetMoniker="$(NuGetTargetMoniker)"
        ReferenceAssembliesDirectory="$(TargetFrameworkDirectory)">
      <Output TaskParameter="ResolvedAssemblies" ItemName="ResolvedAssemblies" />
      <Output TaskParameter="ResolvedUserAssemblies" ItemName="ResolvedUserAssemblies" />
      <Output TaskParameter="ResolvedFrameworkAssemblies" ItemName="ResolvedFrameworkAssemblies" />
      <Output TaskParameter="ResolvedSymbols" ItemName="ResolvedSymbols" />
      <Output TaskParameter="ResolvedDoNotPackageAttributes" ItemName="_ResolvedDoNotPackageAttributes" />
    </ResolveAssemblies>
    <Hash ItemsToHash="@(ResolvedAssemblies)">
      <Output TaskParameter="HashResult" PropertyName="_ResolvedUserAssembliesHash" />
    </Hash>
    <WriteLinesToFile
        File="$(_ResolvedUserAssembliesHashFile)"
        Lines="$(_ResolvedUserAssembliesHash)"
        Overwrite="true"
        WriteOnlyWhenDifferent="true"
    />
    <ItemGroup>
      <FileWrites Include="$(_ResolvedUserAssembliesHashFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_CheckGoogleSdkRequirements"
      Condition="Exists('$(IntermediateOutputPath)android\AndroidManifest.xml') And '$(AndroidEnableGooglePlayStoreChecks)' == 'true' ">
    <CheckGoogleSdkRequirements
        TargetFrameworkVersion="$(TargetFrameworkVersion)"
        ManifestFile="$(IntermediateOutputPath)android\AndroidManifest.xml"
    />
  </Target>

  <Target Name="_CollectConfigFiles">
    <GetFilesThatExist
        Files="@(ResolvedAssemblies->'%(identity).config')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedConfigFiles" />
    </GetFilesThatExist>
  </Target>

  <Target Name="_CopyConfigFiles"
      Inputs="@(_ResolvedConfigFiles)"
      Outputs="$(_AndroidStampDirectory)_CopyConfigFiles.stamp"
      DependsOnTargets="_CollectConfigFiles">
    <CopyIfChanged
        SourceFiles="@(_ResolvedConfigFiles)"
        DestinationFiles="@(_ResolvedConfigFiles->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')"
    />
    <Touch Files="$(_AndroidStampDirectory)_CopyConfigFiles.stamp" AlwaysCreate="True" />
  </Target>

  <Target Name="_CollectMdbFiles"
      DependsOnTargets="_CollectPdbFiles">
    <GetFilesThatExist
        Files="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename)%(Extension).mdb')"
        IgnoreFiles="@(_ResolvedPortablePdbFiles->'%(RootDir)%(Directory)%(Filename).dll.mdb')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedMdbFiles" />
    </GetFilesThatExist>
  </Target>

  <Target Name="_CollectPdbFiles">
    <CollectPdbFiles
        ResolvedAssemblies="@(ResolvedAssemblies->'%(RootDir)%(Directory)%(Filename).pdb')">
      <Output TaskParameter="PdbFiles" ItemName="_ResolvedPdbFiles" />
      <Output TaskParameter="PortablePdbFiles" ItemName="_ResolvedPortablePdbFiles" />
    </CollectPdbFiles>
    <ItemGroup>
      <_ConvertedMdbFiles Include="@(_ResolvedPdbFiles->'%(RootDir)%(Directory)%(Filename).dll.mdb')" />
    </ItemGroup>
  </Target>

  <Target Name="_ConvertPdbFiles"
      Inputs="@(_ResolvedPdbFiles)"
      Outputs="@(_ConvertedMdbFiles)"
      DependsOnTargets="_CollectPdbFiles">
    <ConvertDebuggingFiles Files="@(_ResolvedPdbFiles)" />
    <Touch Files="@(_ConvertedMdbFiles)" ContinueOnError="true" />
    <ItemGroup>
      <!-- NOTE: @(_ResolvedPortablePdbFiles) are valid -->
      <_DeprecatedSymbols Include="@(_ResolvedMdbFiles);@(_ResolvedPdbFiles)" />
    </ItemGroup>
    <AndroidWarning Code="XA0125"
        ResourceName="XA0125"
        FormatArguments="%(_DeprecatedSymbols.FileName)%(_DeprecatedSymbols.Extension)"
        Condition=" '%(_DeprecatedSymbols.Identity)' != '' "
    />
    <ItemGroup>
      <FileWrites Include="@(_ConvertedMdbFiles)" />
    </ItemGroup>
  </Target>

  <Target Name="ConvertDebuggingFiles"
      Condition=" '$(AndroidIncludeDebugSymbols)' == 'true' And Exists ('$(_IntermediatePdbFile)') And '$(OS)' == 'Windows_NT'"
      DependsOnTargets="_ConvertDebuggingFiles"
  />

  <Target Name="_ConvertDebuggingFiles"
      Inputs="$(OutDir)$(TargetFileName);$(_IntermediatePdbFile)"
      Outputs="$(OutDir)$(TargetFileName).mdb" 
      DependsOnTargets="_ValidateAndroidPackageProperties">
    <ConvertDebuggingFiles Files="$(OutDir)$(TargetFileName)" />
    <Touch Files="$(OutDir)$(TargetFileName).mdb" />
    <ItemGroup>
      <FileWrites Include="$(OutDir)$(TargetFileName).mdb" />
    </ItemGroup>
  </Target>

  <Target Name="_AddAndroidEnvironmentToCompile">
    <ItemGroup>
      <EmbeddedResource Include="@(AndroidEnvironment)">
        <LogicalName>__AndroidEnvironment__%(Filename)%(Extension)</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="AddEmbeddedJarsAsResources" DependsOnTargets="GenerateBindings">
    <ItemGroup>
      <EmbeddedResource Include="@(EmbeddedJar)">
        <LogicalName>%(Filename)%(Extension)</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="AddEmbeddedReferenceJarsAsResources" DependsOnTargets="GenerateBindings">
    <ItemGroup>
      <EmbeddedResource Include="@(EmbeddedReferenceJar)">
        <LogicalName>__reference__%(Filename)%(Extension)</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="_CreateNativeLibraryArchive"
      Condition=" '$(AndroidApplication)' != 'true' And '@(EmbeddedNativeLibrary->Count())' != '0' "
      Inputs="@(EmbeddedNativeLibrary)"
      Outputs="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip">
    <CreateNativeLibraryArchive
        OutputDirectory="$(IntermediateOutputPath)$(_NativeLibraryImportsDirectoryName)"
        EmbeddedNativeLibraries="@(EmbeddedNativeLibrary)"
    />
    <Touch Files="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip" />
    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip" />
      <EmbeddedResource Include="$(IntermediateOutputPath)__AndroidNativeLibraries__.zip">
        <LogicalName>__AndroidNativeLibraries__.zip</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="_CreateManagedLibraryResourceArchive"
      Condition=" '$(AndroidApplication)' != 'true' And '$(_AndroidIsBindingProject)' != 'true' "
      Inputs="@(_AndroidResourceDest);@(AndroidAsset);@(AndroidJavaLibrary);@(AndroidJavaSource);@(_AndroidResourceDestRemovedFiles)"
      Outputs="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip">
    <CreateManagedLibraryResourceArchive
        OutputDirectory="$(IntermediateOutputPath)$(_LibraryProjectImportsDirectoryName)"
        ResourceDirectory="$(MonoAndroidResDirIntermediate)"
        AndroidAssets="@(AndroidAsset)"
        MonoAndroidAssetsPrefix="$(MonoAndroidAssetsPrefix)"
        AndroidJavaSources="@(AndroidJavaSource)"
        AndroidJavaLibraries="@(AndroidJavaLibrary)"
        AndroidResourcesInThisExactProject="@(_AndroidResourceDest)"
        FlatArchivesDirectory="$(_AndroidLibraryFlatArchivesDirectory)"
        RemovedAndroidResourceFiles="@(_AndroidResourceDestRemovedFiles)"
    />
    <Touch Files="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip" />
    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip" />
      <EmbeddedResource Include="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip">
        <LogicalName>__AndroidLibraryProjects__.zip</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <Target Name="_CreateBindingResourceArchive"
      Condition=" '$(_AndroidIsBindingProject)' == 'true' "
      Inputs="@(LibraryProjectProperties);@(LibraryProjectZip)"
      Outputs="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip">
    <CreateLibraryResourceArchive
        OutputDirectory="$(IntermediateOutputPath)$(_LibraryProjectImportsDirectoryName)"
        OutputJarsDirectory="$(IntermediateOutputPath)library_project_jars"
        OutputAnnotationsDirectory="$(IntermediateOutputPath)library_project_annotations"
        LibraryProjectPropertiesFiles="@(LibraryProjectProperties)"
        LibraryProjectZipFiles="@(LibraryProjectZip)"
    />
    <ItemGroup Condition="Exists ('$(IntermediateOutputPath)__AndroidLibraryProjects__.zip')">
      <FileWrites Include="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip" />
      <EmbeddedResource Include="$(IntermediateOutputPath)__AndroidLibraryProjects__.zip">
        <LogicalName>__AndroidLibraryProjects__.zip</LogicalName>
      </EmbeddedResource>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <_PrepareAssembliesDependsOnTargets>
      _ResolveAssemblies;
      _ResolveSatellitePaths;
      _CreatePackageWorkspace;
      _CopyConfigFiles;
      _ConvertPdbFiles;
      _LinkAssemblies;
    </_PrepareAssembliesDependsOnTargets>
  </PropertyGroup>

  <Target Name="_PrepareAssemblies"
      DependsOnTargets="$(_PrepareAssembliesDependsOnTargets)">

    <!--
      Update our assembly lists to the copies for linking. We also
      need to verify they still exist, because linking will delete
      them if they aren't used.
    -->
    <GetFilesThatExist
      Condition=" '$(AndroidLinkMode)' != 'None' "
      Files="@(ResolvedAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedAssemblies" />
    </GetFilesThatExist>

    <GetFilesThatExist
      Condition=" '$(AndroidLinkMode)' != 'None' "
      Files="@(ResolvedSymbols->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedSymbols" />
    </GetFilesThatExist>

    <GetFilesThatExist
      Condition=" '$(AndroidLinkMode)' != 'None'"
      Files="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedUserAssemblies" />
    </GetFilesThatExist>

    <GetFilesThatExist
      Condition=" '$(AndroidLinkMode)' != 'None' "
      Files="@(ResolvedFrameworkAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')">
      <Output TaskParameter="FilesThatExist" ItemName="_ResolvedFrameworkAssemblies" />
    </GetFilesThatExist>

    <ItemGroup Condition=" '$(AndroidLinkMode)' == 'None' ">
      <_ResolvedAssemblies          Include="@(ResolvedAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" />
      <_ResolvedSymbols             Include="@(ResolvedSymbols->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" />
      <_ResolvedUserAssemblies      Include="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" />
      <_ResolvedFrameworkAssemblies Include="@(ResolvedFrameworkAssemblies->'$(MonoAndroidIntermediateAssemblyDir)%(Filename)%(Extension)')" />
    </ItemGroup>
    <ItemGroup Condition=" ('$(AndroidLinkMode)' == 'None' Or '$(AndroidIncludeDebugSymbols)' == 'true') ">
      <_ShrunkAssemblies          Include="@(_ResolvedAssemblies)" />
      <_ShrunkUserAssemblies      Include="@(_ResolvedUserAssemblies)" />
      <_ShrunkFrameworkAssemblies Include="@(_ResolvedFrameworkAssemblies)" />
    </ItemGroup>
    <ItemGroup Condition=" '$(AndroidLinkMode)' != 'None' And '$(AndroidIncludeDebugSymbols)' != 'true' ">
      <_ShrunkAssemblies          Include="@(_ResolvedAssemblies->'$(MonoAndroidIntermediateAssemblyDir)shrunk\%(Filename)%(Extension)')" />
      <_ShrunkUserAssemblies      Include="@(_ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssemblyDir)shrunk\%(Filename)%(Extension)')" />
      <_ShrunkFrameworkAssemblies Include="@(_ResolvedFrameworkAssemblies->'$(MonoAndroidIntermediateAssemblyDir)shrunk\%(Filename)%(Extension)')" />
    </ItemGroup>
    <ItemGroup>
      <_ResolvedUserMonoAndroidAssemblies
          Include="@(_ResolvedUserAssemblies)"
          Condition=" '%(_ResolvedUserAssemblies.TargetFrameworkIdentifier)' == 'MonoAndroid' Or '%(_ResolvedUserAssemblies.HasMonoAndroidReference)' == 'true' "
      />
    </ItemGroup>
  </Target>

  <Target Name="_LinkAssemblies"
      DependsOnTargets="_ResolveAssemblies;_CreatePackageWorkspace;$(_BeforeLinkAssemblies);_GenerateJniMarshalMethods;_LinkAssembliesNoShrink;_LinkAssembliesShrink"
  />

  <Target Name="_LinkAssembliesShrink"
      Condition="'$(AndroidLinkMode)' != 'None'"
      Inputs="@(ResolvedUserAssemblies);@(LinkDescription);$(_AndroidBuildPropertiesCache)"
      Outputs="$(_AndroidLinkFlag)">

    <PropertyGroup>
      <_MainAssembly Condition=" '$(AndroidGenerateJniMarshalMethods)' != 'True' ">$(TargetPath)</_MainAssembly>
      <_MainAssembly Condition=" '$(AndroidGenerateJniMarshalMethods)' == 'True' ">$(_JniMarshalMethodsOutputDir)$(TargetFileName)</_MainAssembly>
    </PropertyGroup>
    <ItemGroup Condition=" '$(AndroidGenerateJniMarshalMethods)' != 'True' ">
      <_AssembliesToLink Include="@(ResolvedAssemblies)" />
    </ItemGroup>
    <ItemGroup Condition=" '$(AndroidGenerateJniMarshalMethods)' == 'True' ">
      <_PossibleAssembliesToLink Include="@(ResolvedAssemblies)">
        <JniAssembly>$(_JniMarshalMethodsOutputDir)%(Filename)%(Extension)</JniAssembly>
      </_PossibleAssembliesToLink>
      <_AssembliesToLink Condition="Exists(%(_PossibleAssembliesToLink.JniAssembly))" Include="%(_PossibleAssembliesToLink.JniAssembly)" />
      <_AssembliesToLink Condition="!Exists(%(_PossibleAssembliesToLink.JniAssembly))" Include="%(_PossibleAssembliesToLink.Identity)" />
    </ItemGroup>

    <CreateProperty
        Condition=" '$(AndroidLinkTool)' != '' "
        Value="$(IntermediateOutputPath)proguard\proguard_project_references.cfg">
      <Output TaskParameter="Value" PropertyName="_ProguardProjectConfiguration" />
    </CreateProperty>

    <MakeDir Condition=" '$(AndroidLinkTool)' != '' " Directories="$(IntermediateOutputPath)proguard" />

    <LinkAssemblies
        MainAssembly="$(_MainAssembly)"
        OutputDirectory="$(MonoAndroidIntermediateAssemblyDir)"
        I18nAssemblies="$(MandroidI18n)"
        LinkMode="$(AndroidLinkMode)"
        LinkSkip="$(AndroidLinkSkip)"
        LinkDescriptions="@(LinkDescription)"
        ProguardConfiguration="$(_ProguardProjectConfiguration)"
        PreserveJniMarshalMethods="$(AndroidGenerateJniMarshalMethods)"
        EnableProguard="$(AndroidEnableProguard)"
        Deterministic="$(Deterministic)"
        DumpDependencies="$(LinkerDumpDependencies)"
        ResolvedAssemblies="@(_AssembliesToLink)"
        HttpClientHandlerType="$(AndroidHttpClientHandlerType)"
        TlsProvider="$(AndroidTlsProvider)"
    />

    <!-- We have to use a flag instead of normal outputs because linking can delete unused assemblies -->
    <Touch Files="$(_AndroidLinkFlag)" AlwaysCreate="true" />
    <ItemGroup>
      <FileWrites Include="$(_AndroidLinkFlag)" />
      <FileWrites Include="$(MonoAndroidIntermediateAssemblyDir)*" />
    </ItemGroup>
  </Target>

</Project>
