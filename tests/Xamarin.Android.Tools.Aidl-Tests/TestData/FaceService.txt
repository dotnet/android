/**
 * Copyright (C) 2021 The PixelExperience Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Taken from https://github.com/lighthouse-os/external_faceunlock/blob/raft/framework/src/com/android/internal/util/custom/faceunlock/IFaceService.aidl
 */

package com.android.internal.util.custom.faceunlock;

import com.android.internal.util.custom.faceunlock.IFaceServiceReceiver;

/** @hide */
interface IFaceService {
    oneway void authenticate(long operationId);

    oneway void cancel();

    oneway void enroll(in byte[] cryptoToken, int timeout, in int[] disabledFeatures);

    int enumerate();

    long generateChallenge(int timeout);

    int getAuthenticatorId();

    boolean getFeature(int feature, int faceId);

    int getFeatureCount();

    oneway void remove(int biometricId);

    oneway void resetLockout(in byte[] cryptoToken);

    int revokeChallenge();

    oneway void setCallback(in IFaceServiceReceiver receiver);

    oneway void setFeature(int feature, boolean enable, in byte[] token, int faceId);
}

####

// This file is automatically generated and not supposed to be modified.
using System;
using Boolean = System.Boolean;
using String = System.String;
using List = Android.Runtime.JavaList;
using Map = Android.Runtime.JavaDictionary;
using Com.Android.Internal.Util.Custom.Faceunlock;

namespace Com.Android.Internal.Util.Custom.Faceunlock
{
	public interface IFaceService : global::Android.OS.IInterface
	{
		void Authenticate (long operationId);
		void Cancel ();
		void Enroll (byte [] cryptoToken, int timeout, int [] disabledFeatures);
		int Enumerate ();
		long GenerateChallenge (int timeout);
		int GetAuthenticatorId ();
		bool GetFeature (int feature, int faceId);
		int GetFeatureCount ();
		void Remove (int biometricId);
		void ResetLockout (byte [] cryptoToken);
		int RevokeChallenge ();
		void SetCallback (IFaceServiceReceiver receiver);
		void SetFeature (int feature, bool enable, byte [] token, int faceId);
	}

	public abstract class IFaceServiceStub : global::Android.OS.Binder, global::Android.OS.IInterface, Com.Android.Internal.Util.Custom.Faceunlock.IFaceService
	{
		const string descriptor = "com.android.internal.util.custom.faceunlock.IFaceService";
		public IFaceServiceStub ()
		{
			this.AttachInterface (this, descriptor);
		}

		public static Com.Android.Internal.Util.Custom.Faceunlock.IFaceService AsInterface (global::Android.OS.IBinder obj)
		{
			if (obj == null)
				return null;
			var iin = (global::Android.OS.IInterface) obj.QueryLocalInterface (descriptor);
			if (iin != null && iin is Com.Android.Internal.Util.Custom.Faceunlock.IFaceService)
				return (Com.Android.Internal.Util.Custom.Faceunlock.IFaceService) iin;
			return new Proxy (obj);
		}

		public global::Android.OS.IBinder AsBinder ()
		{
			return this;
		}

		protected override bool OnTransact (int code, global::Android.OS.Parcel data, global::Android.OS.Parcel reply, int flags)
		{
			switch (code) {
			case global::Android.OS.BinderConsts.InterfaceTransaction:
				reply.WriteString (descriptor);
				return true;

			case TransactionAuthenticate: {
				data.EnforceInterface (descriptor);
				long arg0 = default (long);
				arg0 = data.ReadLong ();
				this.Authenticate (arg0);
				return true;
				}

			case TransactionCancel: {
				data.EnforceInterface (descriptor);
				this.Cancel ();
				return true;
				}

			case TransactionEnroll: {
				data.EnforceInterface (descriptor);
				byte [] arg0 = default (byte []);
				arg0 = data.CreateByteArray ();
				int arg1 = default (int);
				arg1 = data.ReadInt ();
				int [] arg2 = default (int []);
				arg2 = data.CreateIntArray ();
				this.Enroll (arg0, arg1, arg2);
				return true;
				}

			case TransactionEnumerate: {
				data.EnforceInterface (descriptor);
				var result = this.Enumerate ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			case TransactionGenerateChallenge: {
				data.EnforceInterface (descriptor);
				int arg0 = default (int);
				arg0 = data.ReadInt ();
				var result = this.GenerateChallenge (arg0);
				reply.WriteNoException ();
				reply.WriteLong (result);
				return true;
				}

			case TransactionGetAuthenticatorId: {
				data.EnforceInterface (descriptor);
				var result = this.GetAuthenticatorId ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			case TransactionGetFeature: {
				data.EnforceInterface (descriptor);
				int arg0 = default (int);
				arg0 = data.ReadInt ();
				int arg1 = default (int);
				arg1 = data.ReadInt ();
				var result = this.GetFeature (arg0, arg1);
				reply.WriteNoException ();
				reply.WriteInt (result ? 1 : 0);
				return true;
				}

			case TransactionGetFeatureCount: {
				data.EnforceInterface (descriptor);
				var result = this.GetFeatureCount ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			case TransactionRemove: {
				data.EnforceInterface (descriptor);
				int arg0 = default (int);
				arg0 = data.ReadInt ();
				this.Remove (arg0);
				return true;
				}

			case TransactionResetLockout: {
				data.EnforceInterface (descriptor);
				byte [] arg0 = default (byte []);
				arg0 = data.CreateByteArray ();
				this.ResetLockout (arg0);
				return true;
				}

			case TransactionRevokeChallenge: {
				data.EnforceInterface (descriptor);
				var result = this.RevokeChallenge ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			case TransactionSetCallback: {
				data.EnforceInterface (descriptor);
				IFaceServiceReceiver arg0 = default (IFaceServiceReceiver);
				arg0 = IFaceServiceReceiverStub.AsInterface (data.ReadStrongBinder ());
				this.SetCallback (arg0);
				return true;
				}

			case TransactionSetFeature: {
				data.EnforceInterface (descriptor);
				int arg0 = default (int);
				arg0 = data.ReadInt ();
				bool arg1 = default (bool);
				arg1 = data.ReadInt () != 0;
				byte [] arg2 = default (byte []);
				arg2 = data.CreateByteArray ();
				int arg3 = default (int);
				arg3 = data.ReadInt ();
				this.SetFeature (arg0, arg1, arg2, arg3);
				return true;
				}

			}
			return base.OnTransact (code, data, reply, flags);
		}

		public class Proxy : Java.Lang.Object, Com.Android.Internal.Util.Custom.Faceunlock.IFaceService
		{
			global::Android.OS.IBinder remote;

			public Proxy (global::Android.OS.IBinder remote)
			{
				this.remote = remote;
			}

			public global::Android.OS.IBinder AsBinder ()
			{
				return remote;
			}

			public string GetInterfaceDescriptor ()
			{
				return descriptor;
			}

			public void Authenticate (long operationId)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteLong (operationId);
					remote.Transact (IFaceServiceStub.TransactionAuthenticate, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void Cancel ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IFaceServiceStub.TransactionCancel, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void Enroll (byte [] cryptoToken, int timeout, int [] disabledFeatures)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteByteArray (cryptoToken);
					__data.WriteInt (timeout);
					__data.WriteIntArray (disabledFeatures);
					remote.Transact (IFaceServiceStub.TransactionEnroll, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public int Enumerate ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IFaceServiceStub.TransactionEnumerate, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public long GenerateChallenge (int timeout)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				long __result = default (long);

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (timeout);
					remote.Transact (IFaceServiceStub.TransactionGenerateChallenge, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadLong ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public int GetAuthenticatorId ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IFaceServiceStub.TransactionGetAuthenticatorId, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public bool GetFeature (int feature, int faceId)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				bool __result = default (bool);

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (feature);
					__data.WriteInt (faceId);
					remote.Transact (IFaceServiceStub.TransactionGetFeature, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt () != 0;

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public int GetFeatureCount ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IFaceServiceStub.TransactionGetFeatureCount, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void Remove (int biometricId)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (biometricId);
					remote.Transact (IFaceServiceStub.TransactionRemove, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void ResetLockout (byte [] cryptoToken)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteByteArray (cryptoToken);
					remote.Transact (IFaceServiceStub.TransactionResetLockout, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public int RevokeChallenge ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IFaceServiceStub.TransactionRevokeChallenge, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void SetCallback (IFaceServiceReceiver receiver)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteStrongBinder ((((receiver != null)) ? (receiver.AsBinder ()) : (null)));
					remote.Transact (IFaceServiceStub.TransactionSetCallback, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void SetFeature (int feature, bool enable, byte [] token, int faceId)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (feature);
					__data.WriteInt (enable ? 1 : 0);
					__data.WriteByteArray (token);
					__data.WriteInt (faceId);
					remote.Transact (IFaceServiceStub.TransactionSetFeature, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


		}

		internal const int TransactionAuthenticate = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 0;

		internal const int TransactionCancel = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 1;

		internal const int TransactionEnroll = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 2;

		internal const int TransactionEnumerate = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 3;

		internal const int TransactionGenerateChallenge = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 4;

		internal const int TransactionGetAuthenticatorId = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 5;

		internal const int TransactionGetFeature = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 6;

		internal const int TransactionGetFeatureCount = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 7;

		internal const int TransactionRemove = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 8;

		internal const int TransactionResetLockout = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 9;

		internal const int TransactionRevokeChallenge = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 10;

		internal const int TransactionSetCallback = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 11;

		internal const int TransactionSetFeature = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 12;

		public abstract void Authenticate (long operationId);

		public abstract void Cancel ();

		public abstract void Enroll (byte [] cryptoToken, int timeout, int [] disabledFeatures);

		public abstract int Enumerate ();

		public abstract long GenerateChallenge (int timeout);

		public abstract int GetAuthenticatorId ();

		public abstract bool GetFeature (int feature, int faceId);

		public abstract int GetFeatureCount ();

		public abstract void Remove (int biometricId);

		public abstract void ResetLockout (byte [] cryptoToken);

		public abstract int RevokeChallenge ();

		public abstract void SetCallback (IFaceServiceReceiver receiver);

		public abstract void SetFeature (int feature, bool enable, byte [] token, int faceId);

	}
}

