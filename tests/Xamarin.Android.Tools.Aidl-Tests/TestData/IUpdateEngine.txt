/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Taken from https://github.com/PegasusOS/android_system_update_engine/blob/11/binder_bindings/android/brillo/IUpdateEngine.aidl
 */

package android.brillo;

import android.brillo.IUpdateEngineStatusCallback;
import android.brillo.ParcelableUpdateEngineStatus;

interface IUpdateEngine {
  void SetUpdateAttemptFlags(in int flags);
  boolean AttemptUpdate(in String app_version, in String omaha_url, in int flags);
  void AttemptRollback(in boolean powerwash);
  boolean CanRollback();
  void ResetStatus();
  ParcelableUpdateEngineStatus GetStatus();
  void RebootIfNeeded();
  void SetChannel(in String target_channel, in boolean powewash);
  String GetChannel(in boolean get_current_channel);
  void SetCohortHint(in String cohort_hint);
  String GetCohortHint();
  void SetP2PUpdatePermission(in boolean enabled);
  boolean GetP2PUpdatePermission();
  void SetUpdateOverCellularPermission(in boolean enabled);
  void SetUpdateOverCellularTarget(in String target_version,
                                   in long target_size);
  boolean GetUpdateOverCellularPermission();
  long GetDurationSinceUpdate();
  String GetPrevVersion();
  String GetRollbackPartition();
  void RegisterStatusCallback(in IUpdateEngineStatusCallback callback);
  int GetLastAttemptError();
  int GetEolStatus();
}

####

// This file is automatically generated and not supposed to be modified.
using System;
using Boolean = System.Boolean;
using String = System.String;
using List = Android.Runtime.JavaList;
using Map = Android.Runtime.JavaDictionary;
using Android.Brillo;

namespace Android.Brillo
{
	public interface IUpdateEngine : global::Android.OS.IInterface
	{
		void SetUpdateAttemptFlags (int flags);
		bool AttemptUpdate (String app_version, String omaha_url, int flags);
		void AttemptRollback (bool powerwash);
		bool CanRollback ();
		void ResetStatus ();
		ParcelableUpdateEngineStatus GetStatus ();
		void RebootIfNeeded ();
		void SetChannel (String target_channel, bool powewash);
		String GetChannel (bool get_current_channel);
		void SetCohortHint (String cohort_hint);
		String GetCohortHint ();
		void SetP2PUpdatePermission (bool enabled);
		bool GetP2PUpdatePermission ();
		void SetUpdateOverCellularPermission (bool enabled);
		void SetUpdateOverCellularTarget (String target_version, long target_size);
		bool GetUpdateOverCellularPermission ();
		long GetDurationSinceUpdate ();
		String GetPrevVersion ();
		String GetRollbackPartition ();
		void RegisterStatusCallback (IUpdateEngineStatusCallback callback);
		int GetLastAttemptError ();
		int GetEolStatus ();
	}

	public abstract class IUpdateEngineStub : global::Android.OS.Binder, global::Android.OS.IInterface, Android.Brillo.IUpdateEngine
	{
		const string descriptor = "android.brillo.IUpdateEngine";
		public IUpdateEngineStub ()
		{
			this.AttachInterface (this, descriptor);
		}

		public static Android.Brillo.IUpdateEngine AsInterface (global::Android.OS.IBinder obj)
		{
			if (obj == null)
				return null;
			var iin = (global::Android.OS.IInterface) obj.QueryLocalInterface (descriptor);
			if (iin != null && iin is Android.Brillo.IUpdateEngine)
				return (Android.Brillo.IUpdateEngine) iin;
			return new Proxy (obj);
		}

		public global::Android.OS.IBinder AsBinder ()
		{
			return this;
		}

		protected override bool OnTransact (int code, global::Android.OS.Parcel data, global::Android.OS.Parcel reply, int flags)
		{
			switch (code) {
			case global::Android.OS.BinderConsts.InterfaceTransaction:
				reply.WriteString (descriptor);
				return true;

			case TransactionSetUpdateAttemptFlags: {
				data.EnforceInterface (descriptor);
				int arg0 = default (int);
				arg0 = data.ReadInt ();
				this.SetUpdateAttemptFlags (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionAttemptUpdate: {
				data.EnforceInterface (descriptor);
				String arg0 = default (String);
				arg0 = data.ReadString ();
				String arg1 = default (String);
				arg1 = data.ReadString ();
				int arg2 = default (int);
				arg2 = data.ReadInt ();
				var result = this.AttemptUpdate (arg0, arg1, arg2);
				reply.WriteNoException ();
				reply.WriteInt (result ? 1 : 0);
				return true;
				}

			case TransactionAttemptRollback: {
				data.EnforceInterface (descriptor);
				bool arg0 = default (bool);
				arg0 = data.ReadInt () != 0;
				this.AttemptRollback (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionCanRollback: {
				data.EnforceInterface (descriptor);
				var result = this.CanRollback ();
				reply.WriteNoException ();
				reply.WriteInt (result ? 1 : 0);
				return true;
				}

			case TransactionResetStatus: {
				data.EnforceInterface (descriptor);
				this.ResetStatus ();
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetStatus: {
				data.EnforceInterface (descriptor);
				var result = this.GetStatus ();
				reply.WriteNoException ();
				reply.WriteStrongBinder ((((result != null)) ? (result.AsBinder ()) : (null)));
				return true;
				}

			case TransactionRebootIfNeeded: {
				data.EnforceInterface (descriptor);
				this.RebootIfNeeded ();
				reply.WriteNoException ();
				return true;
				}

			case TransactionSetChannel: {
				data.EnforceInterface (descriptor);
				String arg0 = default (String);
				arg0 = data.ReadString ();
				bool arg1 = default (bool);
				arg1 = data.ReadInt () != 0;
				this.SetChannel (arg0, arg1);
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetChannel: {
				data.EnforceInterface (descriptor);
				bool arg0 = default (bool);
				arg0 = data.ReadInt () != 0;
				var result = this.GetChannel (arg0);
				reply.WriteNoException ();
				reply.WriteString (result);
				return true;
				}

			case TransactionSetCohortHint: {
				data.EnforceInterface (descriptor);
				String arg0 = default (String);
				arg0 = data.ReadString ();
				this.SetCohortHint (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetCohortHint: {
				data.EnforceInterface (descriptor);
				var result = this.GetCohortHint ();
				reply.WriteNoException ();
				reply.WriteString (result);
				return true;
				}

			case TransactionSetP2PUpdatePermission: {
				data.EnforceInterface (descriptor);
				bool arg0 = default (bool);
				arg0 = data.ReadInt () != 0;
				this.SetP2PUpdatePermission (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetP2PUpdatePermission: {
				data.EnforceInterface (descriptor);
				var result = this.GetP2PUpdatePermission ();
				reply.WriteNoException ();
				reply.WriteInt (result ? 1 : 0);
				return true;
				}

			case TransactionSetUpdateOverCellularPermission: {
				data.EnforceInterface (descriptor);
				bool arg0 = default (bool);
				arg0 = data.ReadInt () != 0;
				this.SetUpdateOverCellularPermission (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionSetUpdateOverCellularTarget: {
				data.EnforceInterface (descriptor);
				String arg0 = default (String);
				arg0 = data.ReadString ();
				long arg1 = default (long);
				arg1 = data.ReadLong ();
				this.SetUpdateOverCellularTarget (arg0, arg1);
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetUpdateOverCellularPermission: {
				data.EnforceInterface (descriptor);
				var result = this.GetUpdateOverCellularPermission ();
				reply.WriteNoException ();
				reply.WriteInt (result ? 1 : 0);
				return true;
				}

			case TransactionGetDurationSinceUpdate: {
				data.EnforceInterface (descriptor);
				var result = this.GetDurationSinceUpdate ();
				reply.WriteNoException ();
				reply.WriteLong (result);
				return true;
				}

			case TransactionGetPrevVersion: {
				data.EnforceInterface (descriptor);
				var result = this.GetPrevVersion ();
				reply.WriteNoException ();
				reply.WriteString (result);
				return true;
				}

			case TransactionGetRollbackPartition: {
				data.EnforceInterface (descriptor);
				var result = this.GetRollbackPartition ();
				reply.WriteNoException ();
				reply.WriteString (result);
				return true;
				}

			case TransactionRegisterStatusCallback: {
				data.EnforceInterface (descriptor);
				IUpdateEngineStatusCallback arg0 = default (IUpdateEngineStatusCallback);
				arg0 = IUpdateEngineStatusCallbackStub.AsInterface (data.ReadStrongBinder ());
				this.RegisterStatusCallback (arg0);
				reply.WriteNoException ();
				return true;
				}

			case TransactionGetLastAttemptError: {
				data.EnforceInterface (descriptor);
				var result = this.GetLastAttemptError ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			case TransactionGetEolStatus: {
				data.EnforceInterface (descriptor);
				var result = this.GetEolStatus ();
				reply.WriteNoException ();
				reply.WriteInt (result);
				return true;
				}

			}
			return base.OnTransact (code, data, reply, flags);
		}

		public class Proxy : Java.Lang.Object, Android.Brillo.IUpdateEngine
		{
			global::Android.OS.IBinder remote;

			public Proxy (global::Android.OS.IBinder remote)
			{
				this.remote = remote;
			}

			public global::Android.OS.IBinder AsBinder ()
			{
				return remote;
			}

			public string GetInterfaceDescriptor ()
			{
				return descriptor;
			}

			public void SetUpdateAttemptFlags (int flags)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (flags);
					remote.Transact (IUpdateEngineStub.TransactionSetUpdateAttemptFlags, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public bool AttemptUpdate (String app_version, String omaha_url, int flags)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				bool __result = default (bool);

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteString (app_version);
					__data.WriteString (omaha_url);
					__data.WriteInt (flags);
					remote.Transact (IUpdateEngineStub.TransactionAttemptUpdate, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt () != 0;

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void AttemptRollback (bool powerwash)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (powerwash ? 1 : 0);
					remote.Transact (IUpdateEngineStub.TransactionAttemptRollback, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public bool CanRollback ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				bool __result = default (bool);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionCanRollback, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt () != 0;

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void ResetStatus ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionResetStatus, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public ParcelableUpdateEngineStatus GetStatus ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				ParcelableUpdateEngineStatus __result = default (ParcelableUpdateEngineStatus);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetStatus, __data, __reply, 0);
					__reply.ReadException ();
					__result = ParcelableUpdateEngineStatusStub.AsInterface (__reply.ReadStrongBinder ());

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void RebootIfNeeded ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionRebootIfNeeded, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void SetChannel (String target_channel, bool powewash)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteString (target_channel);
					__data.WriteInt (powewash ? 1 : 0);
					remote.Transact (IUpdateEngineStub.TransactionSetChannel, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public String GetChannel (bool get_current_channel)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				String __result = default (String);

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (get_current_channel ? 1 : 0);
					remote.Transact (IUpdateEngineStub.TransactionGetChannel, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadString ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void SetCohortHint (String cohort_hint)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteString (cohort_hint);
					remote.Transact (IUpdateEngineStub.TransactionSetCohortHint, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public String GetCohortHint ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				String __result = default (String);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetCohortHint, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadString ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void SetP2PUpdatePermission (bool enabled)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (enabled ? 1 : 0);
					remote.Transact (IUpdateEngineStub.TransactionSetP2PUpdatePermission, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public bool GetP2PUpdatePermission ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				bool __result = default (bool);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetP2PUpdatePermission, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt () != 0;

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void SetUpdateOverCellularPermission (bool enabled)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteInt (enabled ? 1 : 0);
					remote.Transact (IUpdateEngineStub.TransactionSetUpdateOverCellularPermission, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public void SetUpdateOverCellularTarget (String target_version, long target_size)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteString (target_version);
					__data.WriteLong (target_size);
					remote.Transact (IUpdateEngineStub.TransactionSetUpdateOverCellularTarget, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public bool GetUpdateOverCellularPermission ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				bool __result = default (bool);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetUpdateOverCellularPermission, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt () != 0;

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public long GetDurationSinceUpdate ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				long __result = default (long);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetDurationSinceUpdate, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadLong ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public String GetPrevVersion ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				String __result = default (String);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetPrevVersion, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadString ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public String GetRollbackPartition ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				String __result = default (String);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetRollbackPartition, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadString ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public void RegisterStatusCallback (IUpdateEngineStatusCallback callback)
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();

				try {
					__data.WriteInterfaceToken (descriptor);
					__data.WriteStrongBinder ((((callback != null)) ? (callback.AsBinder ()) : (null)));
					remote.Transact (IUpdateEngineStub.TransactionRegisterStatusCallback, __data, __reply, 0);
					__reply.ReadException ();

				} finally {
					__data.Recycle ();
				}

			}


			public int GetLastAttemptError ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetLastAttemptError, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


			public int GetEolStatus ()
			{
				global::Android.OS.Parcel __data = global::Android.OS.Parcel.Obtain ();

				global::Android.OS.Parcel __reply = global::Android.OS.Parcel.Obtain ();
				int __result = default (int);

				try {
					__data.WriteInterfaceToken (descriptor);
					remote.Transact (IUpdateEngineStub.TransactionGetEolStatus, __data, __reply, 0);
					__reply.ReadException ();
					__result = __reply.ReadInt ();

				} finally {
					__reply.Recycle ();
					__data.Recycle ();
				}
				return __result;

			}


		}

		internal const int TransactionSetUpdateAttemptFlags = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 0;

		internal const int TransactionAttemptUpdate = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 1;

		internal const int TransactionAttemptRollback = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 2;

		internal const int TransactionCanRollback = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 3;

		internal const int TransactionResetStatus = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 4;

		internal const int TransactionGetStatus = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 5;

		internal const int TransactionRebootIfNeeded = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 6;

		internal const int TransactionSetChannel = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 7;

		internal const int TransactionGetChannel = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 8;

		internal const int TransactionSetCohortHint = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 9;

		internal const int TransactionGetCohortHint = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 10;

		internal const int TransactionSetP2PUpdatePermission = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 11;

		internal const int TransactionGetP2PUpdatePermission = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 12;

		internal const int TransactionSetUpdateOverCellularPermission = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 13;

		internal const int TransactionSetUpdateOverCellularTarget = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 14;

		internal const int TransactionGetUpdateOverCellularPermission = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 15;

		internal const int TransactionGetDurationSinceUpdate = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 16;

		internal const int TransactionGetPrevVersion = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 17;

		internal const int TransactionGetRollbackPartition = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 18;

		internal const int TransactionRegisterStatusCallback = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 19;

		internal const int TransactionGetLastAttemptError = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 20;

		internal const int TransactionGetEolStatus = global::Android.OS.Binder.InterfaceConsts.FirstCallTransaction + 21;

		public abstract void SetUpdateAttemptFlags (int flags);

		public abstract bool AttemptUpdate (String app_version, String omaha_url, int flags);

		public abstract void AttemptRollback (bool powerwash);

		public abstract bool CanRollback ();

		public abstract void ResetStatus ();

		public abstract ParcelableUpdateEngineStatus GetStatus ();

		public abstract void RebootIfNeeded ();

		public abstract void SetChannel (String target_channel, bool powewash);

		public abstract String GetChannel (bool get_current_channel);

		public abstract void SetCohortHint (String cohort_hint);

		public abstract String GetCohortHint ();

		public abstract void SetP2PUpdatePermission (bool enabled);

		public abstract bool GetP2PUpdatePermission ();

		public abstract void SetUpdateOverCellularPermission (bool enabled);

		public abstract void SetUpdateOverCellularTarget (String target_version, long target_size);

		public abstract bool GetUpdateOverCellularPermission ();

		public abstract long GetDurationSinceUpdate ();

		public abstract String GetPrevVersion ();

		public abstract String GetRollbackPartition ();

		public abstract void RegisterStatusCallback (IUpdateEngineStatusCallback callback);

		public abstract int GetLastAttemptError ();

		public abstract int GetEolStatus ();

	}
}

