// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Configuration.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aapt.Pb {

  /// <summary>Holder for reflection information generated from Configuration.proto</summary>
  public static partial class ConfigurationReflection {

    #region Descriptor
    /// <summary>File descriptor for Configuration.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigurationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDb25maWd1cmF0aW9uLnByb3RvEgdhYXB0LnBiIpcWCg1Db25maWd1cmF0",
            "aW9uEgsKA21jYxgBIAEoDRILCgNtbmMYAiABKA0SDgoGbG9jYWxlGAMgASgJ",
            "EkAKEGxheW91dF9kaXJlY3Rpb24YBCABKA4yJi5hYXB0LnBiLkNvbmZpZ3Vy",
            "YXRpb24uTGF5b3V0RGlyZWN0aW9uEhQKDHNjcmVlbl93aWR0aBgFIAEoDRIV",
            "Cg1zY3JlZW5faGVpZ2h0GAYgASgNEhcKD3NjcmVlbl93aWR0aF9kcBgHIAEo",
            "DRIYChBzY3JlZW5faGVpZ2h0X2RwGAggASgNEiAKGHNtYWxsZXN0X3NjcmVl",
            "bl93aWR0aF9kcBgJIAEoDRJDChJzY3JlZW5fbGF5b3V0X3NpemUYCiABKA4y",
            "Jy5hYXB0LnBiLkNvbmZpZ3VyYXRpb24uU2NyZWVuTGF5b3V0U2l6ZRJDChJz",
            "Y3JlZW5fbGF5b3V0X2xvbmcYCyABKA4yJy5hYXB0LnBiLkNvbmZpZ3VyYXRp",
            "b24uU2NyZWVuTGF5b3V0TG9uZxI4CgxzY3JlZW5fcm91bmQYDCABKA4yIi5h",
            "YXB0LnBiLkNvbmZpZ3VyYXRpb24uU2NyZWVuUm91bmQSPwoQd2lkZV9jb2xv",
            "cl9nYW11dBgNIAEoDjIlLmFhcHQucGIuQ29uZmlndXJhdGlvbi5XaWRlQ29s",
            "b3JHYW11dBInCgNoZHIYDiABKA4yGi5hYXB0LnBiLkNvbmZpZ3VyYXRpb24u",
            "SGRyEjcKC29yaWVudGF0aW9uGA8gASgOMiIuYWFwdC5wYi5Db25maWd1cmF0",
            "aW9uLk9yaWVudGF0aW9uEjcKDHVpX21vZGVfdHlwZRgQIAEoDjIhLmFhcHQu",
            "cGIuQ29uZmlndXJhdGlvbi5VaU1vZGVUeXBlEjkKDXVpX21vZGVfbmlnaHQY",
            "ESABKA4yIi5hYXB0LnBiLkNvbmZpZ3VyYXRpb24uVWlNb2RlTmlnaHQSDwoH",
            "ZGVuc2l0eRgSIAEoDRI3Cgt0b3VjaHNjcmVlbhgTIAEoDjIiLmFhcHQucGIu",
            "Q29uZmlndXJhdGlvbi5Ub3VjaHNjcmVlbhI2CgtrZXlzX2hpZGRlbhgUIAEo",
            "DjIhLmFhcHQucGIuQ29uZmlndXJhdGlvbi5LZXlzSGlkZGVuEjEKCGtleWJv",
            "YXJkGBUgASgOMh8uYWFwdC5wYi5Db25maWd1cmF0aW9uLktleWJvYXJkEjQK",
            "Cm5hdl9oaWRkZW4YFiABKA4yIC5hYXB0LnBiLkNvbmZpZ3VyYXRpb24uTmF2",
            "SGlkZGVuEjUKCm5hdmlnYXRpb24YFyABKA4yIS5hYXB0LnBiLkNvbmZpZ3Vy",
            "YXRpb24uTmF2aWdhdGlvbhITCgtzZGtfdmVyc2lvbhgYIAEoDRJEChJncmFt",
            "bWF0aWNhbF9nZW5kZXIYGiABKA4yKC5hYXB0LnBiLkNvbmZpZ3VyYXRpb24u",
            "R3JhbW1hdGljYWxHZW5kZXISDwoHcHJvZHVjdBgZIAEoCSJhCg9MYXlvdXRE",
            "aXJlY3Rpb24SGgoWTEFZT1VUX0RJUkVDVElPTl9VTlNFVBAAEhgKFExBWU9V",
            "VF9ESVJFQ1RJT05fTFRSEAESGAoUTEFZT1VUX0RJUkVDVElPTl9SVEwQAiKq",
            "AQoQU2NyZWVuTGF5b3V0U2l6ZRIcChhTQ1JFRU5fTEFZT1VUX1NJWkVfVU5T",
            "RVQQABIcChhTQ1JFRU5fTEFZT1VUX1NJWkVfU01BTEwQARIdChlTQ1JFRU5f",
            "TEFZT1VUX1NJWkVfTk9STUFMEAISHAoYU0NSRUVOX0xBWU9VVF9TSVpFX0xB",
            "UkdFEAMSHQoZU0NSRUVOX0xBWU9VVF9TSVpFX1hMQVJHRRAEIm0KEFNjcmVl",
            "bkxheW91dExvbmcSHAoYU0NSRUVOX0xBWU9VVF9MT05HX1VOU0VUEAASGwoX",
            "U0NSRUVOX0xBWU9VVF9MT05HX0xPTkcQARIeChpTQ1JFRU5fTEFZT1VUX0xP",
            "TkdfTk9UTE9ORxACIlgKC1NjcmVlblJvdW5kEhYKElNDUkVFTl9ST1VORF9V",
            "TlNFVBAAEhYKElNDUkVFTl9ST1VORF9ST1VORBABEhkKFVNDUkVFTl9ST1VO",
            "RF9OT1RST1VORBACImgKDldpZGVDb2xvckdhbXV0EhoKFldJREVfQ09MT1Jf",
            "R0FNVVRfVU5TRVQQABIbChdXSURFX0NPTE9SX0dBTVVUX1dJREVDRxABEh0K",
            "GVdJREVfQ09MT1JfR0FNVVRfTk9XSURFQ0cQAiIzCgNIZHISDQoJSERSX1VO",
            "U0VUEAASDgoKSERSX0hJR0hEUhABEg0KCUhEUl9MT1dEUhACImgKC09yaWVu",
            "dGF0aW9uEhUKEU9SSUVOVEFUSU9OX1VOU0VUEAASFAoQT1JJRU5UQVRJT05f",
            "UE9SVBABEhQKEE9SSUVOVEFUSU9OX0xBTkQQAhIWChJPUklFTlRBVElPTl9T",
            "UVVBUkUQAyLXAQoKVWlNb2RlVHlwZRIWChJVSV9NT0RFX1RZUEVfVU5TRVQQ",
            "ABIXChNVSV9NT0RFX1RZUEVfTk9STUFMEAESFQoRVUlfTU9ERV9UWVBFX0RF",
            "U0sQAhIUChBVSV9NT0RFX1RZUEVfQ0FSEAMSGwoXVUlfTU9ERV9UWVBFX1RF",
            "TEVWSVNJT04QBBIaChZVSV9NT0RFX1RZUEVfQVBQTElBTkNFEAUSFgoSVUlf",
            "TU9ERV9UWVBFX1dBVENIEAYSGgoWVUlfTU9ERV9UWVBFX1ZSSEVBRFNFVBAH",
            "IlsKC1VpTW9kZU5pZ2h0EhcKE1VJX01PREVfTklHSFRfVU5TRVQQABIXChNV",
            "SV9NT0RFX05JR0hUX05JR0hUEAESGgoWVUlfTU9ERV9OSUdIVF9OT1ROSUdI",
            "VBACIm0KC1RvdWNoc2NyZWVuEhUKEVRPVUNIU0NSRUVOX1VOU0VUEAASFwoT",
            "VE9VQ0hTQ1JFRU5fTk9UT1VDSBABEhYKElRPVUNIU0NSRUVOX1NUWUxVUxAC",
            "EhYKElRPVUNIU0NSRUVOX0ZJTkdFUhADInYKCktleXNIaWRkZW4SFQoRS0VZ",
            "U19ISURERU5fVU5TRVQQABIbChdLRVlTX0hJRERFTl9LRVlTRVhQT1NFRBAB",
            "EhoKFktFWVNfSElEREVOX0tFWVNISURERU4QAhIYChRLRVlTX0hJRERFTl9L",
            "RVlTU09GVBADImAKCEtleWJvYXJkEhIKDktFWUJPQVJEX1VOU0VUEAASEwoP",
            "S0VZQk9BUkRfTk9LRVlTEAESEwoPS0VZQk9BUkRfUVdFUlRZEAISFgoSS0VZ",
            "Qk9BUkRfVFdFTFZFS0VZEAMiVgoJTmF2SGlkZGVuEhQKEE5BVl9ISURERU5f",
            "VU5TRVQQABIZChVOQVZfSElEREVOX05BVkVYUE9TRUQQARIYChROQVZfSElE",
            "REVOX05BVkhJRERFThACIn0KCk5hdmlnYXRpb24SFAoQTkFWSUdBVElPTl9V",
            "TlNFVBAAEhQKEE5BVklHQVRJT05fTk9OQVYQARITCg9OQVZJR0FUSU9OX0RQ",
            "QUQQAhIYChROQVZJR0FUSU9OX1RSQUNLQkFMTBADEhQKEE5BVklHQVRJT05f",
            "V0hFRUwQBCJ2ChFHcmFtbWF0aWNhbEdlbmRlchIUChBHUkFNX0dFTkRFUl9V",
            "U0VUEAASFgoSR1JBTV9HRU5ERVJfTkVVVEVSEAESGAoUR1JBTV9HRU5ERVJf",
            "RkVNSU5JTkUQAhIZChVHUkFNX0dFTkRFUl9NQVNDVUxJTkUQA0ISChBjb20u",
            "YW5kcm9pZC5hYXB0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aapt.Pb.Configuration), global::Aapt.Pb.Configuration.Parser, new[]{ "Mcc", "Mnc", "Locale", "LayoutDirection", "ScreenWidth", "ScreenHeight", "ScreenWidthDp", "ScreenHeightDp", "SmallestScreenWidthDp", "ScreenLayoutSize", "ScreenLayoutLong", "ScreenRound", "WideColorGamut", "Hdr", "Orientation", "UiModeType", "UiModeNight", "Density", "Touchscreen", "KeysHidden", "Keyboard", "NavHidden", "Navigation", "SdkVersion", "GrammaticalGender", "Product" }, null, new[]{ typeof(global::Aapt.Pb.Configuration.Types.LayoutDirection), typeof(global::Aapt.Pb.Configuration.Types.ScreenLayoutSize), typeof(global::Aapt.Pb.Configuration.Types.ScreenLayoutLong), typeof(global::Aapt.Pb.Configuration.Types.ScreenRound), typeof(global::Aapt.Pb.Configuration.Types.WideColorGamut), typeof(global::Aapt.Pb.Configuration.Types.Hdr), typeof(global::Aapt.Pb.Configuration.Types.Orientation), typeof(global::Aapt.Pb.Configuration.Types.UiModeType), typeof(global::Aapt.Pb.Configuration.Types.UiModeNight), typeof(global::Aapt.Pb.Configuration.Types.Touchscreen), typeof(global::Aapt.Pb.Configuration.Types.KeysHidden), typeof(global::Aapt.Pb.Configuration.Types.Keyboard), typeof(global::Aapt.Pb.Configuration.Types.NavHidden), typeof(global::Aapt.Pb.Configuration.Types.Navigation), typeof(global::Aapt.Pb.Configuration.Types.GrammaticalGender) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A description of the requirements a device must have in order for a
  /// resource to be matched and selected.
  /// </summary>
  public sealed partial class Configuration : pb::IMessage<Configuration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Configuration> _parser = new pb::MessageParser<Configuration>(() => new Configuration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Configuration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aapt.Pb.ConfigurationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Configuration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Configuration(Configuration other) : this() {
      mcc_ = other.mcc_;
      mnc_ = other.mnc_;
      locale_ = other.locale_;
      layoutDirection_ = other.layoutDirection_;
      screenWidth_ = other.screenWidth_;
      screenHeight_ = other.screenHeight_;
      screenWidthDp_ = other.screenWidthDp_;
      screenHeightDp_ = other.screenHeightDp_;
      smallestScreenWidthDp_ = other.smallestScreenWidthDp_;
      screenLayoutSize_ = other.screenLayoutSize_;
      screenLayoutLong_ = other.screenLayoutLong_;
      screenRound_ = other.screenRound_;
      wideColorGamut_ = other.wideColorGamut_;
      hdr_ = other.hdr_;
      orientation_ = other.orientation_;
      uiModeType_ = other.uiModeType_;
      uiModeNight_ = other.uiModeNight_;
      density_ = other.density_;
      touchscreen_ = other.touchscreen_;
      keysHidden_ = other.keysHidden_;
      keyboard_ = other.keyboard_;
      navHidden_ = other.navHidden_;
      navigation_ = other.navigation_;
      sdkVersion_ = other.sdkVersion_;
      grammaticalGender_ = other.grammaticalGender_;
      product_ = other.product_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Configuration Clone() {
      return new Configuration(this);
    }

    /// <summary>Field number for the "mcc" field.</summary>
    public const int MccFieldNumber = 1;
    private uint mcc_;
    /// <summary>
    /// Mobile country code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Mcc {
      get { return mcc_; }
      set {
        mcc_ = value;
      }
    }

    /// <summary>Field number for the "mnc" field.</summary>
    public const int MncFieldNumber = 2;
    private uint mnc_;
    /// <summary>
    /// Mobile network code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Mnc {
      get { return mnc_; }
      set {
        mnc_ = value;
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 3;
    private string locale_ = "";
    /// <summary>
    /// BCP-47 locale tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layout_direction" field.</summary>
    public const int LayoutDirectionFieldNumber = 4;
    private global::Aapt.Pb.Configuration.Types.LayoutDirection layoutDirection_ = global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset;
    /// <summary>
    /// Left-to-right, right-to-left...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.LayoutDirection LayoutDirection {
      get { return layoutDirection_; }
      set {
        layoutDirection_ = value;
      }
    }

    /// <summary>Field number for the "screen_width" field.</summary>
    public const int ScreenWidthFieldNumber = 5;
    private uint screenWidth_;
    /// <summary>
    /// Screen width in pixels. Prefer screen_width_dp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ScreenWidth {
      get { return screenWidth_; }
      set {
        screenWidth_ = value;
      }
    }

    /// <summary>Field number for the "screen_height" field.</summary>
    public const int ScreenHeightFieldNumber = 6;
    private uint screenHeight_;
    /// <summary>
    /// Screen height in pixels. Prefer screen_height_dp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ScreenHeight {
      get { return screenHeight_; }
      set {
        screenHeight_ = value;
      }
    }

    /// <summary>Field number for the "screen_width_dp" field.</summary>
    public const int ScreenWidthDpFieldNumber = 7;
    private uint screenWidthDp_;
    /// <summary>
    /// Screen width in density independent pixels (dp).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ScreenWidthDp {
      get { return screenWidthDp_; }
      set {
        screenWidthDp_ = value;
      }
    }

    /// <summary>Field number for the "screen_height_dp" field.</summary>
    public const int ScreenHeightDpFieldNumber = 8;
    private uint screenHeightDp_;
    /// <summary>
    /// Screen height in density independent pixels (dp).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ScreenHeightDp {
      get { return screenHeightDp_; }
      set {
        screenHeightDp_ = value;
      }
    }

    /// <summary>Field number for the "smallest_screen_width_dp" field.</summary>
    public const int SmallestScreenWidthDpFieldNumber = 9;
    private uint smallestScreenWidthDp_;
    /// <summary>
    /// The smallest screen dimension, regardless of orientation, in dp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SmallestScreenWidthDp {
      get { return smallestScreenWidthDp_; }
      set {
        smallestScreenWidthDp_ = value;
      }
    }

    /// <summary>Field number for the "screen_layout_size" field.</summary>
    public const int ScreenLayoutSizeFieldNumber = 10;
    private global::Aapt.Pb.Configuration.Types.ScreenLayoutSize screenLayoutSize_ = global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset;
    /// <summary>
    /// Whether the device screen is classified as small, normal, large, xlarge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.ScreenLayoutSize ScreenLayoutSize {
      get { return screenLayoutSize_; }
      set {
        screenLayoutSize_ = value;
      }
    }

    /// <summary>Field number for the "screen_layout_long" field.</summary>
    public const int ScreenLayoutLongFieldNumber = 11;
    private global::Aapt.Pb.Configuration.Types.ScreenLayoutLong screenLayoutLong_ = global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset;
    /// <summary>
    /// Whether the device screen is long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.ScreenLayoutLong ScreenLayoutLong {
      get { return screenLayoutLong_; }
      set {
        screenLayoutLong_ = value;
      }
    }

    /// <summary>Field number for the "screen_round" field.</summary>
    public const int ScreenRoundFieldNumber = 12;
    private global::Aapt.Pb.Configuration.Types.ScreenRound screenRound_ = global::Aapt.Pb.Configuration.Types.ScreenRound.Unset;
    /// <summary>
    /// Whether the screen is round (Android Wear).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.ScreenRound ScreenRound {
      get { return screenRound_; }
      set {
        screenRound_ = value;
      }
    }

    /// <summary>Field number for the "wide_color_gamut" field.</summary>
    public const int WideColorGamutFieldNumber = 13;
    private global::Aapt.Pb.Configuration.Types.WideColorGamut wideColorGamut_ = global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset;
    /// <summary>
    /// Whether the screen supports wide color gamut.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.WideColorGamut WideColorGamut {
      get { return wideColorGamut_; }
      set {
        wideColorGamut_ = value;
      }
    }

    /// <summary>Field number for the "hdr" field.</summary>
    public const int HdrFieldNumber = 14;
    private global::Aapt.Pb.Configuration.Types.Hdr hdr_ = global::Aapt.Pb.Configuration.Types.Hdr.Unset;
    /// <summary>
    /// Whether the screen has high dynamic range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.Hdr Hdr {
      get { return hdr_; }
      set {
        hdr_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 15;
    private global::Aapt.Pb.Configuration.Types.Orientation orientation_ = global::Aapt.Pb.Configuration.Types.Orientation.Unset;
    /// <summary>
    /// Which orientation the device is in (portrait, landscape).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.Orientation Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "ui_mode_type" field.</summary>
    public const int UiModeTypeFieldNumber = 16;
    private global::Aapt.Pb.Configuration.Types.UiModeType uiModeType_ = global::Aapt.Pb.Configuration.Types.UiModeType.Unset;
    /// <summary>
    /// Which type of UI mode the device is in (television, car, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.UiModeType UiModeType {
      get { return uiModeType_; }
      set {
        uiModeType_ = value;
      }
    }

    /// <summary>Field number for the "ui_mode_night" field.</summary>
    public const int UiModeNightFieldNumber = 17;
    private global::Aapt.Pb.Configuration.Types.UiModeNight uiModeNight_ = global::Aapt.Pb.Configuration.Types.UiModeNight.Unset;
    /// <summary>
    /// Whether the device is in night mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.UiModeNight UiModeNight {
      get { return uiModeNight_; }
      set {
        uiModeNight_ = value;
      }
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 18;
    private uint density_;
    /// <summary>
    /// The device's screen density in dots-per-inch (dpi).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Density {
      get { return density_; }
      set {
        density_ = value;
      }
    }

    /// <summary>Field number for the "touchscreen" field.</summary>
    public const int TouchscreenFieldNumber = 19;
    private global::Aapt.Pb.Configuration.Types.Touchscreen touchscreen_ = global::Aapt.Pb.Configuration.Types.Touchscreen.Unset;
    /// <summary>
    /// Whether a touchscreen exists, supports a stylus, or finger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.Touchscreen Touchscreen {
      get { return touchscreen_; }
      set {
        touchscreen_ = value;
      }
    }

    /// <summary>Field number for the "keys_hidden" field.</summary>
    public const int KeysHiddenFieldNumber = 20;
    private global::Aapt.Pb.Configuration.Types.KeysHidden keysHidden_ = global::Aapt.Pb.Configuration.Types.KeysHidden.Unset;
    /// <summary>
    /// Whether the keyboard hardware keys are currently hidden, exposed, or
    /// if the keyboard is a software keyboard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.KeysHidden KeysHidden {
      get { return keysHidden_; }
      set {
        keysHidden_ = value;
      }
    }

    /// <summary>Field number for the "keyboard" field.</summary>
    public const int KeyboardFieldNumber = 21;
    private global::Aapt.Pb.Configuration.Types.Keyboard keyboard_ = global::Aapt.Pb.Configuration.Types.Keyboard.Unset;
    /// <summary>
    /// The type of keyboard present (none, QWERTY, 12-key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.Keyboard Keyboard {
      get { return keyboard_; }
      set {
        keyboard_ = value;
      }
    }

    /// <summary>Field number for the "nav_hidden" field.</summary>
    public const int NavHiddenFieldNumber = 22;
    private global::Aapt.Pb.Configuration.Types.NavHidden navHidden_ = global::Aapt.Pb.Configuration.Types.NavHidden.Unset;
    /// <summary>
    /// Whether the navigation is exposed or hidden.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.NavHidden NavHidden {
      get { return navHidden_; }
      set {
        navHidden_ = value;
      }
    }

    /// <summary>Field number for the "navigation" field.</summary>
    public const int NavigationFieldNumber = 23;
    private global::Aapt.Pb.Configuration.Types.Navigation navigation_ = global::Aapt.Pb.Configuration.Types.Navigation.Unset;
    /// <summary>
    /// The type of navigation present on the device
    /// (trackball, wheel, dpad, etc.).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.Navigation Navigation {
      get { return navigation_; }
      set {
        navigation_ = value;
      }
    }

    /// <summary>Field number for the "sdk_version" field.</summary>
    public const int SdkVersionFieldNumber = 24;
    private uint sdkVersion_;
    /// <summary>
    /// The minimum SDK version of the device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = value;
      }
    }

    /// <summary>Field number for the "grammatical_gender" field.</summary>
    public const int GrammaticalGenderFieldNumber = 26;
    private global::Aapt.Pb.Configuration.Types.GrammaticalGender grammaticalGender_ = global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset;
    /// <summary>
    /// Grammatical gender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aapt.Pb.Configuration.Types.GrammaticalGender GrammaticalGender {
      get { return grammaticalGender_; }
      set {
        grammaticalGender_ = value;
      }
    }

    /// <summary>Field number for the "product" field.</summary>
    public const int ProductFieldNumber = 25;
    private string product_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Product {
      get { return product_; }
      set {
        product_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Configuration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Configuration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mcc != other.Mcc) return false;
      if (Mnc != other.Mnc) return false;
      if (Locale != other.Locale) return false;
      if (LayoutDirection != other.LayoutDirection) return false;
      if (ScreenWidth != other.ScreenWidth) return false;
      if (ScreenHeight != other.ScreenHeight) return false;
      if (ScreenWidthDp != other.ScreenWidthDp) return false;
      if (ScreenHeightDp != other.ScreenHeightDp) return false;
      if (SmallestScreenWidthDp != other.SmallestScreenWidthDp) return false;
      if (ScreenLayoutSize != other.ScreenLayoutSize) return false;
      if (ScreenLayoutLong != other.ScreenLayoutLong) return false;
      if (ScreenRound != other.ScreenRound) return false;
      if (WideColorGamut != other.WideColorGamut) return false;
      if (Hdr != other.Hdr) return false;
      if (Orientation != other.Orientation) return false;
      if (UiModeType != other.UiModeType) return false;
      if (UiModeNight != other.UiModeNight) return false;
      if (Density != other.Density) return false;
      if (Touchscreen != other.Touchscreen) return false;
      if (KeysHidden != other.KeysHidden) return false;
      if (Keyboard != other.Keyboard) return false;
      if (NavHidden != other.NavHidden) return false;
      if (Navigation != other.Navigation) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GrammaticalGender != other.GrammaticalGender) return false;
      if (Product != other.Product) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Mcc != 0) hash ^= Mcc.GetHashCode();
      if (Mnc != 0) hash ^= Mnc.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (LayoutDirection != global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset) hash ^= LayoutDirection.GetHashCode();
      if (ScreenWidth != 0) hash ^= ScreenWidth.GetHashCode();
      if (ScreenHeight != 0) hash ^= ScreenHeight.GetHashCode();
      if (ScreenWidthDp != 0) hash ^= ScreenWidthDp.GetHashCode();
      if (ScreenHeightDp != 0) hash ^= ScreenHeightDp.GetHashCode();
      if (SmallestScreenWidthDp != 0) hash ^= SmallestScreenWidthDp.GetHashCode();
      if (ScreenLayoutSize != global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset) hash ^= ScreenLayoutSize.GetHashCode();
      if (ScreenLayoutLong != global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset) hash ^= ScreenLayoutLong.GetHashCode();
      if (ScreenRound != global::Aapt.Pb.Configuration.Types.ScreenRound.Unset) hash ^= ScreenRound.GetHashCode();
      if (WideColorGamut != global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset) hash ^= WideColorGamut.GetHashCode();
      if (Hdr != global::Aapt.Pb.Configuration.Types.Hdr.Unset) hash ^= Hdr.GetHashCode();
      if (Orientation != global::Aapt.Pb.Configuration.Types.Orientation.Unset) hash ^= Orientation.GetHashCode();
      if (UiModeType != global::Aapt.Pb.Configuration.Types.UiModeType.Unset) hash ^= UiModeType.GetHashCode();
      if (UiModeNight != global::Aapt.Pb.Configuration.Types.UiModeNight.Unset) hash ^= UiModeNight.GetHashCode();
      if (Density != 0) hash ^= Density.GetHashCode();
      if (Touchscreen != global::Aapt.Pb.Configuration.Types.Touchscreen.Unset) hash ^= Touchscreen.GetHashCode();
      if (KeysHidden != global::Aapt.Pb.Configuration.Types.KeysHidden.Unset) hash ^= KeysHidden.GetHashCode();
      if (Keyboard != global::Aapt.Pb.Configuration.Types.Keyboard.Unset) hash ^= Keyboard.GetHashCode();
      if (NavHidden != global::Aapt.Pb.Configuration.Types.NavHidden.Unset) hash ^= NavHidden.GetHashCode();
      if (Navigation != global::Aapt.Pb.Configuration.Types.Navigation.Unset) hash ^= Navigation.GetHashCode();
      if (SdkVersion != 0) hash ^= SdkVersion.GetHashCode();
      if (GrammaticalGender != global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset) hash ^= GrammaticalGender.GetHashCode();
      if (Product.Length != 0) hash ^= Product.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mcc != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mcc);
      }
      if (Mnc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mnc);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Locale);
      }
      if (LayoutDirection != global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LayoutDirection);
      }
      if (ScreenWidth != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScreenWidth);
      }
      if (ScreenHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScreenHeight);
      }
      if (ScreenWidthDp != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ScreenWidthDp);
      }
      if (ScreenHeightDp != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ScreenHeightDp);
      }
      if (SmallestScreenWidthDp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SmallestScreenWidthDp);
      }
      if (ScreenLayoutSize != global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ScreenLayoutSize);
      }
      if (ScreenLayoutLong != global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ScreenLayoutLong);
      }
      if (ScreenRound != global::Aapt.Pb.Configuration.Types.ScreenRound.Unset) {
        output.WriteRawTag(96);
        output.WriteEnum((int) ScreenRound);
      }
      if (WideColorGamut != global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset) {
        output.WriteRawTag(104);
        output.WriteEnum((int) WideColorGamut);
      }
      if (Hdr != global::Aapt.Pb.Configuration.Types.Hdr.Unset) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Hdr);
      }
      if (Orientation != global::Aapt.Pb.Configuration.Types.Orientation.Unset) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Orientation);
      }
      if (UiModeType != global::Aapt.Pb.Configuration.Types.UiModeType.Unset) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) UiModeType);
      }
      if (UiModeNight != global::Aapt.Pb.Configuration.Types.UiModeNight.Unset) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) UiModeNight);
      }
      if (Density != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Density);
      }
      if (Touchscreen != global::Aapt.Pb.Configuration.Types.Touchscreen.Unset) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Touchscreen);
      }
      if (KeysHidden != global::Aapt.Pb.Configuration.Types.KeysHidden.Unset) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) KeysHidden);
      }
      if (Keyboard != global::Aapt.Pb.Configuration.Types.Keyboard.Unset) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Keyboard);
      }
      if (NavHidden != global::Aapt.Pb.Configuration.Types.NavHidden.Unset) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) NavHidden);
      }
      if (Navigation != global::Aapt.Pb.Configuration.Types.Navigation.Unset) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Navigation);
      }
      if (SdkVersion != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(SdkVersion);
      }
      if (Product.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Product);
      }
      if (GrammaticalGender != global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) GrammaticalGender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mcc != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Mcc);
      }
      if (Mnc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mnc);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Locale);
      }
      if (LayoutDirection != global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LayoutDirection);
      }
      if (ScreenWidth != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScreenWidth);
      }
      if (ScreenHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ScreenHeight);
      }
      if (ScreenWidthDp != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ScreenWidthDp);
      }
      if (ScreenHeightDp != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ScreenHeightDp);
      }
      if (SmallestScreenWidthDp != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SmallestScreenWidthDp);
      }
      if (ScreenLayoutSize != global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset) {
        output.WriteRawTag(80);
        output.WriteEnum((int) ScreenLayoutSize);
      }
      if (ScreenLayoutLong != global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ScreenLayoutLong);
      }
      if (ScreenRound != global::Aapt.Pb.Configuration.Types.ScreenRound.Unset) {
        output.WriteRawTag(96);
        output.WriteEnum((int) ScreenRound);
      }
      if (WideColorGamut != global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset) {
        output.WriteRawTag(104);
        output.WriteEnum((int) WideColorGamut);
      }
      if (Hdr != global::Aapt.Pb.Configuration.Types.Hdr.Unset) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Hdr);
      }
      if (Orientation != global::Aapt.Pb.Configuration.Types.Orientation.Unset) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Orientation);
      }
      if (UiModeType != global::Aapt.Pb.Configuration.Types.UiModeType.Unset) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) UiModeType);
      }
      if (UiModeNight != global::Aapt.Pb.Configuration.Types.UiModeNight.Unset) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) UiModeNight);
      }
      if (Density != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Density);
      }
      if (Touchscreen != global::Aapt.Pb.Configuration.Types.Touchscreen.Unset) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) Touchscreen);
      }
      if (KeysHidden != global::Aapt.Pb.Configuration.Types.KeysHidden.Unset) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) KeysHidden);
      }
      if (Keyboard != global::Aapt.Pb.Configuration.Types.Keyboard.Unset) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Keyboard);
      }
      if (NavHidden != global::Aapt.Pb.Configuration.Types.NavHidden.Unset) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) NavHidden);
      }
      if (Navigation != global::Aapt.Pb.Configuration.Types.Navigation.Unset) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Navigation);
      }
      if (SdkVersion != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(SdkVersion);
      }
      if (Product.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Product);
      }
      if (GrammaticalGender != global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) GrammaticalGender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Mcc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mcc);
      }
      if (Mnc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mnc);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (LayoutDirection != global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LayoutDirection);
      }
      if (ScreenWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidth);
      }
      if (ScreenHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenHeight);
      }
      if (ScreenWidthDp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenWidthDp);
      }
      if (ScreenHeightDp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScreenHeightDp);
      }
      if (SmallestScreenWidthDp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SmallestScreenWidthDp);
      }
      if (ScreenLayoutSize != global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScreenLayoutSize);
      }
      if (ScreenLayoutLong != global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScreenLayoutLong);
      }
      if (ScreenRound != global::Aapt.Pb.Configuration.Types.ScreenRound.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScreenRound);
      }
      if (WideColorGamut != global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WideColorGamut);
      }
      if (Hdr != global::Aapt.Pb.Configuration.Types.Hdr.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Hdr);
      }
      if (Orientation != global::Aapt.Pb.Configuration.Types.Orientation.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orientation);
      }
      if (UiModeType != global::Aapt.Pb.Configuration.Types.UiModeType.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UiModeType);
      }
      if (UiModeNight != global::Aapt.Pb.Configuration.Types.UiModeNight.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UiModeNight);
      }
      if (Density != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Density);
      }
      if (Touchscreen != global::Aapt.Pb.Configuration.Types.Touchscreen.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Touchscreen);
      }
      if (KeysHidden != global::Aapt.Pb.Configuration.Types.KeysHidden.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) KeysHidden);
      }
      if (Keyboard != global::Aapt.Pb.Configuration.Types.Keyboard.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Keyboard);
      }
      if (NavHidden != global::Aapt.Pb.Configuration.Types.NavHidden.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NavHidden);
      }
      if (Navigation != global::Aapt.Pb.Configuration.Types.Navigation.Unset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Navigation);
      }
      if (SdkVersion != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SdkVersion);
      }
      if (GrammaticalGender != global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GrammaticalGender);
      }
      if (Product.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Product);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Configuration other) {
      if (other == null) {
        return;
      }
      if (other.Mcc != 0) {
        Mcc = other.Mcc;
      }
      if (other.Mnc != 0) {
        Mnc = other.Mnc;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.LayoutDirection != global::Aapt.Pb.Configuration.Types.LayoutDirection.Unset) {
        LayoutDirection = other.LayoutDirection;
      }
      if (other.ScreenWidth != 0) {
        ScreenWidth = other.ScreenWidth;
      }
      if (other.ScreenHeight != 0) {
        ScreenHeight = other.ScreenHeight;
      }
      if (other.ScreenWidthDp != 0) {
        ScreenWidthDp = other.ScreenWidthDp;
      }
      if (other.ScreenHeightDp != 0) {
        ScreenHeightDp = other.ScreenHeightDp;
      }
      if (other.SmallestScreenWidthDp != 0) {
        SmallestScreenWidthDp = other.SmallestScreenWidthDp;
      }
      if (other.ScreenLayoutSize != global::Aapt.Pb.Configuration.Types.ScreenLayoutSize.Unset) {
        ScreenLayoutSize = other.ScreenLayoutSize;
      }
      if (other.ScreenLayoutLong != global::Aapt.Pb.Configuration.Types.ScreenLayoutLong.Unset) {
        ScreenLayoutLong = other.ScreenLayoutLong;
      }
      if (other.ScreenRound != global::Aapt.Pb.Configuration.Types.ScreenRound.Unset) {
        ScreenRound = other.ScreenRound;
      }
      if (other.WideColorGamut != global::Aapt.Pb.Configuration.Types.WideColorGamut.Unset) {
        WideColorGamut = other.WideColorGamut;
      }
      if (other.Hdr != global::Aapt.Pb.Configuration.Types.Hdr.Unset) {
        Hdr = other.Hdr;
      }
      if (other.Orientation != global::Aapt.Pb.Configuration.Types.Orientation.Unset) {
        Orientation = other.Orientation;
      }
      if (other.UiModeType != global::Aapt.Pb.Configuration.Types.UiModeType.Unset) {
        UiModeType = other.UiModeType;
      }
      if (other.UiModeNight != global::Aapt.Pb.Configuration.Types.UiModeNight.Unset) {
        UiModeNight = other.UiModeNight;
      }
      if (other.Density != 0) {
        Density = other.Density;
      }
      if (other.Touchscreen != global::Aapt.Pb.Configuration.Types.Touchscreen.Unset) {
        Touchscreen = other.Touchscreen;
      }
      if (other.KeysHidden != global::Aapt.Pb.Configuration.Types.KeysHidden.Unset) {
        KeysHidden = other.KeysHidden;
      }
      if (other.Keyboard != global::Aapt.Pb.Configuration.Types.Keyboard.Unset) {
        Keyboard = other.Keyboard;
      }
      if (other.NavHidden != global::Aapt.Pb.Configuration.Types.NavHidden.Unset) {
        NavHidden = other.NavHidden;
      }
      if (other.Navigation != global::Aapt.Pb.Configuration.Types.Navigation.Unset) {
        Navigation = other.Navigation;
      }
      if (other.SdkVersion != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GrammaticalGender != global::Aapt.Pb.Configuration.Types.GrammaticalGender.GramGenderUset) {
        GrammaticalGender = other.GrammaticalGender;
      }
      if (other.Product.Length != 0) {
        Product = other.Product;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mcc = input.ReadUInt32();
            break;
          }
          case 16: {
            Mnc = input.ReadUInt32();
            break;
          }
          case 26: {
            Locale = input.ReadString();
            break;
          }
          case 32: {
            LayoutDirection = (global::Aapt.Pb.Configuration.Types.LayoutDirection) input.ReadEnum();
            break;
          }
          case 40: {
            ScreenWidth = input.ReadUInt32();
            break;
          }
          case 48: {
            ScreenHeight = input.ReadUInt32();
            break;
          }
          case 56: {
            ScreenWidthDp = input.ReadUInt32();
            break;
          }
          case 64: {
            ScreenHeightDp = input.ReadUInt32();
            break;
          }
          case 72: {
            SmallestScreenWidthDp = input.ReadUInt32();
            break;
          }
          case 80: {
            ScreenLayoutSize = (global::Aapt.Pb.Configuration.Types.ScreenLayoutSize) input.ReadEnum();
            break;
          }
          case 88: {
            ScreenLayoutLong = (global::Aapt.Pb.Configuration.Types.ScreenLayoutLong) input.ReadEnum();
            break;
          }
          case 96: {
            ScreenRound = (global::Aapt.Pb.Configuration.Types.ScreenRound) input.ReadEnum();
            break;
          }
          case 104: {
            WideColorGamut = (global::Aapt.Pb.Configuration.Types.WideColorGamut) input.ReadEnum();
            break;
          }
          case 112: {
            Hdr = (global::Aapt.Pb.Configuration.Types.Hdr) input.ReadEnum();
            break;
          }
          case 120: {
            Orientation = (global::Aapt.Pb.Configuration.Types.Orientation) input.ReadEnum();
            break;
          }
          case 128: {
            UiModeType = (global::Aapt.Pb.Configuration.Types.UiModeType) input.ReadEnum();
            break;
          }
          case 136: {
            UiModeNight = (global::Aapt.Pb.Configuration.Types.UiModeNight) input.ReadEnum();
            break;
          }
          case 144: {
            Density = input.ReadUInt32();
            break;
          }
          case 152: {
            Touchscreen = (global::Aapt.Pb.Configuration.Types.Touchscreen) input.ReadEnum();
            break;
          }
          case 160: {
            KeysHidden = (global::Aapt.Pb.Configuration.Types.KeysHidden) input.ReadEnum();
            break;
          }
          case 168: {
            Keyboard = (global::Aapt.Pb.Configuration.Types.Keyboard) input.ReadEnum();
            break;
          }
          case 176: {
            NavHidden = (global::Aapt.Pb.Configuration.Types.NavHidden) input.ReadEnum();
            break;
          }
          case 184: {
            Navigation = (global::Aapt.Pb.Configuration.Types.Navigation) input.ReadEnum();
            break;
          }
          case 192: {
            SdkVersion = input.ReadUInt32();
            break;
          }
          case 202: {
            Product = input.ReadString();
            break;
          }
          case 208: {
            GrammaticalGender = (global::Aapt.Pb.Configuration.Types.GrammaticalGender) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mcc = input.ReadUInt32();
            break;
          }
          case 16: {
            Mnc = input.ReadUInt32();
            break;
          }
          case 26: {
            Locale = input.ReadString();
            break;
          }
          case 32: {
            LayoutDirection = (global::Aapt.Pb.Configuration.Types.LayoutDirection) input.ReadEnum();
            break;
          }
          case 40: {
            ScreenWidth = input.ReadUInt32();
            break;
          }
          case 48: {
            ScreenHeight = input.ReadUInt32();
            break;
          }
          case 56: {
            ScreenWidthDp = input.ReadUInt32();
            break;
          }
          case 64: {
            ScreenHeightDp = input.ReadUInt32();
            break;
          }
          case 72: {
            SmallestScreenWidthDp = input.ReadUInt32();
            break;
          }
          case 80: {
            ScreenLayoutSize = (global::Aapt.Pb.Configuration.Types.ScreenLayoutSize) input.ReadEnum();
            break;
          }
          case 88: {
            ScreenLayoutLong = (global::Aapt.Pb.Configuration.Types.ScreenLayoutLong) input.ReadEnum();
            break;
          }
          case 96: {
            ScreenRound = (global::Aapt.Pb.Configuration.Types.ScreenRound) input.ReadEnum();
            break;
          }
          case 104: {
            WideColorGamut = (global::Aapt.Pb.Configuration.Types.WideColorGamut) input.ReadEnum();
            break;
          }
          case 112: {
            Hdr = (global::Aapt.Pb.Configuration.Types.Hdr) input.ReadEnum();
            break;
          }
          case 120: {
            Orientation = (global::Aapt.Pb.Configuration.Types.Orientation) input.ReadEnum();
            break;
          }
          case 128: {
            UiModeType = (global::Aapt.Pb.Configuration.Types.UiModeType) input.ReadEnum();
            break;
          }
          case 136: {
            UiModeNight = (global::Aapt.Pb.Configuration.Types.UiModeNight) input.ReadEnum();
            break;
          }
          case 144: {
            Density = input.ReadUInt32();
            break;
          }
          case 152: {
            Touchscreen = (global::Aapt.Pb.Configuration.Types.Touchscreen) input.ReadEnum();
            break;
          }
          case 160: {
            KeysHidden = (global::Aapt.Pb.Configuration.Types.KeysHidden) input.ReadEnum();
            break;
          }
          case 168: {
            Keyboard = (global::Aapt.Pb.Configuration.Types.Keyboard) input.ReadEnum();
            break;
          }
          case 176: {
            NavHidden = (global::Aapt.Pb.Configuration.Types.NavHidden) input.ReadEnum();
            break;
          }
          case 184: {
            Navigation = (global::Aapt.Pb.Configuration.Types.Navigation) input.ReadEnum();
            break;
          }
          case 192: {
            SdkVersion = input.ReadUInt32();
            break;
          }
          case 202: {
            Product = input.ReadString();
            break;
          }
          case 208: {
            GrammaticalGender = (global::Aapt.Pb.Configuration.Types.GrammaticalGender) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Configuration message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum LayoutDirection {
        [pbr::OriginalName("LAYOUT_DIRECTION_UNSET")] Unset = 0,
        [pbr::OriginalName("LAYOUT_DIRECTION_LTR")] Ltr = 1,
        [pbr::OriginalName("LAYOUT_DIRECTION_RTL")] Rtl = 2,
      }

      public enum ScreenLayoutSize {
        [pbr::OriginalName("SCREEN_LAYOUT_SIZE_UNSET")] Unset = 0,
        [pbr::OriginalName("SCREEN_LAYOUT_SIZE_SMALL")] Small = 1,
        [pbr::OriginalName("SCREEN_LAYOUT_SIZE_NORMAL")] Normal = 2,
        [pbr::OriginalName("SCREEN_LAYOUT_SIZE_LARGE")] Large = 3,
        [pbr::OriginalName("SCREEN_LAYOUT_SIZE_XLARGE")] Xlarge = 4,
      }

      public enum ScreenLayoutLong {
        [pbr::OriginalName("SCREEN_LAYOUT_LONG_UNSET")] Unset = 0,
        [pbr::OriginalName("SCREEN_LAYOUT_LONG_LONG")] Long = 1,
        [pbr::OriginalName("SCREEN_LAYOUT_LONG_NOTLONG")] Notlong = 2,
      }

      public enum ScreenRound {
        [pbr::OriginalName("SCREEN_ROUND_UNSET")] Unset = 0,
        [pbr::OriginalName("SCREEN_ROUND_ROUND")] Round = 1,
        [pbr::OriginalName("SCREEN_ROUND_NOTROUND")] Notround = 2,
      }

      public enum WideColorGamut {
        [pbr::OriginalName("WIDE_COLOR_GAMUT_UNSET")] Unset = 0,
        [pbr::OriginalName("WIDE_COLOR_GAMUT_WIDECG")] Widecg = 1,
        [pbr::OriginalName("WIDE_COLOR_GAMUT_NOWIDECG")] Nowidecg = 2,
      }

      public enum Hdr {
        [pbr::OriginalName("HDR_UNSET")] Unset = 0,
        [pbr::OriginalName("HDR_HIGHDR")] Highdr = 1,
        [pbr::OriginalName("HDR_LOWDR")] Lowdr = 2,
      }

      public enum Orientation {
        [pbr::OriginalName("ORIENTATION_UNSET")] Unset = 0,
        [pbr::OriginalName("ORIENTATION_PORT")] Port = 1,
        [pbr::OriginalName("ORIENTATION_LAND")] Land = 2,
        [pbr::OriginalName("ORIENTATION_SQUARE")] Square = 3,
      }

      public enum UiModeType {
        [pbr::OriginalName("UI_MODE_TYPE_UNSET")] Unset = 0,
        [pbr::OriginalName("UI_MODE_TYPE_NORMAL")] Normal = 1,
        [pbr::OriginalName("UI_MODE_TYPE_DESK")] Desk = 2,
        [pbr::OriginalName("UI_MODE_TYPE_CAR")] Car = 3,
        [pbr::OriginalName("UI_MODE_TYPE_TELEVISION")] Television = 4,
        [pbr::OriginalName("UI_MODE_TYPE_APPLIANCE")] Appliance = 5,
        [pbr::OriginalName("UI_MODE_TYPE_WATCH")] Watch = 6,
        [pbr::OriginalName("UI_MODE_TYPE_VRHEADSET")] Vrheadset = 7,
      }

      public enum UiModeNight {
        [pbr::OriginalName("UI_MODE_NIGHT_UNSET")] Unset = 0,
        [pbr::OriginalName("UI_MODE_NIGHT_NIGHT")] Night = 1,
        [pbr::OriginalName("UI_MODE_NIGHT_NOTNIGHT")] Notnight = 2,
      }

      public enum Touchscreen {
        [pbr::OriginalName("TOUCHSCREEN_UNSET")] Unset = 0,
        [pbr::OriginalName("TOUCHSCREEN_NOTOUCH")] Notouch = 1,
        [pbr::OriginalName("TOUCHSCREEN_STYLUS")] Stylus = 2,
        [pbr::OriginalName("TOUCHSCREEN_FINGER")] Finger = 3,
      }

      public enum KeysHidden {
        [pbr::OriginalName("KEYS_HIDDEN_UNSET")] Unset = 0,
        [pbr::OriginalName("KEYS_HIDDEN_KEYSEXPOSED")] Keysexposed = 1,
        [pbr::OriginalName("KEYS_HIDDEN_KEYSHIDDEN")] Keyshidden = 2,
        [pbr::OriginalName("KEYS_HIDDEN_KEYSSOFT")] Keyssoft = 3,
      }

      public enum Keyboard {
        [pbr::OriginalName("KEYBOARD_UNSET")] Unset = 0,
        [pbr::OriginalName("KEYBOARD_NOKEYS")] Nokeys = 1,
        [pbr::OriginalName("KEYBOARD_QWERTY")] Qwerty = 2,
        [pbr::OriginalName("KEYBOARD_TWELVEKEY")] Twelvekey = 3,
      }

      public enum NavHidden {
        [pbr::OriginalName("NAV_HIDDEN_UNSET")] Unset = 0,
        [pbr::OriginalName("NAV_HIDDEN_NAVEXPOSED")] Navexposed = 1,
        [pbr::OriginalName("NAV_HIDDEN_NAVHIDDEN")] Navhidden = 2,
      }

      public enum Navigation {
        [pbr::OriginalName("NAVIGATION_UNSET")] Unset = 0,
        [pbr::OriginalName("NAVIGATION_NONAV")] Nonav = 1,
        [pbr::OriginalName("NAVIGATION_DPAD")] Dpad = 2,
        [pbr::OriginalName("NAVIGATION_TRACKBALL")] Trackball = 3,
        [pbr::OriginalName("NAVIGATION_WHEEL")] Wheel = 4,
      }

      public enum GrammaticalGender {
        [pbr::OriginalName("GRAM_GENDER_USET")] GramGenderUset = 0,
        [pbr::OriginalName("GRAM_GENDER_NEUTER")] GramGenderNeuter = 1,
        [pbr::OriginalName("GRAM_GENDER_FEMININE")] GramGenderFeminine = 2,
        [pbr::OriginalName("GRAM_GENDER_MASCULINE")] GramGenderMasculine = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
